Checked: [@(FStar.Pervasives.Comment "")]
assume new val Prims.attribute <> : Type u#(0)

Checked: [@(FStar.Pervasives.Comment "")]
assume val Prims.cps <> : Prims.attribute

Checked: [@(FStar.Pervasives.Comment "")]
assume val Prims.hasEq <uu___268> : (uu___#270:Type u#(uu___268) -> GTot<1> Type u#(0))

Checked: [@(FStar.Pervasives.Comment "") (FStar.Pervasives.Comment "")]
visible let  Prims.eqtype <uu___288> : Type u#((@0 + 1)) = (a#276:Type u#(@0){(Prims.hasEq<@1> a@0:(Tm_type))})

Checked: [@(FStar.Pervasives.Comment "")]
assume new val Prims.bool <> : Type u#(0)

Checked: val Prims.HasEq_bool : (Prims.hasEq<0> Prims.bool)

Checked: type Prims.c_False  : Type u#(0)

Checked: type Prims.c_True  : Type u#(0)
datacon<> Prims.T : Prims.c_True

Checked: (Discriminator Prims.T) logic assume val Prims.uu___is_T <> : (projectee#322:Prims.c_True -> Tot<0> Prims.bool)

Checked: [@(FStar.Pervasives.Comment "")]
assume new val Prims.unit <> : Type u#(0)

Checked: val Prims.HasEq_unit : (Prims.hasEq<0> Prims.unit)

Checked: [@(FStar.Pervasives.Comment "")]
visible let  Prims.squash <uu___358> : (p#365:Type u#(@0) -> Tot<1> Type u#(0)) = (fun p#366:Type u#(@0) -> ((x#345:Prims.unit{p@1:(Tm_type)}) $$ (residual) Prims.Tot Type u#(0)))

Checked: [@(FStar.Pervasives.Comment "")]
visible private let  Prims.auto_squash <uu___381> : (p#387:Type u#(@0) -> Tot Type u#(0)) = (fun p#388:Type u#(@0) -> ((Prims.squash<@1> p@0:(Tm_type)) $$ (residual) Prims.Tot Type u#(0)))

Checked: [@(FStar.Pervasives.Comment "")]
visible let  Prims.l_True <> : Type u#(0) = (Prims.squash<0> Prims.c_True)

Checked: [@(FStar.Pervasives.Comment "")]
visible let  Prims.l_False <> : Type u#(0) = (Prims.squash<0> Prims.c_False)

Checked: type Prims.equals #a#469:Type u#(@0) x#470:a@0:(Tm_type) : (uu___#471:a@1:(Tm_type) -> Tot Type u#(0))
datacon<uu___453> Prims.Refl : (#.a#472:Type u#(@0) -> #.x#473:a@0:(Tm_type) -> Tot (Prims.equals<@2> #a@1:(Tm_type) x@0:(Tm_name: a#472) x@0:(Tm_name: a#472)))

Checked: (Discriminator Prims.Refl) logic assume val Prims.uu___is_Refl <uu___453> : (#a#544:Type u#(uu___453) -> #x#545:a@0:(Tm_type) -> #uu___#546:a@1:(Tm_type) -> projectee#547:(Prims.equals<uu___453> #a@2:(Tm_type) x@1:(Tm_name: a#544) uu___@0:(Tm_name: a#544)) -> Tot<0> Prims.bool)

Checked: [@(FStar.Pervasives.Comment "")]
visible let  Prims.eq2 <uu___638> : (#a#654:Type u#(@0) -> x#655:a@0:(Tm_type) -> y#656:a@1:(Tm_type) -> Tot<1> Type u#(0)) = (fun #a#657:Type u#(@0) x#658:a@0:(Tm_type) y#659:a@1:(Tm_type) -> ((Prims.squash<0> (Prims.equals<@3> #a@2:(Tm_type) x@1:(Tm_name: a#657) y@0:(Tm_name: a#657))) $$ (residual) Prims.Tot Type u#(0)))

Checked: type Prims.h_equals #a#754:Type u#(@0) x#755:a@0:(Tm_type) : (#b#756:Type u#(@2) -> uu___#757:b@0:(Tm_type) -> Tot Type u#(0))
datacon<uu___736> Prims.HRefl : (#.a#758:Type u#(@0) -> #.x#759:a@0:(Tm_type) -> Tot (Prims.h_equals<@2> #a@1:(Tm_type) x@0:(Tm_name: a#758) #a@1:(Tm_type) x@0:(Tm_name: a#758)))

Checked: (Discriminator Prims.HRefl) logic assume val Prims.uu___is_HRefl <uu___736> : (#a#854:Type u#(uu___736) -> #x#855:a@0:(Tm_type) -> #b#856:Type u#(uu___736) -> #uu___#857:b@0:(Tm_type) -> projectee#858:(Prims.h_equals<uu___736> #a@3:(Tm_type) x@2:(Tm_name: a#854) #b@1:(Tm_type) uu___@0:(Tm_name: b#856)) -> Tot<0> Prims.bool)

Checked: [@(FStar.Pervasives.Comment "")]
visible let  Prims.eq3 <uu___991> : (#a#1012:Type u#(@0) -> #b#1013:Type u#(@1) -> x#1014:a@1:(Tm_type) -> y#1015:b@1:(Tm_type) -> Tot<1> Type u#(0)) = (fun #a#1016:Type u#(@0) #b#1017:Type u#(@1) x#1018:a@1:(Tm_type) y#1019:b@1:(Tm_type) -> ((Prims.squash<0> (Prims.h_equals<@4> #a@3:(Tm_type) x@1:(Tm_name: a#1016) #b@2:(Tm_type) y@0:(Tm_name: b#1017))) $$ (residual) Prims.Tot Type u#(0)))

Checked: [@(FStar.Pervasives.Comment "")]
unfold let  Prims.op_Equals_Equals_Equals <uu___1107> : (#a#1128:Type u#(@0) -> #b#1129:Type u#(@1) -> x#1130:a@1:(Tm_type) -> y#1131:b@1:(Tm_type) -> Tot Type u#(0)) = (fun #a#1132:Type u#(@0) #b#1133:Type u#(@1) x#1134:a@1:(Tm_type) y#1135:b@1:(Tm_type) -> ((Prims.eq3<@4> #a@3:(Tm_type) #b@2:(Tm_type) x@1:(Tm_name: a#1132) y@0:(Tm_name: b#1133)) $$ (residual) Prims.Tot Type u#(0)))

Checked: [@(FStar.Pervasives.Comment "")]
visible let  Prims.b2t <> : (b#1168:Prims.bool -> Tot<1> Type u#(0)) = (fun b#1169:Prims.bool -> ((Prims.eq2<0> #Prims.bool b@0:(Tm_fvar: Prims.bool) true) $$ (residual) Prims.Tot Type u#(0)))

Checked: type Prims.c_and p#1235:Type u#(@0) q#1236:Type u#(@2) : Type u#((max @3, @2))
datacon<uu___1214, uu___1215> Prims.And : (#.p#1237:Type u#(@0) -> #.q#1238:Type u#(@2) -> _0#1239:p@1:(Tm_type) -> _1#1240:q@1:(Tm_type) -> Tot (Prims.c_and<@5, @4> p@3:(Tm_type) q@2:(Tm_type)))

Checked: (Discriminator Prims.And) logic assume val Prims.uu___is_And <uu___1214, uu___1215> : (#p#1302:Type u#(uu___1215) -> #q#1303:Type u#(uu___1214) -> projectee#1304:(Prims.c_and<uu___1214, uu___1215> p@1:(Tm_type) q@0:(Tm_type)) -> Tot<0> Prims.bool)

Checked: assume (Projector Prims.And _0) val Prims.__proj__And__item___0 <uu___1214, uu___1215> : (#p#1350:Type u#(uu___1215) -> #q#1351:Type u#(uu___1214) -> projectee#1352:(Prims.c_and<uu___1214, uu___1215> p@1:(Tm_type) q@0:(Tm_type)) -> Tot<uu___1215> p@2:(Tm_type))

Checked: assume (Projector Prims.And _1) val Prims.__proj__And__item___1 <uu___1214, uu___1215> : (#p#1398:Type u#(uu___1215) -> #q#1399:Type u#(uu___1214) -> projectee#1400:(Prims.c_and<uu___1214, uu___1215> p@1:(Tm_type) q@0:(Tm_type)) -> Tot<uu___1214> q@1:(Tm_type))

Checked: 
Checked: 
Checked: [@(FStar.Pervasives.Comment "") (FStar.Pervasives.Comment "")]
visible let  Prims.l_and <> : (p#1461:Type u#(0) -> q#1462:Type u#(0) -> Tot<1> Type u#(0)) = (fun p#1463:Type u#(0) q#1464:Type u#(0) -> ((Prims.squash<0> (Prims.c_and<0, 0> p@1:(Tm_type) q@0:(Tm_type))) $$ (residual) Prims.Tot Type u#(0)))

Checked: type Prims.c_or p#1566:Type u#(@0) q#1567:Type u#(@2) : Type u#((max @3, @2))
datacon<uu___1534, uu___1535> Prims.Left : (#.p#1568:Type u#(@0) -> #.q#1569:Type u#(@2) -> _0#1570:p@1:(Tm_type) -> Tot (Prims.c_or<@4, @3> p@2:(Tm_type) q@1:(Tm_type)))
datacon<uu___1534, uu___1535> Prims.Right : (#.p#1571:Type u#(@0) -> #.q#1572:Type u#(@2) -> _0#1573:q@0:(Tm_type) -> Tot (Prims.c_or<@4, @3> p@2:(Tm_type) q@1:(Tm_type)))

Checked: (Discriminator Prims.Left) logic assume val Prims.uu___is_Left <uu___1534, uu___1535> : (#p#1652:Type u#(uu___1535) -> #q#1653:Type u#(uu___1534) -> projectee#1654:(Prims.c_or<uu___1534, uu___1535> p@1:(Tm_type) q@0:(Tm_type)) -> Tot<0> Prims.bool)

Checked: assume (Projector Prims.Left _0) val Prims.__proj__Left__item___0 <uu___1534, uu___1535> : (#p#1749:Type u#(uu___1535) -> #q#1750:Type u#(uu___1534) -> projectee#1751:(uu___#1676:(Prims.c_or<uu___1534, uu___1535> p@1:(Tm_type) q@0:(Tm_type)){(Prims.b2t (Prims.uu___is_Left<uu___1534, uu___1535> #p@2:(Tm_type) #q@1:(Tm_type) uu___@0:(Tm_delayed)))}) -> Tot<uu___1535> p@2:(Tm_type))

Checked: (Discriminator Prims.Right) logic assume val Prims.uu___is_Right <uu___1534, uu___1535> : (#p#1811:Type u#(uu___1535) -> #q#1812:Type u#(uu___1534) -> projectee#1813:(Prims.c_or<uu___1534, uu___1535> p@1:(Tm_type) q@0:(Tm_type)) -> Tot<0> Prims.bool)

Checked: assume (Projector Prims.Right _0) val Prims.__proj__Right__item___0 <uu___1534, uu___1535> : (#p#1908:Type u#(uu___1535) -> #q#1909:Type u#(uu___1534) -> projectee#1910:(uu___#1835:(Prims.c_or<uu___1534, uu___1535> p@1:(Tm_type) q@0:(Tm_type)){(Prims.b2t (Prims.uu___is_Right<uu___1534, uu___1535> #p@2:(Tm_type) #q@1:(Tm_type) uu___@0:(Tm_delayed)))}) -> Tot<uu___1534> q@1:(Tm_type))

Checked: 
Checked: 
Checked: 
Checked: 
Checked: [@(FStar.Pervasives.Comment "") (FStar.Pervasives.Comment "")]
visible let  Prims.l_or <> : (p#1985:Type u#(0) -> q#1986:Type u#(0) -> Tot<1> Type u#(0)) = (fun p#1987:Type u#(0) q#1988:Type u#(0) -> ((Prims.squash<0> (Prims.c_or<0, 0> p@1:(Tm_type) q@0:(Tm_type))) $$ (residual) Prims.Tot Type u#(0)))

Checked: [@(FStar.Pervasives.Comment "")]
visible let  Prims.l_imp <> : (p#2047:Type u#(0) -> q#2048:Type u#(0) -> Tot<1> Type u#(0)) = (fun p#2049:Type u#(0) q#2050:Type u#(0) -> ((Prims.squash<0> (uu___#2051:p@1:(Tm_type) -> GTot<0> q@1:(Tm_type))) $$ (residual) Prims.Tot Type u#(0)))

Checked: [@(FStar.Pervasives.Comment "")]
visible logic let  Prims.l_iff <> : (p#2124:Type u#(0) -> q#2125:Type u#(0) -> Tot<1> Type u#(0)) = (fun p#2126:Type u#(0) q#2127:Type u#(0) -> ((Prims.l_and (Prims.l_imp p@1:(Tm_type) q@0:(Tm_type)) (Prims.l_imp q@0:(Tm_type) p@1:(Tm_type))) $$ (residual) Prims.Tot Type u#(0)))

Checked: [@(FStar.Pervasives.Comment "")]
visible let  Prims.l_not <> : (p#2162:Type u#(0) -> Tot<1> Type u#(0)) = (fun p#2163:Type u#(0) -> ((Prims.l_imp p@0:(Tm_type) Prims.l_False) $$ (residual) Prims.Tot Type u#(0)))

Checked: [@(FStar.Pervasives.Comment "")]
logic unfold let  Prims.l_ITE <> : (p#2260:Type u#(0) -> q#2261:Type u#(0) -> r#2262:Type u#(0) -> Tot<1> Type u#(0)) = (fun p#2263:Type u#(0) q#2264:Type u#(0) r#2265:Type u#(0) -> ((Prims.l_and (Prims.l_imp p@2:(Tm_type) q@1:(Tm_type)) (Prims.l_imp (Prims.l_not p@2:(Tm_type)) r@0:(Tm_type))) $$ (residual) Prims.Tot Type u#(0)))

Checked: [@(FStar.Pervasives.Comment "")]
assume val Prims.precedes <uu___2296, uu___2297> : (#a#2302:Type u#(uu___2297) -> #b#2303:Type u#(uu___2296) -> uu___#2304:a@1:(Tm_type) -> uu___#2305:b@1:(Tm_type) -> Tot<1> Type u#(0))

Checked: [@(FStar.Pervasives.Comment "")]
assume val Prims.has_type <uu___2328, uu___2329> : (#a#2333:Type u#(uu___2329) -> uu___#2334:a@0:(Tm_type) -> uu___#2335:Type u#(uu___2328) -> Tot<1> Type u#(0))

Checked: [@(FStar.Pervasives.Comment "") (FStar.Pervasives.Comment "")]
visible let  Prims.l_Forall <uu___2417> : (#a#2432:Type u#(@0) -> p#2433:(uu___#2434:a@0:(Tm_type) -> GTot<1> Type u#(0)) -> Tot<1> Type u#(0)) = (fun #a#2435:Type u#(@0) p#2436:(uu___#2438:a@0:(Tm_type) -> GTot<1> Type u#(0)) -> ((Prims.squash<@2> (x#2437:a@1:(Tm_type) -> GTot<0> (p@1:(Tm_delayed) x@0:(Tm_name: a#2435)))) $$ (residual) Prims.Tot Type u#(0)))

Checked: [@(FStar.Pervasives.Comment "")]
visible let  Prims.prop <> : Type u#(1) = (a#2458:Type u#(0){(Prims.l_Forall<0> #a@0:(Tm_type) (fun x#2510:a@0:(Tm_type) -> ((Prims.op_Equals_Equals_Equals<0> #a@1:(Tm_type) #Prims.unit x@0:(Tm_name: a#2509) ()) $$ (residual) Prims.GTot Type u#(0))))})

Checked: unopteq type Prims.dtuple2 a#2898:Type u#(@0) b#2899:(uu___#2900:a@0:(Tm_type) -> GTot<(@3 + 1)> Type u#(@3)) : Type u#((max @3, @2))
datacon<uu___2589, uu___2590> Prims.Mkdtuple2 : (#.a#2901:Type u#(@0) -> #.b#2902:(uu___#2905:a@0:(Tm_type) -> GTot<(@3 + 1)> Type u#(@3)) -> _1#2903:a@1:(Tm_type) -> _2#2904:(b@1:(Tm_delayed) _1@0:(Tm_name: a#2901)) -> Tot (Prims.dtuple2<@5, @4> a@3:(Tm_type) b@2:(Tm_delayed)))
val Prims.dtuple2_haseq : (Prims.l_and Prims.l_True (Prims.l_Forall<(uu___2590 + 1)> #Type u#(uu___2590) (fun a#2906:Type u#(uu___2590) -> ((Prims.l_Forall<(max (uu___2589 + 1), uu___2590)> #(uu___#2907:a@0:(Tm_type) -> GTot<(uu___2589 + 1)> Type u#(uu___2589)) (fun b#2908:(uu___#2911:a@0:(Tm_type) -> GTot<(uu___2589 + 1)> Type u#(uu___2589)) -> ({:pattern (Prims.hasEq<(max uu___2589, uu___2590)> (Prims.dtuple2<uu___2589, uu___2590> a@1:(Tm_type) b@0:(Tm_delayed)))} (Prims.l_imp (Prims.l_and Prims.l_True (Prims.l_Forall<uu___2590> #a@1:(Tm_type) (fun _1#2909:a@1:(Tm_type) -> ((Prims.l_Forall<uu___2589> #(b@1:(Tm_delayed) _1@0:(Tm_name: a#2906)) (fun _2#2910:(b@1:(Tm_delayed) _1@0:(Tm_name: a#2906)) -> ((Prims.l_and (Prims.l_and Prims.l_True (Prims.hasEq<uu___2590> a@3:(Tm_type))) (Prims.hasEq<uu___2589> (b@2:(Tm_delayed) _1@1:(Tm_name: a#2906)))) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.GTot Type u#(0))))) (Prims.hasEq<(max uu___2589, uu___2590)> (Prims.dtuple2<uu___2589, uu___2590> a@1:(Tm_type) b@0:(Tm_delayed)))) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.GTot Type u#(0)))))

Checked: (Discriminator Prims.Mkdtuple2) logic assume val Prims.uu___is_Mkdtuple2 <uu___2589, uu___2590> : (#a#3024:Type u#(uu___2590) -> #b#3025:(uu___#3027:a@0:(Tm_type) -> GTot<(uu___2589 + 1)> Type u#(uu___2589)) -> projectee#3026:(Prims.dtuple2<uu___2589, uu___2590> a@1:(Tm_type) b@0:(Tm_delayed)) -> Tot<0> Prims.bool)

Checked: assume (Projector Prims.Mkdtuple2 _1) val Prims.__proj__Mkdtuple2__item___1 <uu___2589, uu___2590> : (#a#3099:Type u#(uu___2590) -> #b#3100:(uu___#3102:a@0:(Tm_type) -> GTot<(uu___2589 + 1)> Type u#(uu___2589)) -> projectee#3101:(Prims.dtuple2<uu___2589, uu___2590> a@1:(Tm_type) b@0:(Tm_delayed)) -> Tot<uu___2590> a@2:(Tm_type))

Checked: assume (Projector Prims.Mkdtuple2 _2) val Prims.__proj__Mkdtuple2__item___2 <uu___2589, uu___2590> : (#a#3228:Type u#(uu___2590) -> #b#3229:(uu___#3231:a@0:(Tm_type) -> GTot<(uu___2589 + 1)> Type u#(uu___2589)) -> projectee#3230:(Prims.dtuple2<uu___2589, uu___2590> a@1:(Tm_type) b@0:(Tm_delayed)) -> Tot<uu___2589> (b@1:(Tm_delayed) (Prims.__proj__Mkdtuple2__item___1<uu___2589, uu___2590> #a@2:(Tm_type) #b@1:(Tm_delayed) projectee@0:(Tm_delayed))))

Checked: 
Checked: 
Checked: [@(FStar.Pervasives.Comment "") (FStar.Pervasives.Comment "")]
visible let  Prims.l_Exists <uu___3338> : (#a#3353:Type u#(@0) -> p#3354:(uu___#3355:a@0:(Tm_type) -> GTot<1> Type u#(0)) -> Tot<1> Type u#(0)) = (fun #a#3356:Type u#(@0) p#3357:(uu___#3359:a@0:(Tm_type) -> GTot<1> Type u#(0)) -> ((Prims.squash<@2> (Prims.dtuple2<0, @2> a@1:(Tm_type) (fun x#3358:a@1:(Tm_type) -> ((p@1:(Tm_delayed) x@0:(Tm_name: a#3356)) $$ (residual) Prims.GTot Type u#(0))))) $$ (residual) Prims.Tot Type u#(0)))

Checked: [@(FStar.Pervasives.Comment "")]
assume new val Prims.range <> : Type u#(0)

Checked: [@(FStar.Pervasives.Comment "")]
assume new val Prims.string <> : Type u#(0)

Checked: val Prims.HasEq_string : (Prims.hasEq<0> Prims.string)

Checked: [@(FStar.Pervasives.Comment "")]
irreducible let  Prims.labeled <uu___3403> : (r#3419:Prims.range -> msg#3420:Prims.string -> b#3421:Type u#(@2) -> Tot Type u#(@3)) = (fun r#3422:Prims.range msg#3423:Prims.string b#3424:Type u#(@2) -> (b@0:(Tm_type) $$ (residual) Prims.Tot Type u#(@3)))

Checked: [@(FStar.Pervasives.Comment "")]
visible let  Prims.pure_pre <> : Type u#(1) = Type u#(0)

Checked: [@(FStar.Pervasives.Comment "")]
visible let  Prims.pure_post' <uu___3463, uu___3464> : (a#3477:Type u#(@0) -> pre#3478:Type u#(@2) -> Tot Type u#((max 1, @2))) = (fun a#3479:Type u#(@0) pre#3480:Type u#(@2) -> ((uu___6#3481:(uu___6#3442:a@1:(Tm_type){pre@1:(Tm_type)}) -> GTot<1> Type u#(0)) $$ (residual) Prims.Tot Type u#((max 1, @2))))

Checked: [@(FStar.Pervasives.Comment "")]
visible let  Prims.pure_post <uu___3506> : (a#3512:Type u#(@0) -> Tot Type u#((max 1, @1))) = (fun a#3513:Type u#(@0) -> ((Prims.pure_post'<0, @1> a@0:(Tm_type) Prims.l_True) $$ (residual) Prims.Tot Type u#((max 1, @1))))

Checked: [@(FStar.Pervasives.Comment "")]
visible let  Prims.pure_wp <uu___3536> : (a#3543:Type u#(@0) -> Tot Type u#((max 1, @1))) = (fun a#3544:Type u#(@0) -> ((uu___#3545:(Prims.pure_post<@1> a@0:(Tm_type)) -> GTot<1> Prims.pure_pre) $$ (residual) Prims.Tot Type u#((max 1, @1))))

Checked: [@(FStar.Pervasives.Comment "")]
assume val Prims.guard_free <> : (uu___#3562:Type u#(0) -> Tot<1> Type u#(0))

Checked: [@(FStar.Pervasives.Comment "") (FStar.Pervasives.Comment "")]
logic unfold let  Prims.pure_return <uu___3667> : (a#3684:Type u#(@0) -> x#3685:a@0:(Tm_type) -> p#3686:(Prims.pure_post<@2> a@1:(Tm_type)) -> Tot Type u#(0)) = (fun a#3687:Type u#(@0) x#3688:a@0:(Tm_type) p#3689:(Prims.pure_post<@2> a@1:(Tm_type)) -> ((Prims.l_Forall<@3> #a@2:(Tm_type) (fun return_val#3690:a@2:(Tm_type) -> ((Prims.l_imp (Prims.eq2<@4> #a@3:(Tm_type) return_val@0:(Tm_name: a#3687) x@2:(Tm_name: a#3687)) (p@1:(Tm_delayed) return_val@0:(Tm_name: a#3687))) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.Tot Type u#(0)))

Checked: [@(FStar.Pervasives.Comment "")]
unfold let  Prims.pure_bind_wp <uu___3833, uu___3834> : (r1#3869:Prims.range -> a#3870:Type u#(@1) -> b#3871:Type u#(@3) -> wp1#3872:(Prims.pure_wp<@3> a@1:(Tm_type)) -> wp2#3873:(uu___#3875:a@2:(Tm_type) -> GTot<(max 1, @6)> (Prims.pure_wp<@6> b@2:(Tm_type))) -> p#3874:(Prims.pure_post<@6> b@2:(Tm_type)) -> Tot Prims.pure_pre) = (fun r1#3876:Prims.range a#3877:Type u#(@1) b#3878:Type u#(@3) wp1#3879:(Prims.pure_wp<@3> a@1:(Tm_type)) wp2#3880:(uu___#3883:a@2:(Tm_type) -> GTot<(max 1, @6)> (Prims.pure_wp<@6> b@2:(Tm_type))) p#3881:(Prims.pure_post<@6> b@2:(Tm_type)) -> ((wp1@2:(Tm_delayed) (fun bind_result_1#3882:a@4:(Tm_type) -> ((wp2@2:(Tm_delayed) bind_result_1@0:(Tm_name: a#3877) p@1:(Tm_delayed)) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.Tot Prims.pure_pre))

Checked: [@(FStar.Pervasives.Comment "")]
unfold let  Prims.pure_if_then_else <uu___3972> : (a#3998:Type u#(@0) -> p#3999:Type u#(0) -> wp_then#4000:(Prims.pure_wp<@2> a@1:(Tm_type)) -> wp_else#4001:(Prims.pure_wp<@3> a@2:(Tm_type)) -> post#4002:(Prims.pure_post<@4> a@3:(Tm_type)) -> Tot Type u#(0)) = (fun a#4003:Type u#(@0) p#4004:Type u#(0) wp_then#4005:(Prims.pure_wp<@2> a@1:(Tm_type)) wp_else#4006:(Prims.pure_wp<@3> a@2:(Tm_type)) post#4007:(Prims.pure_post<@4> a@3:(Tm_type)) -> ((Prims.l_ITE p@3:(Tm_type) (wp_then@2:(Tm_delayed) post@0:(Tm_delayed)) (wp_else@1:(Tm_delayed) post@0:(Tm_delayed))) $$ (residual) Prims.Tot Type u#(0)))

Checked: [@(FStar.Pervasives.Comment "")]
logic unfold let  Prims.pure_ite_wp <uu___4189> : (a#4207:Type u#(@0) -> wp#4208:(Prims.pure_wp<@1> a@0:(Tm_type)) -> post#4209:(Prims.pure_post<@2> a@1:(Tm_type)) -> Tot Type u#(0)) = (fun a#4210:Type u#(@0) wp#4211:(Prims.pure_wp<@1> a@0:(Tm_type)) post#4212:(Prims.pure_post<@2> a@1:(Tm_type)) -> ((Prims.l_Forall<(max 1, @3)> #(Prims.pure_post<@3> a@2:(Tm_type)) (fun k#4213:(Prims.pure_post<@3> a@2:(Tm_type)) -> ((Prims.l_imp (Prims.l_Forall<@4> #a@3:(Tm_type) (fun x#4214:a@3:(Tm_type) -> ({:pattern (Prims.guard_free (k@1:(Tm_delayed) x@0:(Tm_name: a#4210)))} (Prims.l_iff (k@1:(Tm_delayed) x@0:(Tm_name: a#4210)) (post@2:(Tm_delayed) x@0:(Tm_name: a#4210))) $$ (residual) Prims.GTot Type u#(0)))) (wp@2:(Tm_delayed) k@0:(Tm_delayed))) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.Tot Type u#(0)))

Checked: [@(FStar.Pervasives.Comment "")]
logic unfold let  Prims.pure_stronger <uu___4304> : (a#4321:Type u#(@0) -> wp1#4322:(Prims.pure_wp<@1> a@0:(Tm_type)) -> wp2#4323:(Prims.pure_wp<@2> a@1:(Tm_type)) -> Tot Type u#(0)) = (fun a#4324:Type u#(@0) wp1#4325:(Prims.pure_wp<@1> a@0:(Tm_type)) wp2#4326:(Prims.pure_wp<@2> a@1:(Tm_type)) -> ((Prims.l_Forall<(max 1, @3)> #(Prims.pure_post<@3> a@2:(Tm_type)) (fun p#4327:(Prims.pure_post<@3> a@2:(Tm_type)) -> ((Prims.l_imp (wp1@2:(Tm_delayed) p@0:(Tm_delayed)) (wp2@1:(Tm_delayed) p@0:(Tm_delayed))) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.Tot Type u#(0)))

Checked: [@(FStar.Pervasives.Comment "")]
logic unfold let  Prims.pure_close_wp <uu___4426, uu___4427> : (a#4452:Type u#(@0) -> b#4453:Type u#(@2) -> wp#4454:(uu___#4456:b@0:(Tm_type) -> GTot<(max 1, @3)> (Prims.pure_wp<@3> a@2:(Tm_type))) -> p#4455:(Prims.pure_post<@3> a@2:(Tm_type)) -> Tot Type u#(0)) = (fun a#4457:Type u#(@0) b#4458:Type u#(@2) wp#4459:(uu___#4462:b@0:(Tm_type) -> GTot<(max 1, @3)> (Prims.pure_wp<@3> a@2:(Tm_type))) p#4460:(Prims.pure_post<@3> a@2:(Tm_type)) -> ((Prims.l_Forall<@5> #b@2:(Tm_type) (fun b#4461:b@2:(Tm_type) -> ((wp@2:(Tm_delayed) b@0:(Tm_name: b#4458) p@1:(Tm_delayed)) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.Tot Type u#(0)))

Checked: [@(FStar.Pervasives.Comment "")]
logic unfold let  Prims.pure_assert_p <uu___4517> : (a#4538:Type u#(@0) -> q#4539:Type u#(0) -> wp#4540:(Prims.pure_wp<@2> a@1:(Tm_type)) -> p#4541:(Prims.pure_post<@3> a@2:(Tm_type)) -> Tot Type u#(0)) = (fun a#4542:Type u#(@0) q#4543:Type u#(0) wp#4544:(Prims.pure_wp<@2> a@1:(Tm_type)) p#4545:(Prims.pure_post<@3> a@2:(Tm_type)) -> ((Prims.l_and q@2:(Tm_type) (wp@1:(Tm_delayed) p@0:(Tm_delayed))) $$ (residual) Prims.Tot Type u#(0)))

Checked: [@(FStar.Pervasives.Comment "")]
logic unfold let  Prims.pure_assume_p <uu___4600> : (a#4621:Type u#(@0) -> q#4622:Type u#(0) -> wp#4623:(Prims.pure_wp<@2> a@1:(Tm_type)) -> p#4624:(Prims.pure_post<@3> a@2:(Tm_type)) -> Tot Type u#(0)) = (fun a#4625:Type u#(@0) q#4626:Type u#(0) wp#4627:(Prims.pure_wp<@2> a@1:(Tm_type)) p#4628:(Prims.pure_post<@3> a@2:(Tm_type)) -> ((Prims.l_imp q@2:(Tm_type) (wp@1:(Tm_delayed) p@0:(Tm_delayed))) $$ (residual) Prims.Tot Type u#(0)))

Checked: [@(FStar.Pervasives.Comment "")]
logic unfold let  Prims.pure_null_wp <uu___4673> : (a#4685:Type u#(@0) -> p#4686:(Prims.pure_post<@1> a@0:(Tm_type)) -> Tot Type u#(0)) = (fun a#4687:Type u#(@0) p#4688:(Prims.pure_post<@1> a@0:(Tm_type)) -> ((Prims.l_Forall<@2> #a@1:(Tm_type) (fun any_result#4689:a@1:(Tm_type) -> ((p@1:(Tm_delayed) any_result@0:(Tm_name: a#4687)) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.Tot Type u#(0)))

Checked: [@(FStar.Pervasives.Comment "")]
unfold let  Prims.pure_trivial <uu___4723> : (a#4735:Type u#(@0) -> wp#4736:(Prims.pure_wp<@1> a@0:(Tm_type)) -> Tot Prims.pure_pre) = (fun a#4737:Type u#(@0) wp#4738:(Prims.pure_wp<@1> a@0:(Tm_type)) -> ((wp@0:(Tm_delayed) (fun trivial_result#4739:a@1:(Tm_type) -> (Prims.l_True $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.Tot Prims.pure_pre))

Checked: [@(FStar.Pervasives.Comment "")]
new_effect { Prims.PURE<uu___5283>  : (a#5286:Type u#(@0) -> wp#5287:(Prims.pure_wp<@1> a@0:(Tm_type)) -> Tot<0> Effect) 
  return_wp   = <>Prims.pure_return<@0>
; bind_wp     = <uu___4916>Prims.pure_bind_wp<@0, @1>
; if_then_else= <>Prims.pure_if_then_else<@0>
; ite_wp      = <>Prims.pure_ite_wp<@0>
; stronger    = <>Prims.pure_stronger<@0>
; close_wp    = <uu___5128>Prims.pure_close_wp<@0, @1>
; assert_p    = <>Prims.pure_assert_p<@0>
; assume_p    = <>Prims.pure_assume_p<@0>
; null_wp     = <>Prims.pure_null_wp<@0>
; trivial     = <>Prims.pure_trivial<@0>
; repr        = Tm_unknown
; bind_repr   = <>Tm_unknown
; return_repr = <>Tm_unknown
and effect_actions
	
}


Checked: [@(FStar.Pervasives.Comment "")]
effect Prims.Pure<uu___5438> a#5444:Type u#(uu___5438) pre#5445:Prims.pure_pre post#5446:(Prims.pure_post'<0, uu___5438> a@1:(Tm_type) pre@0:(Tm_fvar: Prims.pure_pre)) = Prims.PURE<uu___5438> (a@2:(Tm_type)) (fun p#5447:(Prims.pure_post<uu___5438> a@2:(Tm_type)) -> ((Prims.l_and pre@2:(Tm_fvar: Prims.pure_pre) (Prims.l_Forall<uu___5438> #a@3:(Tm_type) (fun pure_result#5448:a@3:(Tm_type) -> ((Prims.l_imp (post@2:(Tm_delayed) pure_result@0:(Tm_name: a#5444)) (p@1:(Tm_delayed) pure_result@0:(Tm_name: a#5444))) $$ (residual) Prims.GTot Type u#(0))))) $$ (residual) Prims.GTot Prims.pure_pre)) (attributes )

Checked: [@(FStar.Pervasives.Comment "")]
effect Prims.Admit<uu___5475> a#5478:Type u#(uu___5475) = Prims.PURE<uu___5475> (a@0:(Tm_type)) (fun p#5479:(Prims.pure_post<uu___5475> a@0:(Tm_type)) -> (Prims.l_True $$ (residual) Prims.GTot Prims.pure_pre)) (attributes )

Checked: [@(FStar.Pervasives.Comment "")]
effect Prims.Tot<uu___5509> a#5511:Type u#(uu___5509) = Prims.PURE<uu___5509> (a@0:(Tm_type)) (Prims.pure_null_wp<uu___5509> a@0:(Tm_type)) (attributes )

Checked: [@(FStar.Pervasives.Comment "")]
new_effect { Prims.GHOST<uu___6055>  : (a#6058:Type u#(@0) -> wp#6059:(Prims.pure_wp<@1> a@0:(Tm_type)) -> Tot<0> Effect) 
  return_wp   = <>Prims.pure_return<@0>
; bind_wp     = <uu___5688>Prims.pure_bind_wp<@0, @1>
; if_then_else= <>Prims.pure_if_then_else<@0>
; ite_wp      = <>Prims.pure_ite_wp<@0>
; stronger    = <>Prims.pure_stronger<@0>
; close_wp    = <uu___5900>Prims.pure_close_wp<@0, @1>
; assert_p    = <>Prims.pure_assert_p<@0>
; assume_p    = <>Prims.pure_assume_p<@0>
; null_wp     = <>Prims.pure_null_wp<@0>
; trivial     = <>Prims.pure_trivial<@0>
; repr        = Tm_unknown
; bind_repr   = <>Tm_unknown
; return_repr = <>Tm_unknown
and effect_actions
	
}


Checked: [@(FStar.Pervasives.Comment "")]
unfold let  Prims.purewp_id <uu___6073> : (a#6084:Type u#(@0) -> wp#6085:(Prims.pure_wp<@1> a@0:(Tm_type)) -> Tot (Prims.pure_wp<@2> a@1:(Tm_type))) = (fun a#6086:Type u#(@0) wp#6087:(Prims.pure_wp<@1> a@0:(Tm_type)) -> (wp@0:(Tm_delayed) $$ (residual) Prims.Tot (Prims.pure_wp<@2> a@1:(Tm_type))))

Checked: [@(FStar.Pervasives.Comment "")]
sub_effect Prims.PURE ~> Prims.GHOST : <uu___6113> Prims.purewp_id<uu___6113>

Checked: [@(FStar.Pervasives.Comment "")]
effect Prims.GTot<uu___6143> a#6145:Type u#(uu___6143) = Prims.GHOST<uu___6143> (a@0:(Tm_type)) (Prims.pure_null_wp<uu___6143> a@0:(Tm_type)) (attributes )

Checked: [@(FStar.Pervasives.Comment "")]
effect Prims.Ghost<uu___6296> a#6302:Type u#(uu___6296) pre#6303:Type u#(0) post#6304:(Prims.pure_post'<0, uu___6296> a@1:(Tm_type) pre@0:(Tm_type)) = Prims.GHOST<uu___6296> (a@2:(Tm_type)) (fun p#6305:(Prims.pure_post<uu___6296> a@2:(Tm_type)) -> ((Prims.l_and pre@2:(Tm_type) (Prims.l_Forall<uu___6296> #a@3:(Tm_type) (fun ghost_result#6306:a@3:(Tm_type) -> ((Prims.l_imp (post@2:(Tm_delayed) ghost_result@0:(Tm_name: a#6302)) (p@1:(Tm_delayed) ghost_result@0:(Tm_name: a#6302))) $$ (residual) Prims.GTot Type u#(0))))) $$ (residual) Prims.GTot Prims.pure_pre)) (attributes )

Checked: [@(FStar.Pervasives.Comment "")]
assume new val Prims.int <> : Type u#(0)

Checked: val Prims.HasEq_int : (Prims.hasEq<0> Prims.int)

Checked: [@(FStar.Pervasives.Comment "")]
assume val Prims.range_0 <> : Prims.range

Checked: [@(FStar.Pervasives.Comment "")]
assume val Prims.mk_range <> : (file#6361:Prims.string -> from_line#6362:Prims.int -> from_col#6363:Prims.int -> to_line#6364:Prims.int -> to_col#6365:Prims.int -> Tot<0> Prims.range)

Checked: [@(FStar.Pervasives.Comment "")]
assume val Prims.op_AmpAmp <> : (uu___#6398:Prims.bool -> uu___#6399:Prims.bool -> Tot<0> Prims.bool)

Checked: [@(FStar.Pervasives.Comment "")]
assume val Prims.op_BarBar <> : (uu___#6419:Prims.bool -> uu___#6420:Prims.bool -> Tot<0> Prims.bool)

Checked: [@(FStar.Pervasives.Comment "")]
assume val Prims.op_Negation <> : (uu___#6433:Prims.bool -> Tot<0> Prims.bool)

Checked: [@(FStar.Pervasives.Comment "")]
assume val Prims.op_Multiply <> : (uu___#6452:Prims.int -> uu___#6453:Prims.int -> Tot<0> Prims.int)

Checked: [@(FStar.Pervasives.Comment "")]
assume val Prims.op_Subtraction <> : (uu___#6473:Prims.int -> uu___#6474:Prims.int -> Tot<0> Prims.int)

Checked: [@(FStar.Pervasives.Comment "")]
assume val Prims.op_Addition <> : (uu___#6494:Prims.int -> uu___#6495:Prims.int -> Tot<0> Prims.int)

Checked: [@(FStar.Pervasives.Comment "")]
assume val Prims.op_Minus <> : (uu___#6508:Prims.int -> Tot<0> Prims.int)

Checked: [@(FStar.Pervasives.Comment "")]
assume val Prims.op_LessThanOrEqual <> : (uu___#6527:Prims.int -> uu___#6528:Prims.int -> Tot<0> Prims.bool)

Checked: [@(FStar.Pervasives.Comment "")]
assume val Prims.op_GreaterThan <> : (uu___#6548:Prims.int -> uu___#6549:Prims.int -> Tot<0> Prims.bool)

Checked: [@(FStar.Pervasives.Comment "")]
assume val Prims.op_GreaterThanOrEqual <> : (uu___#6569:Prims.int -> uu___#6570:Prims.int -> Tot<0> Prims.bool)

Checked: [@(FStar.Pervasives.Comment "")]
assume val Prims.op_LessThan <> : (uu___#6590:Prims.int -> uu___#6591:Prims.int -> Tot<0> Prims.bool)

Checked: [@(FStar.Pervasives.Comment "")]
assume val Prims.op_Equality <uu___6634> : (#a#6639:(a#6597:Type u#(uu___6634){(Prims.hasEq<uu___6634> a@0:(Tm_type))}) -> uu___#6640:a@0:(Tm_delayed) -> uu___#6641:a@1:(Tm_delayed) -> Tot<0> Prims.bool)

Checked: [@(FStar.Pervasives.Comment "")]
assume val Prims.op_disEquality <uu___6687> : (#a#6692:(a#6650:Type u#(uu___6687){(Prims.hasEq<uu___6687> a@0:(Tm_type))}) -> uu___#6693:a@0:(Tm_delayed) -> uu___#6694:a@1:(Tm_delayed) -> Tot<0> Prims.bool)

Checked: [@(FStar.Pervasives.Comment "")]
assume new val Prims.exn <> : Type u#(0)

Checked: [@(FStar.Pervasives.Comment "")]
assume new val Prims.array <uu___6711> : (uu___#6713:Type u#(uu___6711) -> Tot<1> Type u#(0))

Checked: [@(FStar.Pervasives.Comment "")]
assume val Prims.strcat <> : (uu___#6734:Prims.string -> uu___#6735:Prims.string -> Tot<0> Prims.string)

Checked: type Prims.list a#7105:Type u#(@0) : Type u#(@1)
datacon<uu___6780> Prims.Nil : (#.a#7106:Type u#(@0) -> Tot (Prims.list<@1> a@0:(Tm_type)))
datacon<uu___6780> Prims.Cons : (#.a#7107:Type u#(@0) -> hd#7108:a@0:(Tm_type) -> tl#7109:(Prims.list<@2> a@1:(Tm_type)) -> Tot (Prims.list<@3> a@2:(Tm_type)))
val Prims.list_haseq : (Prims.l_Forall<(uu___6780 + 1)> #Type u#(uu___6780) (fun a#7110:Type u#(uu___6780) -> ({:pattern (Prims.hasEq<uu___6780> (Prims.list<uu___6780> a@0:(Tm_type)))} (Prims.l_imp (Prims.l_and Prims.l_True (Prims.hasEq<uu___6780> a@0:(Tm_type))) (Prims.hasEq<uu___6780> (Prims.list<uu___6780> a@0:(Tm_type)))) $$ (residual) Prims.GTot Type u#(0))))

Checked: (Discriminator Prims.Nil) logic assume val Prims.uu___is_Nil <uu___6780> : (#a#7168:Type u#(uu___6780) -> projectee#7169:(Prims.list<uu___6780> a@0:(Tm_type)) -> Tot<0> Prims.bool)

Checked: (Discriminator Prims.Cons) logic assume val Prims.uu___is_Cons <uu___6780> : (#a#7197:Type u#(uu___6780) -> projectee#7198:(Prims.list<uu___6780> a@0:(Tm_type)) -> Tot<0> Prims.bool)

Checked: assume (Projector Prims.Cons hd) val Prims.__proj__Cons__item__hd <uu___6780> : (#a#7255:Type u#(uu___6780) -> projectee#7256:(uu___#7211:(Prims.list<uu___6780> a@0:(Tm_type)){(Prims.b2t (Prims.uu___is_Cons<uu___6780> #a@1:(Tm_type) uu___@0:(Tm_delayed)))}) -> Tot<uu___6780> a@1:(Tm_type))

Checked: assume (Projector Prims.Cons tl) val Prims.__proj__Cons__item__tl <uu___6780> : (#a#7330:Type u#(uu___6780) -> projectee#7331:(uu___#7281:(Prims.list<uu___6780> a@0:(Tm_type)){(Prims.b2t (Prims.uu___is_Cons<uu___6780> #a@1:(Tm_type) uu___@0:(Tm_delayed)))}) -> Tot<uu___6780> (Prims.list<uu___6780> a@1:(Tm_type)))

Checked: 
Checked: 
Checked: 
Checked: 
Checked: [@(FStar.Pervasives.Comment "") (FStar.Pervasives.Comment "")]
visible abstract let  Prims.pattern <> : Type u#(0) = Prims.unit

Checked: [@(FStar.Pervasives.Comment "")]
irreducible let  Prims.smt_pat <uu___7377> : (#a#7388:Type u#(@0) -> x#7389:a@0:(Tm_type) -> Tot<0> Prims.pattern) = (fun #a#7390:Type u#(@0) x#7391:a@0:(Tm_type) -> ((() <ascribed: Tot<0> Prims.pattern ) $$ (residual) Prims.Tot Prims.pattern))

Checked: [@(FStar.Pervasives.Comment "")]
irreducible let  Prims.smt_pat_or <> : (x#7417:(Prims.list<0> (Prims.list<0> Prims.pattern)) -> Tot<0> Prims.pattern) = (fun x#7418:(Prims.list<0> (Prims.list<0> Prims.pattern)) -> ((() <ascribed: Tot<0> Prims.pattern ) $$ (residual) Prims.Tot Prims.pattern))

Checked: [@(FStar.Pervasives.Comment "")]
assume val Prims.decreases <uu___7441> : (#a#7444:Type u#(uu___7441) -> uu___#7445:a@0:(Tm_type) -> Tot<1> Type u#(0))

Checked: [@(FStar.Pervasives.Comment "")]
effect Prims.Lemma<uu___7548> a#7556:Type u#(uu___7548) pre#7557:Type u#(0) post#7558:(uu___#7562:(Prims.squash<0> pre@0:(Tm_type)) -> Tot<1> Type u#(0)) pats#7559:(Prims.list<0> Prims.pattern) = Prims.Pure<uu___7548> (a@3:(Tm_type)) pre@2:(Tm_type), (fun r#7560:(uu___6#3442:a@3:(Tm_type){pre@3:(Tm_type)}) -> ((post@2:(Tm_delayed) ()) $$ (residual) Prims.GTot Type u#(0))) (attributes )

Checked: [@(FStar.Pervasives.Comment "")]
effect Prims.M<uu___7570> a#7572:Type u#(uu___7570) = Tot<uu___7570> a@0:(Tm_type)

Checked: [@(FStar.Pervasives.Comment "")]
visible let  Prims.returnM <uu___7597> : (a#7608:Type u#(@0) -> x#7609:a@0:(Tm_type) -> Prims.M<@2> (a@1:(Tm_type))  (attributes cps total)) = (fun a#7610:Type u#(@0) x#7611:a@0:(Tm_type) -> ((x@0:(Tm_name: a#7610) <ascribed: Prims.M<@2> (a@1:(Tm_type))  (attributes cps total) ) $$ (residual) Prims.M a@1:(Tm_type)))

Checked: type Prims.lex_t  : Type u#(@0)
datacon<uu___7621> Prims.LexTop : Prims.lex_t<@0>
datacon<uu___7622, uu___7623> Prims.LexCons : (#uu___#7627:Type u#(@1) -> uu___#7628:uu___@0:(Tm_type) -> uu___#7629:Prims.lex_t<@2> -> Tot Prims.lex_t<(max @4, @3)>)

Checked: 
Checked: 
Checked: [@(FStar.Pervasives.Comment "") (FStar.Pervasives.Comment "")]
visible let  Prims.as_requires <uu___7657> : (#a#7670:Type u#(@0) -> wp#7671:(Prims.pure_wp<@1> a@0:(Tm_type)) -> Tot Prims.pure_pre) = (fun #a#7672:Type u#(@0) wp#7673:(Prims.pure_wp<@1> a@0:(Tm_type)) -> ((wp@0:(Tm_delayed) (fun x#7674:(uu___6#3442:a@1:(Tm_type){Prims.l_True}) -> (Prims.l_True $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.Tot Prims.pure_pre))

Checked: [@(FStar.Pervasives.Comment "")]
visible logic let  Prims.as_ensures <uu___7772> : (#a#7790:Type u#(@0) -> wp#7791:(Prims.pure_wp<@1> a@0:(Tm_type)) -> x#7792:a@1:(Tm_type) -> Tot Type u#(0)) = (fun #a#7793:Type u#(@0) wp#7794:(Prims.pure_wp<@1> a@0:(Tm_type)) x#7795:a@1:(Tm_type) -> ((Prims.l_not (wp@1:(Tm_delayed) (fun y#7796:(uu___6#3442:a@2:(Tm_type){Prims.l_True}) -> ((Prims.l_not (Prims.eq2<@4> #a@3:(Tm_type) y@0:(Tm_delayed) x@1:(Tm_name: a#7793))) $$ (residual) Prims.GTot Type u#(0))))) $$ (residual) Prims.Tot Type u#(0)))

Checked: [@(FStar.Pervasives.Comment "")]
assume val Prims._assume <> : (p#7854:Type u#(0) -> Prims.Pure<0> (Prims.unit) Prims.l_True, (fun x#7855:(uu___6#3442:Prims.unit{Prims.l_True}) -> (p@1:(Tm_type) $$ (residual) Prims.GTot Type u#(0))) (attributes ))

Checked: [@(FStar.Pervasives.Comment "")]
assume val Prims.admit <uu___7882> : (#a#7885:Type u#(uu___7882) -> uu___#7886:Prims.unit -> Prims.Admit<uu___7882> (a@1:(Tm_type))  (attributes ))

Checked: [@(FStar.Pervasives.Comment "")]
assume val Prims.magic <uu___7904> : (#a#7907:Type u#(uu___7904) -> uu___#7908:Prims.unit -> Tot<uu___7904> a@1:(Tm_type))

Checked: [@(FStar.Pervasives.Comment "")]
irreducible val Prims.unsafe_coerce <uu___7937, uu___7938> : (#a#7942:Type u#(uu___7938) -> #b#7943:Type u#(uu___7937) -> uu___#7944:a@1:(Tm_type) -> Tot<uu___7937> b@1:(Tm_type))

Checked: [@(FStar.Pervasives.Comment "") (FStar.Pervasives.Comment "")]
irreducible let  Prims.unsafe_coerce <uu___7937, uu___7938> : (#a#8010:Type u#(@0) -> #b#8011:Type u#(@2) -> x#8012:a@1:(Tm_type) -> Tot<@4> b@1:(Tm_type)) = (fun #a#8013:Type u#(@0) #b#8014:Type u#(@2) x#8015:a@1:(Tm_type) -> (let  uu___#8016 <> : Prims.unit = (Prims.admit<0> #Prims.unit ())
in
x@1:(Tm_name: a#8013) $$ (residual) Prims.Tot b@1:(Tm_type)))

Checked: [@(FStar.Pervasives.Comment "")]
assume val Prims.admitP <> : (p#8057:Type u#(0) -> Prims.Pure<0> (Prims.unit) Prims.l_True, (fun x#8058:(uu___6#3442:Prims.unit{Prims.l_True}) -> (p@1:(Tm_type) $$ (residual) Prims.GTot Type u#(0))) (attributes ))

Checked: [@(FStar.Pervasives.Comment "")]
val Prims._assert <> : (p#8096:Type u#(0) -> Prims.Pure<0> (Prims.unit) p@0:(Tm_type), (fun x#8097:(uu___6#3442:Prims.unit{p@1:(Tm_type)}) -> (p@1:(Tm_type) $$ (residual) Prims.GTot Type u#(0))) (attributes ))

Checked: [@(FStar.Pervasives.Comment "") (FStar.Pervasives.Comment "")]
visible let  Prims._assert <> : (p#8115:Type u#(0) -> Prims.Pure<0> (Prims.unit) p@0:(Tm_type), (fun x#8116:(uu___6#3442:Prims.unit{p@1:(Tm_type)}) -> (p@1:(Tm_type) $$ (residual) Prims.GTot Type u#(0))) (attributes )) = (fun p#8118:Type u#(0) -> (() $$ (residual) Prims.Pure Prims.unit))

Checked: [@(FStar.Pervasives.Comment "")]
visible abstract let  Prims.spinoff <uu___8134> : (p#8140:Type u#(@0) -> Tot<(@1 + 1)> Type u#(@1)) = (fun p#8141:Type u#(@0) -> ((p@0:(Tm_type) <ascribed: Tot<(@1 + 1)> Type u#(@1) ) $$ (residual) Prims.Tot Type u#(@1)))

Checked: [@(FStar.Pervasives.Comment "")]
val Prims.assert_spinoff <> : (p#8185:Type u#(0) -> Prims.Pure<0> (Prims.unit) (Prims.spinoff<0> (Prims.squash<0> p@0:(Tm_type))), (fun x#8186:(uu___6#3442:Prims.unit{(Prims.spinoff<0> (Prims.squash<0> p@1:(Tm_type)))}) -> (p@1:(Tm_type) $$ (residual) Prims.GTot Type u#(0))) (attributes ))

Checked: [@(FStar.Pervasives.Comment "") (FStar.Pervasives.Comment "")]
visible let  Prims.assert_spinoff <> : (p#8204:Type u#(0) -> Prims.Pure<0> (Prims.unit) (Prims.spinoff<0> (Prims.squash<0> p@0:(Tm_type))), (fun x#8205:(uu___6#3442:Prims.unit{(Prims.spinoff<0> (Prims.squash<0> p@1:(Tm_type)))}) -> (p@1:(Tm_type) $$ (residual) Prims.GTot Type u#(0))) (attributes )) = (fun p#8207:Type u#(0) -> (() $$ (residual) Prims.Pure Prims.unit))

Checked: [@(FStar.Pervasives.Comment "")]
val Prims.cut <> : (p#8243:Type u#(0) -> Prims.Pure<0> (Prims.unit) p@0:(Tm_type), (fun x#8244:(uu___6#3442:Prims.unit{p@1:(Tm_type)}) -> (p@1:(Tm_type) $$ (residual) Prims.GTot Type u#(0))) (attributes ))

Checked: [@(FStar.Pervasives.Comment "") (FStar.Pervasives.Comment "")]
visible let  Prims.cut <> : (p#8262:Type u#(0) -> Prims.Pure<0> (Prims.unit) p@0:(Tm_type), (fun x#8263:(uu___6#3442:Prims.unit{p@1:(Tm_type)}) -> (p@1:(Tm_type) $$ (residual) Prims.GTot Type u#(0))) (attributes )) = (fun p#8265:Type u#(0) -> (() $$ (residual) Prims.Pure Prims.unit))

Checked: [@(FStar.Pervasives.Comment "")]
visible let  Prims.nat <> : Type u#(0) = (i#8272:Prims.int{(Prims.b2t (Prims.op_GreaterThanOrEqual i@0:(Tm_fvar: Prims.int) 0))})

Checked: [@(FStar.Pervasives.Comment "")]
visible let  Prims.pos <> : Type u#(0) = (i#8295:Prims.int{(Prims.b2t (Prims.op_GreaterThan i@0:(Tm_fvar: Prims.int) 0))})

Checked: [@(FStar.Pervasives.Comment "")]
visible let  Prims.nonzero <> : Type u#(0) = (i#8318:Prims.int{(Prims.b2t (Prims.op_disEquality<0> #Prims.int i@0:(Tm_fvar: Prims.int) 0))})

Checked: [@(FStar.Pervasives.Comment "")]
assume val Prims.op_Modulus <> : (uu___#8372:Prims.int -> uu___#8373:Prims.nonzero -> Tot<0> Prims.int)

Checked: [@(FStar.Pervasives.Comment "")]
assume val Prims.op_Division <> : (uu___#8393:Prims.nat -> uu___#8394:Prims.nonzero -> Tot<0> Prims.int)

Checked: [@(FStar.Pervasives.Comment "") (FStar.Pervasives.Comment "")]
visible let rec Prims.pow2 <> : (x#8541:Prims.nat -> Tot<0> Prims.pos) = (fun x#8542:Prims.nat -> (((match x@0:(Tm_fvar: Prims.nat) with
	| 0  -> 1
	|Pat_wild uu___#8543  -> (Prims.op_Multiply 2 (Prims.pow2 (Prims.op_Subtraction x@1:(Tm_fvar: Prims.nat) 1)))) <ascribed: Tot<0> Prims.pos ) $$ (residual) Prims.Tot Prims.pos))

Checked: [@(FStar.Pervasives.Comment "")]
visible let  Prims.min <> : (x#8629:Prims.int -> y#8630:Prims.int -> Tot Prims.int) = (fun x#8631:Prims.int y#8632:Prims.int -> (((match (Prims.op_LessThanOrEqual x@1:(Tm_uvar) y@0:(Tm_delayed)) with
	| true  -> x@1:(Tm_uvar)
	|Pat_wild uu___#8633  -> y@1:(Tm_delayed)) <ascribed: [Prims.PURE] Prims.int ) $$ (residual) Prims.Tot Prims.int))

Checked: [@(FStar.Pervasives.Comment "")]
visible let  Prims.abs <> : (x#8703:Prims.int -> Tot<0> Prims.int) = (fun x#8704:Prims.int -> (((match (Prims.op_GreaterThanOrEqual x@0:(Tm_fvar: Prims.int) 0) with
	| true  -> x@0:(Tm_fvar: Prims.int)
	|Pat_wild uu___#8705  -> (Prims.op_Minus x@1:(Tm_fvar: Prims.int))) <ascribed: Tot<0> Prims.int ) $$ (residual) Prims.Tot Prims.int))

Checked: [@(FStar.Pervasives.Comment "")]
assume val Prims.string_of_bool <> : (uu___#8723:Prims.bool -> Tot<0> Prims.string)

Checked: [@(FStar.Pervasives.Comment "")]
assume val Prims.string_of_int <> : (uu___#8737:Prims.int -> Tot<0> Prims.string)

Checked: [@(FStar.Pervasives.Comment "") (FStar.Pervasives.Comment "")]
visible abstract let  Prims.normalize_term <uu___8760> : (#a#8771:Type u#(@0) -> x#8772:a@0:(Tm_type) -> Tot<@2> a@1:(Tm_type)) = (fun #a#8773:Type u#(@0) x#8774:a@0:(Tm_type) -> ((x@0:(Tm_name: a#8773) <ascribed: Tot<@2> a@1:(Tm_type) ) $$ (residual) Prims.Tot a@1:(Tm_type)))

Checked: [@(FStar.Pervasives.Comment "")]
visible abstract let  Prims.normalize <> : (a#8789:Type u#(0) -> Tot Type u#(0)) = (fun a#8790:Type u#(0) -> (a@0:(Tm_type) $$ (residual) Prims.Tot Type u#(0)))

Checked: abstract type Prims.norm_step  : Type u#(0)
datacon<> Prims.Simpl : Prims.norm_step
datacon<> Prims.Weak : Prims.norm_step
datacon<> Prims.HNF : Prims.norm_step
datacon<> Prims.Primops : Prims.norm_step
datacon<> Prims.Delta : Prims.norm_step
datacon<> Prims.Zeta : Prims.norm_step
datacon<> Prims.Iota : Prims.norm_step
datacon<> Prims.UnfoldOnly : (_0#8993:(Prims.list<0> Prims.string) -> Tot Prims.norm_step)
val Prims.norm_step_haseq : {:pattern (Prims.hasEq<0> Prims.norm_step)} (Prims.l_imp Prims.l_True (Prims.hasEq<0> Prims.norm_step))

Checked: (Discriminator Prims.Simpl) logic assume private val Prims.uu___is_Simpl <> : (projectee#9021:Prims.norm_step -> Tot<0> Prims.bool)

Checked: (Discriminator Prims.Weak) logic assume private val Prims.uu___is_Weak <> : (projectee#9035:Prims.norm_step -> Tot<0> Prims.bool)

Checked: (Discriminator Prims.HNF) logic assume private val Prims.uu___is_HNF <> : (projectee#9049:Prims.norm_step -> Tot<0> Prims.bool)

Checked: (Discriminator Prims.Primops) logic assume private val Prims.uu___is_Primops <> : (projectee#9063:Prims.norm_step -> Tot<0> Prims.bool)

Checked: (Discriminator Prims.Delta) logic assume private val Prims.uu___is_Delta <> : (projectee#9077:Prims.norm_step -> Tot<0> Prims.bool)

Checked: (Discriminator Prims.Zeta) logic assume private val Prims.uu___is_Zeta <> : (projectee#9091:Prims.norm_step -> Tot<0> Prims.bool)

Checked: (Discriminator Prims.Iota) logic assume private val Prims.uu___is_Iota <> : (projectee#9105:Prims.norm_step -> Tot<0> Prims.bool)

Checked: (Discriminator Prims.UnfoldOnly) logic assume private val Prims.uu___is_UnfoldOnly <> : (projectee#9119:Prims.norm_step -> Tot<0> Prims.bool)

Checked: assume (Projector Prims.UnfoldOnly _0) private val Prims.__proj__UnfoldOnly__item___0 <> : (projectee#9153:(uu___#9124:Prims.norm_step{(Prims.b2t (Prims.uu___is_UnfoldOnly uu___@0:(Tm_fvar: Prims.norm_step)))}) -> Tot<0> (Prims.list<0> Prims.string))

Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: [@(FStar.Pervasives.Comment "") (FStar.Pervasives.Comment "")]
visible abstract let  Prims.simplify <> : Prims.norm_step = Prims.Simpl

Checked: [@(FStar.Pervasives.Comment "")]
visible abstract let  Prims.weak <> : Prims.norm_step = Prims.Weak

Checked: [@(FStar.Pervasives.Comment "")]
visible abstract let  Prims.hnf <> : Prims.norm_step = Prims.HNF

Checked: [@(FStar.Pervasives.Comment "")]
visible abstract let  Prims.primops <> : Prims.norm_step = Prims.Primops

Checked: [@(FStar.Pervasives.Comment "")]
visible abstract let  Prims.delta <> : Prims.norm_step = Prims.Delta

Checked: [@(FStar.Pervasives.Comment "")]
visible abstract let  Prims.zeta <> : Prims.norm_step = Prims.Zeta

Checked: [@(FStar.Pervasives.Comment "")]
visible abstract let  Prims.iota <> : Prims.norm_step = Prims.Iota

Checked: [@(FStar.Pervasives.Comment "")]
visible abstract let  Prims.delta_only <> : (s#9217:(Prims.list<0> Prims.string) -> Tot<0> Prims.norm_step) = (fun s#9218:(Prims.list<0> Prims.string) -> ((Meta_desugared{(Prims.UnfoldOnly s@0:(Tm_app))} <ascribed: Tot<0> Prims.norm_step ) $$ (residual) Prims.Tot Prims.norm_step))

Checked: [@(FStar.Pervasives.Comment "")]
visible abstract let  Prims.norm <uu___9258> : (s#9274:(Prims.list<0> Prims.norm_step) -> #a#9275:Type u#(@1) -> x#9276:a@0:(Tm_type) -> Tot<@3> a@1:(Tm_type)) = (fun s#9277:(Prims.list<0> Prims.norm_step) #a#9278:Type u#(@1) x#9279:a@0:(Tm_type) -> ((x@0:(Tm_name: a#9278) <ascribed: Tot<@3> a@1:(Tm_type) ) $$ (residual) Prims.Tot a@1:(Tm_type)))

Checked: [@(FStar.Pervasives.Comment "")]
val Prims.assert_norm <> : (p#9330:Type u#(0) -> Prims.Pure<0> (Prims.unit) (Prims.normalize p@0:(Tm_type)), (fun uu___#9331:(uu___6#3442:Prims.unit{(Prims.normalize p@1:(Tm_type))}) -> (p@1:(Tm_type) $$ (residual) Prims.GTot Type u#(0))) (attributes ))

Checked: [@(FStar.Pervasives.Comment "") (FStar.Pervasives.Comment "")]
visible let  Prims.assert_norm <> : (p#9349:Type u#(0) -> Prims.Pure<0> (Prims.unit) (Prims.normalize p@0:(Tm_type)), (fun uu___#9350:(uu___6#3442:Prims.unit{(Prims.normalize p@1:(Tm_type))}) -> (p@1:(Tm_type) $$ (residual) Prims.GTot Type u#(0))) (attributes )) = (fun p#9352:Type u#(0) -> (() $$ (residual) Prims.Pure Prims.unit))

Checked: [@(FStar.Pervasives.Comment "")]
irreducible let  Prims.singleton <uu___9423> : (#a#9438:Type u#(@0) -> x#9439:a@0:(Tm_type) -> Tot<@2> (y#9364:a@1:(Tm_type){(Prims.eq2<@3> #a@2:(Tm_type) y@0:(Tm_name: a#9438) x@1:(Tm_name: a#9438))})) = (fun #a#9441:Type u#(@0) x#9442:a@0:(Tm_type) -> ((x@0:(Tm_name: a#9441) <ascribed: Tot<@2> (y#9364:a@1:(Tm_type){(Prims.eq2<@3> #a@2:(Tm_type) y@0:(Tm_name: a#9441) x@1:(Tm_name: a#9441))}) ) $$ (residual) Prims.Tot (y#9364:a@1:(Tm_type){(Prims.eq2<@3> #a@2:(Tm_type) y@0:(Tm_name: a#9441) x@1:(Tm_name: a#9441))})))

Checked: [@(FStar.Pervasives.Comment "")]
visible let  Prims.with_type <uu___9464> : (#t#9475:Type u#(@0) -> e#9476:t@0:(Tm_type) -> Tot t@1:(Tm_type)) = (fun #t#9477:Type u#(@0) e#9478:t@0:(Tm_type) -> (e@0:(Tm_name: t#9477) $$ (residual) Prims.Tot t@1:(Tm_type)))

Checked: type FStar.Pervasives.Native.option a#549:Type u#(@0) : Type u#(@1)
datacon<uu___284> FStar.Pervasives.Native.None : (#.a#550:Type u#(@0) -> Tot (FStar.Pervasives.Native.option<@1> a@0:(Tm_type)))
datacon<uu___284> FStar.Pervasives.Native.Some : (#.a#551:Type u#(@0) -> v#552:a@0:(Tm_type) -> Tot (FStar.Pervasives.Native.option<@2> a@1:(Tm_type)))
val FStar.Pervasives.Native.option_haseq : (Prims.l_Forall<(uu___284 + 1)> #Type u#(uu___284) (fun a#553:Type u#(uu___284) -> ({:pattern (Prims.hasEq<uu___284> (FStar.Pervasives.Native.option<uu___284> a@0:(Tm_type)))} (Prims.l_imp (Prims.l_and Prims.l_True (Prims.hasEq<uu___284> a@0:(Tm_type))) (Prims.hasEq<uu___284> (FStar.Pervasives.Native.option<uu___284> a@0:(Tm_type)))) $$ (residual) Prims.GTot Type u#(0))))

Checked: (Discriminator FStar.Pervasives.Native.None) val FStar.Pervasives.Native.uu___is_None <uu___284> : (#a#613:Type u#(uu___284) -> projectee#614:(FStar.Pervasives.Native.option<uu___284> a@0:(Tm_type)) -> Tot<0> Prims.bool)


Checked: visible (Discriminator FStar.Pervasives.Native.None) let  FStar.Pervasives.Native.uu___is_None <uu___284> : (#a#701:Type u#(@0) -> projectee#702:(FStar.Pervasives.Native.option<@1> a@0:(Tm_type)) -> Tot<0> Prims.bool) = (fun #a#703:Type u#(@0) projectee#704:(FStar.Pervasives.Native.option<@1> a@0:(Tm_type)) -> (((match projectee@0:(Tm_delayed) with
	| (FStar.Pervasives.Native.None #.a#299:Type u#(@2))  -> true
	|Pat_wild uu___#705  -> false) <ascribed: [Prims.PURE] Prims.bool ) $$ (residual) Prims.Tot Prims.bool))

Checked: (Discriminator FStar.Pervasives.Native.Some) val FStar.Pervasives.Native.uu___is_Some <uu___284> : (#a#725:Type u#(uu___284) -> projectee#726:(FStar.Pervasives.Native.option<uu___284> a@0:(Tm_type)) -> Tot<0> Prims.bool)


Checked: visible (Discriminator FStar.Pervasives.Native.Some) let  FStar.Pervasives.Native.uu___is_Some <uu___284> : (#a#844:Type u#(@0) -> projectee#845:(FStar.Pervasives.Native.option<@1> a@0:(Tm_type)) -> Tot<0> Prims.bool) = (fun #a#846:Type u#(@0) projectee#847:(FStar.Pervasives.Native.option<@1> a@0:(Tm_type)) -> (((match projectee@0:(Tm_delayed) with
	| (FStar.Pervasives.Native.Some #.a#306:Type u#(@2) Pat_wild v#848)  -> true
	|Pat_wild uu___#849  -> false) <ascribed: [Prims.PURE] Prims.bool ) $$ (residual) Prims.Tot Prims.bool))

Checked: [@FStar.Pervasives.Substitute]
(Projector FStar.Pervasives.Native.Some v) val FStar.Pervasives.Native.__proj__Some__item__v <uu___284> : (#a#898:Type u#(uu___284) -> projectee#899:(uu___#854:(FStar.Pervasives.Native.option<uu___284> a@0:(Tm_type)){(Prims.b2t (FStar.Pervasives.Native.uu___is_Some<uu___284> #a@1:(Tm_type) uu___@0:(Tm_delayed)))}) -> Tot<uu___284> a@1:(Tm_type))


Checked: [@FStar.Pervasives.Substitute]
visible (Projector FStar.Pervasives.Native.Some v) let  FStar.Pervasives.Native.__proj__Some__item__v <uu___284> : (#a#1071:Type u#(@0) -> projectee#1072:(uu___#854:(FStar.Pervasives.Native.option<@1> a@0:(Tm_type)){(Prims.b2t (FStar.Pervasives.Native.uu___is_Some<@2> #a@1:(Tm_type) uu___@0:(Tm_delayed)))}) -> Tot<@2> a@1:(Tm_type)) = (fun #a#1074:Type u#(@0) projectee#1075:(uu___#924:(FStar.Pervasives.Native.option<@1> a@0:(Tm_type)){(Prims.b2t (FStar.Pervasives.Native.uu___is_Some<@2> #a@1:(Tm_type) uu___@0:(Tm_delayed)))}) -> (((match projectee@0:(Tm_delayed) with
	| (FStar.Pervasives.Native.Some #.a#310:Type u#(@2) v#1076:a@1:(Tm_type))  -> v@0:(Tm_name: a#1074)) <ascribed: [Prims.PURE] a@1:(Tm_type) ) $$ (residual) Prims.Tot a@1:(Tm_type)))

Checked: 
Checked: 
Checked: 
Checked: 
Checked: type FStar.Pervasives.Native.tuple2 'a#1642:Type u#(@0) 'b#1643:Type u#(@2) : Type u#((max @3, @2))
datacon<uu___1122, uu___1123> FStar.Pervasives.Native.Mktuple2 : (#.'a#1644:Type u#(@0) -> #.'b#1645:Type u#(@2) -> _1#1646:'a@1:(Tm_type) -> _2#1647:'b@1:(Tm_type) -> Tot (FStar.Pervasives.Native.tuple2<@5, @4> 'a@3:(Tm_type) 'b@2:(Tm_type)))
val FStar.Pervasives.Native.tuple2_haseq : (Prims.l_Forall<(uu___1123 + 1)> #Type u#(uu___1123) (fun 'a#1648:Type u#(uu___1123) -> ((Prims.l_Forall<(uu___1122 + 1)> #Type u#(uu___1122) (fun 'b#1649:Type u#(uu___1122) -> ({:pattern (Prims.hasEq<(max uu___1122, uu___1123)> (FStar.Pervasives.Native.tuple2<uu___1122, uu___1123> 'a@1:(Tm_type) 'b@0:(Tm_type)))} (Prims.l_imp (Prims.l_and (Prims.l_and Prims.l_True (Prims.hasEq<uu___1123> 'a@1:(Tm_type))) (Prims.hasEq<uu___1122> 'b@0:(Tm_type))) (Prims.hasEq<(max uu___1122, uu___1123)> (FStar.Pervasives.Native.tuple2<uu___1122, uu___1123> 'a@1:(Tm_type) 'b@0:(Tm_type)))) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.GTot Type u#(0))))

Checked: (Discriminator FStar.Pervasives.Native.Mktuple2) val FStar.Pervasives.Native.uu___is_Mktuple2 <uu___1122, uu___1123> : (#'a#1734:Type u#(uu___1123) -> #'b#1735:Type u#(uu___1122) -> projectee#1736:(FStar.Pervasives.Native.tuple2<uu___1122, uu___1123> 'a@1:(Tm_type) 'b@0:(Tm_type)) -> Tot<0> Prims.bool)


Checked: visible (Discriminator FStar.Pervasives.Native.Mktuple2) let  FStar.Pervasives.Native.uu___is_Mktuple2 <uu___1122, uu___1123> : (#'a#1786:Type u#(@0) -> #'b#1787:Type u#(@2) -> projectee#1788:(FStar.Pervasives.Native.tuple2<@3, @2> 'a@1:(Tm_type) 'b@0:(Tm_type)) -> Tot<0> Prims.bool) = (fun #'a#1789:Type u#(@0) #'b#1790:Type u#(@2) projectee#1791:(FStar.Pervasives.Native.tuple2<@3, @2> 'a@1:(Tm_type) 'b@0:(Tm_type)) -> (true $$ (residual) Prims.Tot Prims.bool))

Checked: [@FStar.Pervasives.Substitute]
(Projector FStar.Pervasives.Native.Mktuple2 _1) val FStar.Pervasives.Native.__proj__Mktuple2__item___1 <uu___1122, uu___1123> : (#'a#1824:Type u#(uu___1123) -> #'b#1825:Type u#(uu___1122) -> projectee#1826:(FStar.Pervasives.Native.tuple2<uu___1122, uu___1123> 'a@1:(Tm_type) 'b@0:(Tm_type)) -> Tot<uu___1123> 'a@2:(Tm_type))


Checked: [@FStar.Pervasives.Substitute]
visible (Projector FStar.Pervasives.Native.Mktuple2 _1) let  FStar.Pervasives.Native.__proj__Mktuple2__item___1 <uu___1122, uu___1123> : (#'a#2056:Type u#(@0) -> #'b#2057:Type u#(@2) -> projectee#2058:(FStar.Pervasives.Native.tuple2<@3, @2> 'a@1:(Tm_type) 'b@0:(Tm_type)) -> Tot<@3> 'a@2:(Tm_type)) = (fun #'a#2059:Type u#(@0) #'b#2060:Type u#(@2) projectee#2061:(FStar.Pervasives.Native.tuple2<@3, @2> 'a@1:(Tm_type) 'b@0:(Tm_type)) -> (((match projectee@0:(Tm_delayed) with
	| (FStar.Pervasives.Native.Mktuple2 #.'a#1140:Type u#(@3) #.'b#1141:Type u#(@4) _1#2062:'a@2:(Tm_type) Pat_wild _2#2063)  -> _1@1:(Tm_name: 'a#2059)) <ascribed: [Prims.PURE] 'a@2:(Tm_type) ) $$ (residual) Prims.Tot 'a@2:(Tm_type)))

Checked: [@FStar.Pervasives.Substitute]
(Projector FStar.Pervasives.Native.Mktuple2 _2) val FStar.Pervasives.Native.__proj__Mktuple2__item___2 <uu___1122, uu___1123> : (#'a#2096:Type u#(uu___1123) -> #'b#2097:Type u#(uu___1122) -> projectee#2098:(FStar.Pervasives.Native.tuple2<uu___1122, uu___1123> 'a@1:(Tm_type) 'b@0:(Tm_type)) -> Tot<uu___1122> 'b@1:(Tm_type))


Checked: [@FStar.Pervasives.Substitute]
visible (Projector FStar.Pervasives.Native.Mktuple2 _2) let  FStar.Pervasives.Native.__proj__Mktuple2__item___2 <uu___1122, uu___1123> : (#'a#2328:Type u#(@0) -> #'b#2329:Type u#(@2) -> projectee#2330:(FStar.Pervasives.Native.tuple2<@3, @2> 'a@1:(Tm_type) 'b@0:(Tm_type)) -> Tot<@4> 'b@1:(Tm_type)) = (fun #'a#2331:Type u#(@0) #'b#2332:Type u#(@2) projectee#2333:(FStar.Pervasives.Native.tuple2<@3, @2> 'a@1:(Tm_type) 'b@0:(Tm_type)) -> (((match projectee@0:(Tm_delayed) with
	| (FStar.Pervasives.Native.Mktuple2 #.'a#1144:Type u#(@3) #.'b#1145:Type u#(@4) Pat_wild _1#2334 _2#2335:'b@2:(Tm_type))  -> _2@0:(Tm_name: 'b#2332)) <ascribed: [Prims.PURE] 'b@1:(Tm_type) ) $$ (residual) Prims.Tot 'b@1:(Tm_type)))

Checked: 
Checked: 
Checked: 
Checked: 
let FStar.Pervasives.Native.fst : (#'a#2418:Type u#(@0) -> #'b#2419:Type u#(@2) -> x#2420:(FStar.Pervasives.Native.tuple2<@3, @2> 'a@1:(Tm_type) 'b@0:(Tm_type)) -> Tot<@3> 'a@2:(Tm_type))
Checked: [@(FStar.Pervasives.Comment "")]
visible let  FStar.Pervasives.Native.fst <uu___2407, uu___2408> : (#'a#2424:Type u#(@0) -> #'b#2425:Type u#(@2) -> x#2426:(FStar.Pervasives.Native.tuple2<@3, @2> 'a@1:(Tm_type) 'b@0:(Tm_type)) -> Tot<@3> 'a@2:(Tm_type)) = (fun #'a#2427:Type u#(@0) #'b#2428:Type u#(@2) x#2429:(FStar.Pervasives.Native.tuple2<@3, @2> 'a@1:(Tm_type) 'b@0:(Tm_type)) -> (((FStar.Pervasives.Native.__proj__Mktuple2__item___1<@4, @3> #'a@2:(Tm_type) #'b@1:(Tm_type) x@0:(Tm_delayed)) <ascribed: Tot<@3> 'a@2:(Tm_type) ) $$ (residual) Prims.Tot 'a@2:(Tm_type)))

let FStar.Pervasives.Native.snd : (#'a#2533:Type u#(@0) -> #'b#2534:Type u#(@2) -> x#2535:(FStar.Pervasives.Native.tuple2<@3, @2> 'a@1:(Tm_type) 'b@0:(Tm_type)) -> Tot<@4> 'b@1:(Tm_type))
Checked: [@(FStar.Pervasives.Comment "")]
visible let  FStar.Pervasives.Native.snd <uu___2522, uu___2523> : (#'a#2539:Type u#(@0) -> #'b#2540:Type u#(@2) -> x#2541:(FStar.Pervasives.Native.tuple2<@3, @2> 'a@1:(Tm_type) 'b@0:(Tm_type)) -> Tot<@4> 'b@1:(Tm_type)) = (fun #'a#2542:Type u#(@0) #'b#2543:Type u#(@2) x#2544:(FStar.Pervasives.Native.tuple2<@3, @2> 'a@1:(Tm_type) 'b@0:(Tm_type)) -> (((FStar.Pervasives.Native.__proj__Mktuple2__item___2<@4, @3> #'a@2:(Tm_type) #'b@1:(Tm_type) x@0:(Tm_delayed)) <ascribed: Tot<@4> 'b@1:(Tm_type) ) $$ (residual) Prims.Tot 'b@1:(Tm_type)))

Checked: type FStar.Pervasives.Native.tuple3 'a#3553:Type u#(@0) 'b#3554:Type u#(@2) 'c#3555:Type u#(@4) : Type u#((max @5, @4, @3))
datacon<uu___2643, uu___2644, uu___2645> FStar.Pervasives.Native.Mktuple3 : (#.'a#3556:Type u#(@0) -> #.'b#3557:Type u#(@2) -> #.'c#3558:Type u#(@4) -> _1#3559:'a@2:(Tm_type) -> _2#3560:'b@2:(Tm_type) -> _3#3561:'c@2:(Tm_type) -> Tot (FStar.Pervasives.Native.tuple3<@8, @7, @6> 'a@5:(Tm_type) 'b@4:(Tm_type) 'c@3:(Tm_type)))
val FStar.Pervasives.Native.tuple3_haseq : (Prims.l_Forall<(uu___2645 + 1)> #Type u#(uu___2645) (fun 'a#3562:Type u#(uu___2645) -> ((Prims.l_Forall<(uu___2644 + 1)> #Type u#(uu___2644) (fun 'b#3563:Type u#(uu___2644) -> ((Prims.l_Forall<(uu___2643 + 1)> #Type u#(uu___2643) (fun 'c#3564:Type u#(uu___2643) -> ({:pattern (Prims.hasEq<(max uu___2643, uu___2644, uu___2645)> (FStar.Pervasives.Native.tuple3<uu___2643, uu___2644, uu___2645> 'a@2:(Tm_type) 'b@1:(Tm_type) 'c@0:(Tm_type)))} (Prims.l_imp (Prims.l_and (Prims.l_and (Prims.l_and Prims.l_True (Prims.hasEq<uu___2645> 'a@2:(Tm_type))) (Prims.hasEq<uu___2644> 'b@1:(Tm_type))) (Prims.hasEq<uu___2643> 'c@0:(Tm_type))) (Prims.hasEq<(max uu___2643, uu___2644, uu___2645)> (FStar.Pervasives.Native.tuple3<uu___2643, uu___2644, uu___2645> 'a@2:(Tm_type) 'b@1:(Tm_type) 'c@0:(Tm_type)))) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.GTot Type u#(0))))

Checked: (Discriminator FStar.Pervasives.Native.Mktuple3) val FStar.Pervasives.Native.uu___is_Mktuple3 <uu___2643, uu___2644, uu___2645> : (#'a#3698:Type u#(uu___2645) -> #'b#3699:Type u#(uu___2644) -> #'c#3700:Type u#(uu___2643) -> projectee#3701:(FStar.Pervasives.Native.tuple3<uu___2643, uu___2644, uu___2645> 'a@2:(Tm_type) 'b@1:(Tm_type) 'c@0:(Tm_type)) -> Tot<0> Prims.bool)


Checked: visible (Discriminator FStar.Pervasives.Native.Mktuple3) let  FStar.Pervasives.Native.uu___is_Mktuple3 <uu___2643, uu___2644, uu___2645> : (#'a#3774:Type u#(@0) -> #'b#3775:Type u#(@2) -> #'c#3776:Type u#(@4) -> projectee#3777:(FStar.Pervasives.Native.tuple3<@5, @4, @3> 'a@2:(Tm_type) 'b@1:(Tm_type) 'c@0:(Tm_type)) -> Tot<0> Prims.bool) = (fun #'a#3778:Type u#(@0) #'b#3779:Type u#(@2) #'c#3780:Type u#(@4) projectee#3781:(FStar.Pervasives.Native.tuple3<@5, @4, @3> 'a@2:(Tm_type) 'b@1:(Tm_type) 'c@0:(Tm_type)) -> (true $$ (residual) Prims.Tot Prims.bool))

Checked: [@FStar.Pervasives.Substitute]
(Projector FStar.Pervasives.Native.Mktuple3 _1) val FStar.Pervasives.Native.__proj__Mktuple3__item___1 <uu___2643, uu___2644, uu___2645> : (#'a#3830:Type u#(uu___2645) -> #'b#3831:Type u#(uu___2644) -> #'c#3832:Type u#(uu___2643) -> projectee#3833:(FStar.Pervasives.Native.tuple3<uu___2643, uu___2644, uu___2645> 'a@2:(Tm_type) 'b@1:(Tm_type) 'c@0:(Tm_type)) -> Tot<uu___2645> 'a@3:(Tm_type))


Checked: [@FStar.Pervasives.Substitute]
visible (Projector FStar.Pervasives.Native.Mktuple3 _1) let  FStar.Pervasives.Native.__proj__Mktuple3__item___1 <uu___2643, uu___2644, uu___2645> : (#'a#4271:Type u#(@0) -> #'b#4272:Type u#(@2) -> #'c#4273:Type u#(@4) -> projectee#4274:(FStar.Pervasives.Native.tuple3<@5, @4, @3> 'a@2:(Tm_type) 'b@1:(Tm_type) 'c@0:(Tm_type)) -> Tot<@4> 'a@3:(Tm_type)) = (fun #'a#4275:Type u#(@0) #'b#4276:Type u#(@2) #'c#4277:Type u#(@4) projectee#4278:(FStar.Pervasives.Native.tuple3<@5, @4, @3> 'a@2:(Tm_type) 'b@1:(Tm_type) 'c@0:(Tm_type)) -> (((match projectee@0:(Tm_delayed) with
	| (FStar.Pervasives.Native.Mktuple3 #.'a#2667:Type u#(@4) #.'b#2668:Type u#(@5) #.'c#2669:Type u#(@6) _1#4279:'a@3:(Tm_type) Pat_wild _2#4280 Pat_wild _3#4281)  -> _1@2:(Tm_name: 'a#4275)) <ascribed: [Prims.PURE] 'a@3:(Tm_type) ) $$ (residual) Prims.Tot 'a@3:(Tm_type)))

Checked: [@FStar.Pervasives.Substitute]
(Projector FStar.Pervasives.Native.Mktuple3 _2) val FStar.Pervasives.Native.__proj__Mktuple3__item___2 <uu___2643, uu___2644, uu___2645> : (#'a#4330:Type u#(uu___2645) -> #'b#4331:Type u#(uu___2644) -> #'c#4332:Type u#(uu___2643) -> projectee#4333:(FStar.Pervasives.Native.tuple3<uu___2643, uu___2644, uu___2645> 'a@2:(Tm_type) 'b@1:(Tm_type) 'c@0:(Tm_type)) -> Tot<uu___2644> 'b@2:(Tm_type))


Checked: [@FStar.Pervasives.Substitute]
visible (Projector FStar.Pervasives.Native.Mktuple3 _2) let  FStar.Pervasives.Native.__proj__Mktuple3__item___2 <uu___2643, uu___2644, uu___2645> : (#'a#4771:Type u#(@0) -> #'b#4772:Type u#(@2) -> #'c#4773:Type u#(@4) -> projectee#4774:(FStar.Pervasives.Native.tuple3<@5, @4, @3> 'a@2:(Tm_type) 'b@1:(Tm_type) 'c@0:(Tm_type)) -> Tot<@5> 'b@2:(Tm_type)) = (fun #'a#4775:Type u#(@0) #'b#4776:Type u#(@2) #'c#4777:Type u#(@4) projectee#4778:(FStar.Pervasives.Native.tuple3<@5, @4, @3> 'a@2:(Tm_type) 'b@1:(Tm_type) 'c@0:(Tm_type)) -> (((match projectee@0:(Tm_delayed) with
	| (FStar.Pervasives.Native.Mktuple3 #.'a#2673:Type u#(@4) #.'b#2674:Type u#(@5) #.'c#2675:Type u#(@6) Pat_wild _1#4779 _2#4780:'b@3:(Tm_type) Pat_wild _3#4781)  -> _2@1:(Tm_name: 'b#4776)) <ascribed: [Prims.PURE] 'b@2:(Tm_type) ) $$ (residual) Prims.Tot 'b@2:(Tm_type)))

Checked: [@FStar.Pervasives.Substitute]
(Projector FStar.Pervasives.Native.Mktuple3 _3) val FStar.Pervasives.Native.__proj__Mktuple3__item___3 <uu___2643, uu___2644, uu___2645> : (#'a#4830:Type u#(uu___2645) -> #'b#4831:Type u#(uu___2644) -> #'c#4832:Type u#(uu___2643) -> projectee#4833:(FStar.Pervasives.Native.tuple3<uu___2643, uu___2644, uu___2645> 'a@2:(Tm_type) 'b@1:(Tm_type) 'c@0:(Tm_type)) -> Tot<uu___2643> 'c@1:(Tm_type))


Checked: [@FStar.Pervasives.Substitute]
visible (Projector FStar.Pervasives.Native.Mktuple3 _3) let  FStar.Pervasives.Native.__proj__Mktuple3__item___3 <uu___2643, uu___2644, uu___2645> : (#'a#5271:Type u#(@0) -> #'b#5272:Type u#(@2) -> #'c#5273:Type u#(@4) -> projectee#5274:(FStar.Pervasives.Native.tuple3<@5, @4, @3> 'a@2:(Tm_type) 'b@1:(Tm_type) 'c@0:(Tm_type)) -> Tot<@6> 'c@1:(Tm_type)) = (fun #'a#5275:Type u#(@0) #'b#5276:Type u#(@2) #'c#5277:Type u#(@4) projectee#5278:(FStar.Pervasives.Native.tuple3<@5, @4, @3> 'a@2:(Tm_type) 'b@1:(Tm_type) 'c@0:(Tm_type)) -> (((match projectee@0:(Tm_delayed) with
	| (FStar.Pervasives.Native.Mktuple3 #.'a#2679:Type u#(@4) #.'b#2680:Type u#(@5) #.'c#2681:Type u#(@6) Pat_wild _1#5279 Pat_wild _2#5280 _3#5281:'c@3:(Tm_type))  -> _3@0:(Tm_name: 'c#5277)) <ascribed: [Prims.PURE] 'c@1:(Tm_type) ) $$ (residual) Prims.Tot 'c@1:(Tm_type)))

Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: type FStar.Pervasives.Native.tuple4 'a#6807:Type u#(@0) 'b#6808:Type u#(@2) 'c#6809:Type u#(@4) 'd#6810:Type u#(@6) : Type u#((max @7, @6, @5, @4))
datacon<uu___5400, uu___5401, uu___5402, uu___5403> FStar.Pervasives.Native.Mktuple4 : (#.'a#6811:Type u#(@0) -> #.'b#6812:Type u#(@2) -> #.'c#6813:Type u#(@4) -> #.'d#6814:Type u#(@6) -> _1#6815:'a@3:(Tm_type) -> _2#6816:'b@3:(Tm_type) -> _3#6817:'c@3:(Tm_type) -> _4#6818:'d@3:(Tm_type) -> Tot (FStar.Pervasives.Native.tuple4<@11, @10, @9, @8> 'a@7:(Tm_type) 'b@6:(Tm_type) 'c@5:(Tm_type) 'd@4:(Tm_type)))
val FStar.Pervasives.Native.tuple4_haseq : (Prims.l_Forall<(uu___5403 + 1)> #Type u#(uu___5403) (fun 'a#6819:Type u#(uu___5403) -> ((Prims.l_Forall<(uu___5402 + 1)> #Type u#(uu___5402) (fun 'b#6820:Type u#(uu___5402) -> ((Prims.l_Forall<(uu___5401 + 1)> #Type u#(uu___5401) (fun 'c#6821:Type u#(uu___5401) -> ((Prims.l_Forall<(uu___5400 + 1)> #Type u#(uu___5400) (fun 'd#6822:Type u#(uu___5400) -> ({:pattern (Prims.hasEq<(max uu___5400, uu___5401, uu___5402, uu___5403)> (FStar.Pervasives.Native.tuple4<uu___5400, uu___5401, uu___5402, uu___5403> 'a@3:(Tm_type) 'b@2:(Tm_type) 'c@1:(Tm_type) 'd@0:(Tm_type)))} (Prims.l_imp (Prims.l_and (Prims.l_and (Prims.l_and (Prims.l_and Prims.l_True (Prims.hasEq<uu___5403> 'a@3:(Tm_type))) (Prims.hasEq<uu___5402> 'b@2:(Tm_type))) (Prims.hasEq<uu___5401> 'c@1:(Tm_type))) (Prims.hasEq<uu___5400> 'd@0:(Tm_type))) (Prims.hasEq<(max uu___5400, uu___5401, uu___5402, uu___5403)> (FStar.Pervasives.Native.tuple4<uu___5400, uu___5401, uu___5402, uu___5403> 'a@3:(Tm_type) 'b@2:(Tm_type) 'c@1:(Tm_type) 'd@0:(Tm_type)))) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.GTot Type u#(0))))

Checked: (Discriminator FStar.Pervasives.Native.Mktuple4) val FStar.Pervasives.Native.uu___is_Mktuple4 <uu___5400, uu___5401, uu___5402, uu___5403> : (#'a#7014:Type u#(uu___5403) -> #'b#7015:Type u#(uu___5402) -> #'c#7016:Type u#(uu___5401) -> #'d#7017:Type u#(uu___5400) -> projectee#7018:(FStar.Pervasives.Native.tuple4<uu___5400, uu___5401, uu___5402, uu___5403> 'a@3:(Tm_type) 'b@2:(Tm_type) 'c@1:(Tm_type) 'd@0:(Tm_type)) -> Tot<0> Prims.bool)


Checked: visible (Discriminator FStar.Pervasives.Native.Mktuple4) let  FStar.Pervasives.Native.uu___is_Mktuple4 <uu___5400, uu___5401, uu___5402, uu___5403> : (#'a#7117:Type u#(@0) -> #'b#7118:Type u#(@2) -> #'c#7119:Type u#(@4) -> #'d#7120:Type u#(@6) -> projectee#7121:(FStar.Pervasives.Native.tuple4<@7, @6, @5, @4> 'a@3:(Tm_type) 'b@2:(Tm_type) 'c@1:(Tm_type) 'd@0:(Tm_type)) -> Tot<0> Prims.bool) = (fun #'a#7122:Type u#(@0) #'b#7123:Type u#(@2) #'c#7124:Type u#(@4) #'d#7125:Type u#(@6) projectee#7126:(FStar.Pervasives.Native.tuple4<@7, @6, @5, @4> 'a@3:(Tm_type) 'b@2:(Tm_type) 'c@1:(Tm_type) 'd@0:(Tm_type)) -> (true $$ (residual) Prims.Tot Prims.bool))

Checked: [@FStar.Pervasives.Substitute]
(Projector FStar.Pervasives.Native.Mktuple4 _1) val FStar.Pervasives.Native.__proj__Mktuple4__item___1 <uu___5400, uu___5401, uu___5402, uu___5403> : (#'a#7194:Type u#(uu___5403) -> #'b#7195:Type u#(uu___5402) -> #'c#7196:Type u#(uu___5401) -> #'d#7197:Type u#(uu___5400) -> projectee#7198:(FStar.Pervasives.Native.tuple4<uu___5400, uu___5401, uu___5402, uu___5403> 'a@3:(Tm_type) 'b@2:(Tm_type) 'c@1:(Tm_type) 'd@0:(Tm_type)) -> Tot<uu___5403> 'a@4:(Tm_type))


Checked: [@FStar.Pervasives.Substitute]
visible (Projector FStar.Pervasives.Native.Mktuple4 _1) let  FStar.Pervasives.Native.__proj__Mktuple4__item___1 <uu___5400, uu___5401, uu___5402, uu___5403> : (#'a#7930:Type u#(@0) -> #'b#7931:Type u#(@2) -> #'c#7932:Type u#(@4) -> #'d#7933:Type u#(@6) -> projectee#7934:(FStar.Pervasives.Native.tuple4<@7, @6, @5, @4> 'a@3:(Tm_type) 'b@2:(Tm_type) 'c@1:(Tm_type) 'd@0:(Tm_type)) -> Tot<@5> 'a@4:(Tm_type)) = (fun #'a#7935:Type u#(@0) #'b#7936:Type u#(@2) #'c#7937:Type u#(@4) #'d#7938:Type u#(@6) projectee#7939:(FStar.Pervasives.Native.tuple4<@7, @6, @5, @4> 'a@3:(Tm_type) 'b@2:(Tm_type) 'c@1:(Tm_type) 'd@0:(Tm_type)) -> (((match projectee@0:(Tm_delayed) with
	| (FStar.Pervasives.Native.Mktuple4 #.'a#5430:Type u#(@5) #.'b#5431:Type u#(@6) #.'c#5432:Type u#(@7) #.'d#5433:Type u#(@8) _1#7940:'a@4:(Tm_type) Pat_wild _2#7941 Pat_wild _3#7942 Pat_wild _4#7943)  -> _1@3:(Tm_name: 'a#7935)) <ascribed: [Prims.PURE] 'a@4:(Tm_type) ) $$ (residual) Prims.Tot 'a@4:(Tm_type)))

Checked: [@FStar.Pervasives.Substitute]
(Projector FStar.Pervasives.Native.Mktuple4 _2) val FStar.Pervasives.Native.__proj__Mktuple4__item___2 <uu___5400, uu___5401, uu___5402, uu___5403> : (#'a#8011:Type u#(uu___5403) -> #'b#8012:Type u#(uu___5402) -> #'c#8013:Type u#(uu___5401) -> #'d#8014:Type u#(uu___5400) -> projectee#8015:(FStar.Pervasives.Native.tuple4<uu___5400, uu___5401, uu___5402, uu___5403> 'a@3:(Tm_type) 'b@2:(Tm_type) 'c@1:(Tm_type) 'd@0:(Tm_type)) -> Tot<uu___5402> 'b@3:(Tm_type))


Checked: [@FStar.Pervasives.Substitute]
visible (Projector FStar.Pervasives.Native.Mktuple4 _2) let  FStar.Pervasives.Native.__proj__Mktuple4__item___2 <uu___5400, uu___5401, uu___5402, uu___5403> : (#'a#8747:Type u#(@0) -> #'b#8748:Type u#(@2) -> #'c#8749:Type u#(@4) -> #'d#8750:Type u#(@6) -> projectee#8751:(FStar.Pervasives.Native.tuple4<@7, @6, @5, @4> 'a@3:(Tm_type) 'b@2:(Tm_type) 'c@1:(Tm_type) 'd@0:(Tm_type)) -> Tot<@6> 'b@3:(Tm_type)) = (fun #'a#8752:Type u#(@0) #'b#8753:Type u#(@2) #'c#8754:Type u#(@4) #'d#8755:Type u#(@6) projectee#8756:(FStar.Pervasives.Native.tuple4<@7, @6, @5, @4> 'a@3:(Tm_type) 'b@2:(Tm_type) 'c@1:(Tm_type) 'd@0:(Tm_type)) -> (((match projectee@0:(Tm_delayed) with
	| (FStar.Pervasives.Native.Mktuple4 #.'a#5438:Type u#(@5) #.'b#5439:Type u#(@6) #.'c#5440:Type u#(@7) #.'d#5441:Type u#(@8) Pat_wild _1#8757 _2#8758:'b@4:(Tm_type) Pat_wild _3#8759 Pat_wild _4#8760)  -> _2@2:(Tm_name: 'b#8753)) <ascribed: [Prims.PURE] 'b@3:(Tm_type) ) $$ (residual) Prims.Tot 'b@3:(Tm_type)))

Checked: [@FStar.Pervasives.Substitute]
(Projector FStar.Pervasives.Native.Mktuple4 _3) val FStar.Pervasives.Native.__proj__Mktuple4__item___3 <uu___5400, uu___5401, uu___5402, uu___5403> : (#'a#8828:Type u#(uu___5403) -> #'b#8829:Type u#(uu___5402) -> #'c#8830:Type u#(uu___5401) -> #'d#8831:Type u#(uu___5400) -> projectee#8832:(FStar.Pervasives.Native.tuple4<uu___5400, uu___5401, uu___5402, uu___5403> 'a@3:(Tm_type) 'b@2:(Tm_type) 'c@1:(Tm_type) 'd@0:(Tm_type)) -> Tot<uu___5401> 'c@2:(Tm_type))


Checked: [@FStar.Pervasives.Substitute]
visible (Projector FStar.Pervasives.Native.Mktuple4 _3) let  FStar.Pervasives.Native.__proj__Mktuple4__item___3 <uu___5400, uu___5401, uu___5402, uu___5403> : (#'a#9564:Type u#(@0) -> #'b#9565:Type u#(@2) -> #'c#9566:Type u#(@4) -> #'d#9567:Type u#(@6) -> projectee#9568:(FStar.Pervasives.Native.tuple4<@7, @6, @5, @4> 'a@3:(Tm_type) 'b@2:(Tm_type) 'c@1:(Tm_type) 'd@0:(Tm_type)) -> Tot<@7> 'c@2:(Tm_type)) = (fun #'a#9569:Type u#(@0) #'b#9570:Type u#(@2) #'c#9571:Type u#(@4) #'d#9572:Type u#(@6) projectee#9573:(FStar.Pervasives.Native.tuple4<@7, @6, @5, @4> 'a@3:(Tm_type) 'b@2:(Tm_type) 'c@1:(Tm_type) 'd@0:(Tm_type)) -> (((match projectee@0:(Tm_delayed) with
	| (FStar.Pervasives.Native.Mktuple4 #.'a#5446:Type u#(@5) #.'b#5447:Type u#(@6) #.'c#5448:Type u#(@7) #.'d#5449:Type u#(@8) Pat_wild _1#9574 Pat_wild _2#9575 _3#9576:'c@4:(Tm_type) Pat_wild _4#9577)  -> _3@1:(Tm_name: 'c#9571)) <ascribed: [Prims.PURE] 'c@2:(Tm_type) ) $$ (residual) Prims.Tot 'c@2:(Tm_type)))

Checked: [@FStar.Pervasives.Substitute]
(Projector FStar.Pervasives.Native.Mktuple4 _4) val FStar.Pervasives.Native.__proj__Mktuple4__item___4 <uu___5400, uu___5401, uu___5402, uu___5403> : (#'a#9645:Type u#(uu___5403) -> #'b#9646:Type u#(uu___5402) -> #'c#9647:Type u#(uu___5401) -> #'d#9648:Type u#(uu___5400) -> projectee#9649:(FStar.Pervasives.Native.tuple4<uu___5400, uu___5401, uu___5402, uu___5403> 'a@3:(Tm_type) 'b@2:(Tm_type) 'c@1:(Tm_type) 'd@0:(Tm_type)) -> Tot<uu___5400> 'd@1:(Tm_type))


Checked: [@FStar.Pervasives.Substitute]
visible (Projector FStar.Pervasives.Native.Mktuple4 _4) let  FStar.Pervasives.Native.__proj__Mktuple4__item___4 <uu___5400, uu___5401, uu___5402, uu___5403> : (#'a#10381:Type u#(@0) -> #'b#10382:Type u#(@2) -> #'c#10383:Type u#(@4) -> #'d#10384:Type u#(@6) -> projectee#10385:(FStar.Pervasives.Native.tuple4<@7, @6, @5, @4> 'a@3:(Tm_type) 'b@2:(Tm_type) 'c@1:(Tm_type) 'd@0:(Tm_type)) -> Tot<@8> 'd@1:(Tm_type)) = (fun #'a#10386:Type u#(@0) #'b#10387:Type u#(@2) #'c#10388:Type u#(@4) #'d#10389:Type u#(@6) projectee#10390:(FStar.Pervasives.Native.tuple4<@7, @6, @5, @4> 'a@3:(Tm_type) 'b@2:(Tm_type) 'c@1:(Tm_type) 'd@0:(Tm_type)) -> (((match projectee@0:(Tm_delayed) with
	| (FStar.Pervasives.Native.Mktuple4 #.'a#5454:Type u#(@5) #.'b#5455:Type u#(@6) #.'c#5456:Type u#(@7) #.'d#5457:Type u#(@8) Pat_wild _1#10391 Pat_wild _2#10392 Pat_wild _3#10393 _4#10394:'d@4:(Tm_type))  -> _4@0:(Tm_name: 'd#10389)) <ascribed: [Prims.PURE] 'd@1:(Tm_type) ) $$ (residual) Prims.Tot 'd@1:(Tm_type)))

Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: type FStar.Pervasives.Native.tuple5 'a#12573:Type u#(@0) 'b#12574:Type u#(@2) 'c#12575:Type u#(@4) 'd#12576:Type u#(@6) 'e#12577:Type u#(@8) : Type u#((max @9, @8, @7, @6, @5))
datacon<uu___10562, uu___10563, uu___10564, uu___10565, uu___10566> FStar.Pervasives.Native.Mktuple5 : (#.'a#12578:Type u#(@0) -> #.'b#12579:Type u#(@2) -> #.'c#12580:Type u#(@4) -> #.'d#12581:Type u#(@6) -> #.'e#12582:Type u#(@8) -> _1#12583:'a@4:(Tm_type) -> _2#12584:'b@4:(Tm_type) -> _3#12585:'c@4:(Tm_type) -> _4#12586:'d@4:(Tm_type) -> _5#12587:'e@4:(Tm_type) -> Tot (FStar.Pervasives.Native.tuple5<@14, @13, @12, @11, @10> 'a@9:(Tm_type) 'b@8:(Tm_type) 'c@7:(Tm_type) 'd@6:(Tm_type) 'e@5:(Tm_type)))
val FStar.Pervasives.Native.tuple5_haseq : (Prims.l_Forall<(uu___10566 + 1)> #Type u#(uu___10566) (fun 'a#12588:Type u#(uu___10566) -> ((Prims.l_Forall<(uu___10565 + 1)> #Type u#(uu___10565) (fun 'b#12589:Type u#(uu___10565) -> ((Prims.l_Forall<(uu___10564 + 1)> #Type u#(uu___10564) (fun 'c#12590:Type u#(uu___10564) -> ((Prims.l_Forall<(uu___10563 + 1)> #Type u#(uu___10563) (fun 'd#12591:Type u#(uu___10563) -> ((Prims.l_Forall<(uu___10562 + 1)> #Type u#(uu___10562) (fun 'e#12592:Type u#(uu___10562) -> ({:pattern (Prims.hasEq<(max uu___10562, uu___10563, uu___10564, uu___10565, uu___10566)> (FStar.Pervasives.Native.tuple5<uu___10562, uu___10563, uu___10564, uu___10565, uu___10566> 'a@4:(Tm_type) 'b@3:(Tm_type) 'c@2:(Tm_type) 'd@1:(Tm_type) 'e@0:(Tm_type)))} (Prims.l_imp (Prims.l_and (Prims.l_and (Prims.l_and (Prims.l_and (Prims.l_and Prims.l_True (Prims.hasEq<uu___10566> 'a@4:(Tm_type))) (Prims.hasEq<uu___10565> 'b@3:(Tm_type))) (Prims.hasEq<uu___10564> 'c@2:(Tm_type))) (Prims.hasEq<uu___10563> 'd@1:(Tm_type))) (Prims.hasEq<uu___10562> 'e@0:(Tm_type))) (Prims.hasEq<(max uu___10562, uu___10563, uu___10564, uu___10565, uu___10566)> (FStar.Pervasives.Native.tuple5<uu___10562, uu___10563, uu___10564, uu___10565, uu___10566> 'a@4:(Tm_type) 'b@3:(Tm_type) 'c@2:(Tm_type) 'd@1:(Tm_type) 'e@0:(Tm_type)))) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.GTot Type u#(0))))

Checked: (Discriminator FStar.Pervasives.Native.Mktuple5) val FStar.Pervasives.Native.uu___is_Mktuple5 <uu___10562, uu___10563, uu___10564, uu___10565, uu___10566> : (#'a#12851:Type u#(uu___10566) -> #'b#12852:Type u#(uu___10565) -> #'c#12853:Type u#(uu___10564) -> #'d#12854:Type u#(uu___10563) -> #'e#12855:Type u#(uu___10562) -> projectee#12856:(FStar.Pervasives.Native.tuple5<uu___10562, uu___10563, uu___10564, uu___10565, uu___10566> 'a@4:(Tm_type) 'b@3:(Tm_type) 'c@2:(Tm_type) 'd@1:(Tm_type) 'e@0:(Tm_type)) -> Tot<0> Prims.bool)


Checked: visible (Discriminator FStar.Pervasives.Native.Mktuple5) let  FStar.Pervasives.Native.uu___is_Mktuple5 <uu___10562, uu___10563, uu___10564, uu___10565, uu___10566> : (#'a#12984:Type u#(@0) -> #'b#12985:Type u#(@2) -> #'c#12986:Type u#(@4) -> #'d#12987:Type u#(@6) -> #'e#12988:Type u#(@8) -> projectee#12989:(FStar.Pervasives.Native.tuple5<@9, @8, @7, @6, @5> 'a@4:(Tm_type) 'b@3:(Tm_type) 'c@2:(Tm_type) 'd@1:(Tm_type) 'e@0:(Tm_type)) -> Tot<0> Prims.bool) = (fun #'a#12990:Type u#(@0) #'b#12991:Type u#(@2) #'c#12992:Type u#(@4) #'d#12993:Type u#(@6) #'e#12994:Type u#(@8) projectee#12995:(FStar.Pervasives.Native.tuple5<@9, @8, @7, @6, @5> 'a@4:(Tm_type) 'b@3:(Tm_type) 'c@2:(Tm_type) 'd@1:(Tm_type) 'e@0:(Tm_type)) -> (true $$ (residual) Prims.Tot Prims.bool))

Checked: [@FStar.Pervasives.Substitute]
(Projector FStar.Pervasives.Native.Mktuple5 _1) val FStar.Pervasives.Native.__proj__Mktuple5__item___1 <uu___10562, uu___10563, uu___10564, uu___10565, uu___10566> : (#'a#13085:Type u#(uu___10566) -> #'b#13086:Type u#(uu___10565) -> #'c#13087:Type u#(uu___10564) -> #'d#13088:Type u#(uu___10563) -> #'e#13089:Type u#(uu___10562) -> projectee#13090:(FStar.Pervasives.Native.tuple5<uu___10562, uu___10563, uu___10564, uu___10565, uu___10566> 'a@4:(Tm_type) 'b@3:(Tm_type) 'c@2:(Tm_type) 'd@1:(Tm_type) 'e@0:(Tm_type)) -> Tot<uu___10566> 'a@5:(Tm_type))


Checked: [@FStar.Pervasives.Substitute]
visible (Projector FStar.Pervasives.Native.Mktuple5 _1) let  FStar.Pervasives.Native.__proj__Mktuple5__item___1 <uu___10562, uu___10563, uu___10564, uu___10565, uu___10566> : (#'a#14214:Type u#(@0) -> #'b#14215:Type u#(@2) -> #'c#14216:Type u#(@4) -> #'d#14217:Type u#(@6) -> #'e#14218:Type u#(@8) -> projectee#14219:(FStar.Pervasives.Native.tuple5<@9, @8, @7, @6, @5> 'a@4:(Tm_type) 'b@3:(Tm_type) 'c@2:(Tm_type) 'd@1:(Tm_type) 'e@0:(Tm_type)) -> Tot<@6> 'a@5:(Tm_type)) = (fun #'a#14220:Type u#(@0) #'b#14221:Type u#(@2) #'c#14222:Type u#(@4) #'d#14223:Type u#(@6) #'e#14224:Type u#(@8) projectee#14225:(FStar.Pervasives.Native.tuple5<@9, @8, @7, @6, @5> 'a@4:(Tm_type) 'b@3:(Tm_type) 'c@2:(Tm_type) 'd@1:(Tm_type) 'e@0:(Tm_type)) -> (((match projectee@0:(Tm_delayed) with
	| (FStar.Pervasives.Native.Mktuple5 #.'a#10598:Type u#(@6) #.'b#10599:Type u#(@7) #.'c#10600:Type u#(@8) #.'d#10601:Type u#(@9) #.'e#10602:Type u#(@10) _1#14226:'a@5:(Tm_type) Pat_wild _2#14227 Pat_wild _3#14228 Pat_wild _4#14229 Pat_wild _5#14230)  -> _1@4:(Tm_name: 'a#14220)) <ascribed: [Prims.PURE] 'a@5:(Tm_type) ) $$ (residual) Prims.Tot 'a@5:(Tm_type)))

Checked: [@FStar.Pervasives.Substitute]
(Projector FStar.Pervasives.Native.Mktuple5 _2) val FStar.Pervasives.Native.__proj__Mktuple5__item___2 <uu___10562, uu___10563, uu___10564, uu___10565, uu___10566> : (#'a#14320:Type u#(uu___10566) -> #'b#14321:Type u#(uu___10565) -> #'c#14322:Type u#(uu___10564) -> #'d#14323:Type u#(uu___10563) -> #'e#14324:Type u#(uu___10562) -> projectee#14325:(FStar.Pervasives.Native.tuple5<uu___10562, uu___10563, uu___10564, uu___10565, uu___10566> 'a@4:(Tm_type) 'b@3:(Tm_type) 'c@2:(Tm_type) 'd@1:(Tm_type) 'e@0:(Tm_type)) -> Tot<uu___10565> 'b@4:(Tm_type))


Checked: [@FStar.Pervasives.Substitute]
visible (Projector FStar.Pervasives.Native.Mktuple5 _2) let  FStar.Pervasives.Native.__proj__Mktuple5__item___2 <uu___10562, uu___10563, uu___10564, uu___10565, uu___10566> : (#'a#15449:Type u#(@0) -> #'b#15450:Type u#(@2) -> #'c#15451:Type u#(@4) -> #'d#15452:Type u#(@6) -> #'e#15453:Type u#(@8) -> projectee#15454:(FStar.Pervasives.Native.tuple5<@9, @8, @7, @6, @5> 'a@4:(Tm_type) 'b@3:(Tm_type) 'c@2:(Tm_type) 'd@1:(Tm_type) 'e@0:(Tm_type)) -> Tot<@7> 'b@4:(Tm_type)) = (fun #'a#15455:Type u#(@0) #'b#15456:Type u#(@2) #'c#15457:Type u#(@4) #'d#15458:Type u#(@6) #'e#15459:Type u#(@8) projectee#15460:(FStar.Pervasives.Native.tuple5<@9, @8, @7, @6, @5> 'a@4:(Tm_type) 'b@3:(Tm_type) 'c@2:(Tm_type) 'd@1:(Tm_type) 'e@0:(Tm_type)) -> (((match projectee@0:(Tm_delayed) with
	| (FStar.Pervasives.Native.Mktuple5 #.'a#10608:Type u#(@6) #.'b#10609:Type u#(@7) #.'c#10610:Type u#(@8) #.'d#10611:Type u#(@9) #.'e#10612:Type u#(@10) Pat_wild _1#15461 _2#15462:'b@5:(Tm_type) Pat_wild _3#15463 Pat_wild _4#15464 Pat_wild _5#15465)  -> _2@3:(Tm_name: 'b#15456)) <ascribed: [Prims.PURE] 'b@4:(Tm_type) ) $$ (residual) Prims.Tot 'b@4:(Tm_type)))

Checked: [@FStar.Pervasives.Substitute]
(Projector FStar.Pervasives.Native.Mktuple5 _3) val FStar.Pervasives.Native.__proj__Mktuple5__item___3 <uu___10562, uu___10563, uu___10564, uu___10565, uu___10566> : (#'a#15555:Type u#(uu___10566) -> #'b#15556:Type u#(uu___10565) -> #'c#15557:Type u#(uu___10564) -> #'d#15558:Type u#(uu___10563) -> #'e#15559:Type u#(uu___10562) -> projectee#15560:(FStar.Pervasives.Native.tuple5<uu___10562, uu___10563, uu___10564, uu___10565, uu___10566> 'a@4:(Tm_type) 'b@3:(Tm_type) 'c@2:(Tm_type) 'd@1:(Tm_type) 'e@0:(Tm_type)) -> Tot<uu___10564> 'c@3:(Tm_type))


Checked: [@FStar.Pervasives.Substitute]
visible (Projector FStar.Pervasives.Native.Mktuple5 _3) let  FStar.Pervasives.Native.__proj__Mktuple5__item___3 <uu___10562, uu___10563, uu___10564, uu___10565, uu___10566> : (#'a#16684:Type u#(@0) -> #'b#16685:Type u#(@2) -> #'c#16686:Type u#(@4) -> #'d#16687:Type u#(@6) -> #'e#16688:Type u#(@8) -> projectee#16689:(FStar.Pervasives.Native.tuple5<@9, @8, @7, @6, @5> 'a@4:(Tm_type) 'b@3:(Tm_type) 'c@2:(Tm_type) 'd@1:(Tm_type) 'e@0:(Tm_type)) -> Tot<@8> 'c@3:(Tm_type)) = (fun #'a#16690:Type u#(@0) #'b#16691:Type u#(@2) #'c#16692:Type u#(@4) #'d#16693:Type u#(@6) #'e#16694:Type u#(@8) projectee#16695:(FStar.Pervasives.Native.tuple5<@9, @8, @7, @6, @5> 'a@4:(Tm_type) 'b@3:(Tm_type) 'c@2:(Tm_type) 'd@1:(Tm_type) 'e@0:(Tm_type)) -> (((match projectee@0:(Tm_delayed) with
	| (FStar.Pervasives.Native.Mktuple5 #.'a#10618:Type u#(@6) #.'b#10619:Type u#(@7) #.'c#10620:Type u#(@8) #.'d#10621:Type u#(@9) #.'e#10622:Type u#(@10) Pat_wild _1#16696 Pat_wild _2#16697 _3#16698:'c@5:(Tm_type) Pat_wild _4#16699 Pat_wild _5#16700)  -> _3@2:(Tm_name: 'c#16692)) <ascribed: [Prims.PURE] 'c@3:(Tm_type) ) $$ (residual) Prims.Tot 'c@3:(Tm_type)))

Checked: [@FStar.Pervasives.Substitute]
(Projector FStar.Pervasives.Native.Mktuple5 _4) val FStar.Pervasives.Native.__proj__Mktuple5__item___4 <uu___10562, uu___10563, uu___10564, uu___10565, uu___10566> : (#'a#16790:Type u#(uu___10566) -> #'b#16791:Type u#(uu___10565) -> #'c#16792:Type u#(uu___10564) -> #'d#16793:Type u#(uu___10563) -> #'e#16794:Type u#(uu___10562) -> projectee#16795:(FStar.Pervasives.Native.tuple5<uu___10562, uu___10563, uu___10564, uu___10565, uu___10566> 'a@4:(Tm_type) 'b@3:(Tm_type) 'c@2:(Tm_type) 'd@1:(Tm_type) 'e@0:(Tm_type)) -> Tot<uu___10563> 'd@2:(Tm_type))


Checked: [@FStar.Pervasives.Substitute]
visible (Projector FStar.Pervasives.Native.Mktuple5 _4) let  FStar.Pervasives.Native.__proj__Mktuple5__item___4 <uu___10562, uu___10563, uu___10564, uu___10565, uu___10566> : (#'a#17919:Type u#(@0) -> #'b#17920:Type u#(@2) -> #'c#17921:Type u#(@4) -> #'d#17922:Type u#(@6) -> #'e#17923:Type u#(@8) -> projectee#17924:(FStar.Pervasives.Native.tuple5<@9, @8, @7, @6, @5> 'a@4:(Tm_type) 'b@3:(Tm_type) 'c@2:(Tm_type) 'd@1:(Tm_type) 'e@0:(Tm_type)) -> Tot<@9> 'd@2:(Tm_type)) = (fun #'a#17925:Type u#(@0) #'b#17926:Type u#(@2) #'c#17927:Type u#(@4) #'d#17928:Type u#(@6) #'e#17929:Type u#(@8) projectee#17930:(FStar.Pervasives.Native.tuple5<@9, @8, @7, @6, @5> 'a@4:(Tm_type) 'b@3:(Tm_type) 'c@2:(Tm_type) 'd@1:(Tm_type) 'e@0:(Tm_type)) -> (((match projectee@0:(Tm_delayed) with
	| (FStar.Pervasives.Native.Mktuple5 #.'a#10628:Type u#(@6) #.'b#10629:Type u#(@7) #.'c#10630:Type u#(@8) #.'d#10631:Type u#(@9) #.'e#10632:Type u#(@10) Pat_wild _1#17931 Pat_wild _2#17932 Pat_wild _3#17933 _4#17934:'d@5:(Tm_type) Pat_wild _5#17935)  -> _4@1:(Tm_name: 'd#17928)) <ascribed: [Prims.PURE] 'd@2:(Tm_type) ) $$ (residual) Prims.Tot 'd@2:(Tm_type)))

Checked: [@FStar.Pervasives.Substitute]
(Projector FStar.Pervasives.Native.Mktuple5 _5) val FStar.Pervasives.Native.__proj__Mktuple5__item___5 <uu___10562, uu___10563, uu___10564, uu___10565, uu___10566> : (#'a#18025:Type u#(uu___10566) -> #'b#18026:Type u#(uu___10565) -> #'c#18027:Type u#(uu___10564) -> #'d#18028:Type u#(uu___10563) -> #'e#18029:Type u#(uu___10562) -> projectee#18030:(FStar.Pervasives.Native.tuple5<uu___10562, uu___10563, uu___10564, uu___10565, uu___10566> 'a@4:(Tm_type) 'b@3:(Tm_type) 'c@2:(Tm_type) 'd@1:(Tm_type) 'e@0:(Tm_type)) -> Tot<uu___10562> 'e@1:(Tm_type))


Checked: [@FStar.Pervasives.Substitute]
visible (Projector FStar.Pervasives.Native.Mktuple5 _5) let  FStar.Pervasives.Native.__proj__Mktuple5__item___5 <uu___10562, uu___10563, uu___10564, uu___10565, uu___10566> : (#'a#19154:Type u#(@0) -> #'b#19155:Type u#(@2) -> #'c#19156:Type u#(@4) -> #'d#19157:Type u#(@6) -> #'e#19158:Type u#(@8) -> projectee#19159:(FStar.Pervasives.Native.tuple5<@9, @8, @7, @6, @5> 'a@4:(Tm_type) 'b@3:(Tm_type) 'c@2:(Tm_type) 'd@1:(Tm_type) 'e@0:(Tm_type)) -> Tot<@10> 'e@1:(Tm_type)) = (fun #'a#19160:Type u#(@0) #'b#19161:Type u#(@2) #'c#19162:Type u#(@4) #'d#19163:Type u#(@6) #'e#19164:Type u#(@8) projectee#19165:(FStar.Pervasives.Native.tuple5<@9, @8, @7, @6, @5> 'a@4:(Tm_type) 'b@3:(Tm_type) 'c@2:(Tm_type) 'd@1:(Tm_type) 'e@0:(Tm_type)) -> (((match projectee@0:(Tm_delayed) with
	| (FStar.Pervasives.Native.Mktuple5 #.'a#10638:Type u#(@6) #.'b#10639:Type u#(@7) #.'c#10640:Type u#(@8) #.'d#10641:Type u#(@9) #.'e#10642:Type u#(@10) Pat_wild _1#19166 Pat_wild _2#19167 Pat_wild _3#19168 Pat_wild _4#19169 _5#19170:'e@5:(Tm_type))  -> _5@0:(Tm_name: 'e#19164)) <ascribed: [Prims.PURE] 'e@1:(Tm_type) ) $$ (residual) Prims.Tot 'e@1:(Tm_type)))

Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: type FStar.Pervasives.Native.tuple6 'a#22117:Type u#(@0) 'b#22118:Type u#(@2) 'c#22119:Type u#(@4) 'd#22120:Type u#(@6) 'e#22121:Type u#(@8) 'f#22122:Type u#(@10) : Type u#((max @11, @10, @9, @8, @7, @6))
datacon<uu___19395, uu___19396, uu___19397, uu___19398, uu___19399, uu___19400> FStar.Pervasives.Native.Mktuple6 : (#.'a#22123:Type u#(@0) -> #.'b#22124:Type u#(@2) -> #.'c#22125:Type u#(@4) -> #.'d#22126:Type u#(@6) -> #.'e#22127:Type u#(@8) -> #.'f#22128:Type u#(@10) -> _1#22129:'a@5:(Tm_type) -> _2#22130:'b@5:(Tm_type) -> _3#22131:'c@5:(Tm_type) -> _4#22132:'d@5:(Tm_type) -> _5#22133:'e@5:(Tm_type) -> _6#22134:'f@5:(Tm_type) -> Tot (FStar.Pervasives.Native.tuple6<@17, @16, @15, @14, @13, @12> 'a@11:(Tm_type) 'b@10:(Tm_type) 'c@9:(Tm_type) 'd@8:(Tm_type) 'e@7:(Tm_type) 'f@6:(Tm_type)))
val FStar.Pervasives.Native.tuple6_haseq : (Prims.l_Forall<(uu___19400 + 1)> #Type u#(uu___19400) (fun 'a#22135:Type u#(uu___19400) -> ((Prims.l_Forall<(uu___19399 + 1)> #Type u#(uu___19399) (fun 'b#22136:Type u#(uu___19399) -> ((Prims.l_Forall<(uu___19398 + 1)> #Type u#(uu___19398) (fun 'c#22137:Type u#(uu___19398) -> ((Prims.l_Forall<(uu___19397 + 1)> #Type u#(uu___19397) (fun 'd#22138:Type u#(uu___19397) -> ((Prims.l_Forall<(uu___19396 + 1)> #Type u#(uu___19396) (fun 'e#22139:Type u#(uu___19396) -> ((Prims.l_Forall<(uu___19395 + 1)> #Type u#(uu___19395) (fun 'f#22140:Type u#(uu___19395) -> ({:pattern (Prims.hasEq<(max uu___19395, uu___19396, uu___19397, uu___19398, uu___19399, uu___19400)> (FStar.Pervasives.Native.tuple6<uu___19395, uu___19396, uu___19397, uu___19398, uu___19399, uu___19400> 'a@5:(Tm_type) 'b@4:(Tm_type) 'c@3:(Tm_type) 'd@2:(Tm_type) 'e@1:(Tm_type) 'f@0:(Tm_type)))} (Prims.l_imp (Prims.l_and (Prims.l_and (Prims.l_and (Prims.l_and (Prims.l_and (Prims.l_and Prims.l_True (Prims.hasEq<uu___19400> 'a@5:(Tm_type))) (Prims.hasEq<uu___19399> 'b@4:(Tm_type))) (Prims.hasEq<uu___19398> 'c@3:(Tm_type))) (Prims.hasEq<uu___19397> 'd@2:(Tm_type))) (Prims.hasEq<uu___19396> 'e@1:(Tm_type))) (Prims.hasEq<uu___19395> 'f@0:(Tm_type))) (Prims.hasEq<(max uu___19395, uu___19396, uu___19397, uu___19398, uu___19399, uu___19400)> (FStar.Pervasives.Native.tuple6<uu___19395, uu___19396, uu___19397, uu___19398, uu___19399, uu___19400> 'a@5:(Tm_type) 'b@4:(Tm_type) 'c@3:(Tm_type) 'd@2:(Tm_type) 'e@1:(Tm_type) 'f@0:(Tm_type)))) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.GTot Type u#(0))))

Checked: (Discriminator FStar.Pervasives.Native.Mktuple6) val FStar.Pervasives.Native.uu___is_Mktuple6 <uu___19395, uu___19396, uu___19397, uu___19398, uu___19399, uu___19400> : (#'a#22475:Type u#(uu___19400) -> #'b#22476:Type u#(uu___19399) -> #'c#22477:Type u#(uu___19398) -> #'d#22478:Type u#(uu___19397) -> #'e#22479:Type u#(uu___19396) -> #'f#22480:Type u#(uu___19395) -> projectee#22481:(FStar.Pervasives.Native.tuple6<uu___19395, uu___19396, uu___19397, uu___19398, uu___19399, uu___19400> 'a@5:(Tm_type) 'b@4:(Tm_type) 'c@3:(Tm_type) 'd@2:(Tm_type) 'e@1:(Tm_type) 'f@0:(Tm_type)) -> Tot<0> Prims.bool)


Checked: visible (Discriminator FStar.Pervasives.Native.Mktuple6) let  FStar.Pervasives.Native.uu___is_Mktuple6 <uu___19395, uu___19396, uu___19397, uu___19398, uu___19399, uu___19400> : (#'a#22641:Type u#(@0) -> #'b#22642:Type u#(@2) -> #'c#22643:Type u#(@4) -> #'d#22644:Type u#(@6) -> #'e#22645:Type u#(@8) -> #'f#22646:Type u#(@10) -> projectee#22647:(FStar.Pervasives.Native.tuple6<@11, @10, @9, @8, @7, @6> 'a@5:(Tm_type) 'b@4:(Tm_type) 'c@3:(Tm_type) 'd@2:(Tm_type) 'e@1:(Tm_type) 'f@0:(Tm_type)) -> Tot<0> Prims.bool) = (fun #'a#22648:Type u#(@0) #'b#22649:Type u#(@2) #'c#22650:Type u#(@4) #'d#22651:Type u#(@6) #'e#22652:Type u#(@8) #'f#22653:Type u#(@10) projectee#22654:(FStar.Pervasives.Native.tuple6<@11, @10, @9, @8, @7, @6> 'a@5:(Tm_type) 'b@4:(Tm_type) 'c@3:(Tm_type) 'd@2:(Tm_type) 'e@1:(Tm_type) 'f@0:(Tm_type)) -> (true $$ (residual) Prims.Tot Prims.bool))

Checked: [@FStar.Pervasives.Substitute]
(Projector FStar.Pervasives.Native.Mktuple6 _1) val FStar.Pervasives.Native.__proj__Mktuple6__item___1 <uu___19395, uu___19396, uu___19397, uu___19398, uu___19399, uu___19400> : (#'a#22769:Type u#(uu___19400) -> #'b#22770:Type u#(uu___19399) -> #'c#22771:Type u#(uu___19398) -> #'d#22772:Type u#(uu___19397) -> #'e#22773:Type u#(uu___19396) -> #'f#22774:Type u#(uu___19395) -> projectee#22775:(FStar.Pervasives.Native.tuple6<uu___19395, uu___19396, uu___19397, uu___19398, uu___19399, uu___19400> 'a@5:(Tm_type) 'b@4:(Tm_type) 'c@3:(Tm_type) 'd@2:(Tm_type) 'e@1:(Tm_type) 'f@0:(Tm_type)) -> Tot<uu___19400> 'a@6:(Tm_type))


Checked: [@FStar.Pervasives.Substitute]
visible (Projector FStar.Pervasives.Native.Mktuple6 _1) let  FStar.Pervasives.Native.__proj__Mktuple6__item___1 <uu___19395, uu___19396, uu___19397, uu___19398, uu___19399, uu___19400> : (#'a#24401:Type u#(@0) -> #'b#24402:Type u#(@2) -> #'c#24403:Type u#(@4) -> #'d#24404:Type u#(@6) -> #'e#24405:Type u#(@8) -> #'f#24406:Type u#(@10) -> projectee#24407:(FStar.Pervasives.Native.tuple6<@11, @10, @9, @8, @7, @6> 'a@5:(Tm_type) 'b@4:(Tm_type) 'c@3:(Tm_type) 'd@2:(Tm_type) 'e@1:(Tm_type) 'f@0:(Tm_type)) -> Tot<@7> 'a@6:(Tm_type)) = (fun #'a#24408:Type u#(@0) #'b#24409:Type u#(@2) #'c#24410:Type u#(@4) #'d#24411:Type u#(@6) #'e#24412:Type u#(@8) #'f#24413:Type u#(@10) projectee#24414:(FStar.Pervasives.Native.tuple6<@11, @10, @9, @8, @7, @6> 'a@5:(Tm_type) 'b@4:(Tm_type) 'c@3:(Tm_type) 'd@2:(Tm_type) 'e@1:(Tm_type) 'f@0:(Tm_type)) -> (((match projectee@0:(Tm_delayed) with
	| (FStar.Pervasives.Native.Mktuple6 #.'a#19437:Type u#(@7) #.'b#19438:Type u#(@8) #.'c#19439:Type u#(@9) #.'d#19440:Type u#(@10) #.'e#19441:Type u#(@11) #.'f#19442:Type u#(@12) _1#24415:'a@6:(Tm_type) Pat_wild _2#24416 Pat_wild _3#24417 Pat_wild _4#24418 Pat_wild _5#24419 Pat_wild _6#24420)  -> _1@5:(Tm_name: 'a#24408)) <ascribed: [Prims.PURE] 'a@6:(Tm_type) ) $$ (residual) Prims.Tot 'a@6:(Tm_type)))

Checked: [@FStar.Pervasives.Substitute]
(Projector FStar.Pervasives.Native.Mktuple6 _2) val FStar.Pervasives.Native.__proj__Mktuple6__item___2 <uu___19395, uu___19396, uu___19397, uu___19398, uu___19399, uu___19400> : (#'a#24535:Type u#(uu___19400) -> #'b#24536:Type u#(uu___19399) -> #'c#24537:Type u#(uu___19398) -> #'d#24538:Type u#(uu___19397) -> #'e#24539:Type u#(uu___19396) -> #'f#24540:Type u#(uu___19395) -> projectee#24541:(FStar.Pervasives.Native.tuple6<uu___19395, uu___19396, uu___19397, uu___19398, uu___19399, uu___19400> 'a@5:(Tm_type) 'b@4:(Tm_type) 'c@3:(Tm_type) 'd@2:(Tm_type) 'e@1:(Tm_type) 'f@0:(Tm_type)) -> Tot<uu___19399> 'b@5:(Tm_type))


Checked: [@FStar.Pervasives.Substitute]
visible (Projector FStar.Pervasives.Native.Mktuple6 _2) let  FStar.Pervasives.Native.__proj__Mktuple6__item___2 <uu___19395, uu___19396, uu___19397, uu___19398, uu___19399, uu___19400> : (#'a#26167:Type u#(@0) -> #'b#26168:Type u#(@2) -> #'c#26169:Type u#(@4) -> #'d#26170:Type u#(@6) -> #'e#26171:Type u#(@8) -> #'f#26172:Type u#(@10) -> projectee#26173:(FStar.Pervasives.Native.tuple6<@11, @10, @9, @8, @7, @6> 'a@5:(Tm_type) 'b@4:(Tm_type) 'c@3:(Tm_type) 'd@2:(Tm_type) 'e@1:(Tm_type) 'f@0:(Tm_type)) -> Tot<@8> 'b@5:(Tm_type)) = (fun #'a#26174:Type u#(@0) #'b#26175:Type u#(@2) #'c#26176:Type u#(@4) #'d#26177:Type u#(@6) #'e#26178:Type u#(@8) #'f#26179:Type u#(@10) projectee#26180:(FStar.Pervasives.Native.tuple6<@11, @10, @9, @8, @7, @6> 'a@5:(Tm_type) 'b@4:(Tm_type) 'c@3:(Tm_type) 'd@2:(Tm_type) 'e@1:(Tm_type) 'f@0:(Tm_type)) -> (((match projectee@0:(Tm_delayed) with
	| (FStar.Pervasives.Native.Mktuple6 #.'a#19449:Type u#(@7) #.'b#19450:Type u#(@8) #.'c#19451:Type u#(@9) #.'d#19452:Type u#(@10) #.'e#19453:Type u#(@11) #.'f#19454:Type u#(@12) Pat_wild _1#26181 _2#26182:'b@6:(Tm_type) Pat_wild _3#26183 Pat_wild _4#26184 Pat_wild _5#26185 Pat_wild _6#26186)  -> _2@4:(Tm_name: 'b#26175)) <ascribed: [Prims.PURE] 'b@5:(Tm_type) ) $$ (residual) Prims.Tot 'b@5:(Tm_type)))

Checked: [@FStar.Pervasives.Substitute]
(Projector FStar.Pervasives.Native.Mktuple6 _3) val FStar.Pervasives.Native.__proj__Mktuple6__item___3 <uu___19395, uu___19396, uu___19397, uu___19398, uu___19399, uu___19400> : (#'a#26301:Type u#(uu___19400) -> #'b#26302:Type u#(uu___19399) -> #'c#26303:Type u#(uu___19398) -> #'d#26304:Type u#(uu___19397) -> #'e#26305:Type u#(uu___19396) -> #'f#26306:Type u#(uu___19395) -> projectee#26307:(FStar.Pervasives.Native.tuple6<uu___19395, uu___19396, uu___19397, uu___19398, uu___19399, uu___19400> 'a@5:(Tm_type) 'b@4:(Tm_type) 'c@3:(Tm_type) 'd@2:(Tm_type) 'e@1:(Tm_type) 'f@0:(Tm_type)) -> Tot<uu___19398> 'c@4:(Tm_type))


Checked: [@FStar.Pervasives.Substitute]
visible (Projector FStar.Pervasives.Native.Mktuple6 _3) let  FStar.Pervasives.Native.__proj__Mktuple6__item___3 <uu___19395, uu___19396, uu___19397, uu___19398, uu___19399, uu___19400> : (#'a#27933:Type u#(@0) -> #'b#27934:Type u#(@2) -> #'c#27935:Type u#(@4) -> #'d#27936:Type u#(@6) -> #'e#27937:Type u#(@8) -> #'f#27938:Type u#(@10) -> projectee#27939:(FStar.Pervasives.Native.tuple6<@11, @10, @9, @8, @7, @6> 'a@5:(Tm_type) 'b@4:(Tm_type) 'c@3:(Tm_type) 'd@2:(Tm_type) 'e@1:(Tm_type) 'f@0:(Tm_type)) -> Tot<@9> 'c@4:(Tm_type)) = (fun #'a#27940:Type u#(@0) #'b#27941:Type u#(@2) #'c#27942:Type u#(@4) #'d#27943:Type u#(@6) #'e#27944:Type u#(@8) #'f#27945:Type u#(@10) projectee#27946:(FStar.Pervasives.Native.tuple6<@11, @10, @9, @8, @7, @6> 'a@5:(Tm_type) 'b@4:(Tm_type) 'c@3:(Tm_type) 'd@2:(Tm_type) 'e@1:(Tm_type) 'f@0:(Tm_type)) -> (((match projectee@0:(Tm_delayed) with
	| (FStar.Pervasives.Native.Mktuple6 #.'a#19461:Type u#(@7) #.'b#19462:Type u#(@8) #.'c#19463:Type u#(@9) #.'d#19464:Type u#(@10) #.'e#19465:Type u#(@11) #.'f#19466:Type u#(@12) Pat_wild _1#27947 Pat_wild _2#27948 _3#27949:'c@6:(Tm_type) Pat_wild _4#27950 Pat_wild _5#27951 Pat_wild _6#27952)  -> _3@3:(Tm_name: 'c#27942)) <ascribed: [Prims.PURE] 'c@4:(Tm_type) ) $$ (residual) Prims.Tot 'c@4:(Tm_type)))

Checked: [@FStar.Pervasives.Substitute]
(Projector FStar.Pervasives.Native.Mktuple6 _4) val FStar.Pervasives.Native.__proj__Mktuple6__item___4 <uu___19395, uu___19396, uu___19397, uu___19398, uu___19399, uu___19400> : (#'a#28067:Type u#(uu___19400) -> #'b#28068:Type u#(uu___19399) -> #'c#28069:Type u#(uu___19398) -> #'d#28070:Type u#(uu___19397) -> #'e#28071:Type u#(uu___19396) -> #'f#28072:Type u#(uu___19395) -> projectee#28073:(FStar.Pervasives.Native.tuple6<uu___19395, uu___19396, uu___19397, uu___19398, uu___19399, uu___19400> 'a@5:(Tm_type) 'b@4:(Tm_type) 'c@3:(Tm_type) 'd@2:(Tm_type) 'e@1:(Tm_type) 'f@0:(Tm_type)) -> Tot<uu___19397> 'd@3:(Tm_type))


Checked: [@FStar.Pervasives.Substitute]
visible (Projector FStar.Pervasives.Native.Mktuple6 _4) let  FStar.Pervasives.Native.__proj__Mktuple6__item___4 <uu___19395, uu___19396, uu___19397, uu___19398, uu___19399, uu___19400> : (#'a#29699:Type u#(@0) -> #'b#29700:Type u#(@2) -> #'c#29701:Type u#(@4) -> #'d#29702:Type u#(@6) -> #'e#29703:Type u#(@8) -> #'f#29704:Type u#(@10) -> projectee#29705:(FStar.Pervasives.Native.tuple6<@11, @10, @9, @8, @7, @6> 'a@5:(Tm_type) 'b@4:(Tm_type) 'c@3:(Tm_type) 'd@2:(Tm_type) 'e@1:(Tm_type) 'f@0:(Tm_type)) -> Tot<@10> 'd@3:(Tm_type)) = (fun #'a#29706:Type u#(@0) #'b#29707:Type u#(@2) #'c#29708:Type u#(@4) #'d#29709:Type u#(@6) #'e#29710:Type u#(@8) #'f#29711:Type u#(@10) projectee#29712:(FStar.Pervasives.Native.tuple6<@11, @10, @9, @8, @7, @6> 'a@5:(Tm_type) 'b@4:(Tm_type) 'c@3:(Tm_type) 'd@2:(Tm_type) 'e@1:(Tm_type) 'f@0:(Tm_type)) -> (((match projectee@0:(Tm_delayed) with
	| (FStar.Pervasives.Native.Mktuple6 #.'a#19473:Type u#(@7) #.'b#19474:Type u#(@8) #.'c#19475:Type u#(@9) #.'d#19476:Type u#(@10) #.'e#19477:Type u#(@11) #.'f#19478:Type u#(@12) Pat_wild _1#29713 Pat_wild _2#29714 Pat_wild _3#29715 _4#29716:'d@6:(Tm_type) Pat_wild _5#29717 Pat_wild _6#29718)  -> _4@2:(Tm_name: 'd#29709)) <ascribed: [Prims.PURE] 'd@3:(Tm_type) ) $$ (residual) Prims.Tot 'd@3:(Tm_type)))

Checked: [@FStar.Pervasives.Substitute]
(Projector FStar.Pervasives.Native.Mktuple6 _5) val FStar.Pervasives.Native.__proj__Mktuple6__item___5 <uu___19395, uu___19396, uu___19397, uu___19398, uu___19399, uu___19400> : (#'a#29833:Type u#(uu___19400) -> #'b#29834:Type u#(uu___19399) -> #'c#29835:Type u#(uu___19398) -> #'d#29836:Type u#(uu___19397) -> #'e#29837:Type u#(uu___19396) -> #'f#29838:Type u#(uu___19395) -> projectee#29839:(FStar.Pervasives.Native.tuple6<uu___19395, uu___19396, uu___19397, uu___19398, uu___19399, uu___19400> 'a@5:(Tm_type) 'b@4:(Tm_type) 'c@3:(Tm_type) 'd@2:(Tm_type) 'e@1:(Tm_type) 'f@0:(Tm_type)) -> Tot<uu___19396> 'e@2:(Tm_type))


Checked: [@FStar.Pervasives.Substitute]
visible (Projector FStar.Pervasives.Native.Mktuple6 _5) let  FStar.Pervasives.Native.__proj__Mktuple6__item___5 <uu___19395, uu___19396, uu___19397, uu___19398, uu___19399, uu___19400> : (#'a#31465:Type u#(@0) -> #'b#31466:Type u#(@2) -> #'c#31467:Type u#(@4) -> #'d#31468:Type u#(@6) -> #'e#31469:Type u#(@8) -> #'f#31470:Type u#(@10) -> projectee#31471:(FStar.Pervasives.Native.tuple6<@11, @10, @9, @8, @7, @6> 'a@5:(Tm_type) 'b@4:(Tm_type) 'c@3:(Tm_type) 'd@2:(Tm_type) 'e@1:(Tm_type) 'f@0:(Tm_type)) -> Tot<@11> 'e@2:(Tm_type)) = (fun #'a#31472:Type u#(@0) #'b#31473:Type u#(@2) #'c#31474:Type u#(@4) #'d#31475:Type u#(@6) #'e#31476:Type u#(@8) #'f#31477:Type u#(@10) projectee#31478:(FStar.Pervasives.Native.tuple6<@11, @10, @9, @8, @7, @6> 'a@5:(Tm_type) 'b@4:(Tm_type) 'c@3:(Tm_type) 'd@2:(Tm_type) 'e@1:(Tm_type) 'f@0:(Tm_type)) -> (((match projectee@0:(Tm_delayed) with
	| (FStar.Pervasives.Native.Mktuple6 #.'a#19485:Type u#(@7) #.'b#19486:Type u#(@8) #.'c#19487:Type u#(@9) #.'d#19488:Type u#(@10) #.'e#19489:Type u#(@11) #.'f#19490:Type u#(@12) Pat_wild _1#31479 Pat_wild _2#31480 Pat_wild _3#31481 Pat_wild _4#31482 _5#31483:'e@6:(Tm_type) Pat_wild _6#31484)  -> _5@1:(Tm_name: 'e#31476)) <ascribed: [Prims.PURE] 'e@2:(Tm_type) ) $$ (residual) Prims.Tot 'e@2:(Tm_type)))

Checked: [@FStar.Pervasives.Substitute]
(Projector FStar.Pervasives.Native.Mktuple6 _6) val FStar.Pervasives.Native.__proj__Mktuple6__item___6 <uu___19395, uu___19396, uu___19397, uu___19398, uu___19399, uu___19400> : (#'a#31599:Type u#(uu___19400) -> #'b#31600:Type u#(uu___19399) -> #'c#31601:Type u#(uu___19398) -> #'d#31602:Type u#(uu___19397) -> #'e#31603:Type u#(uu___19396) -> #'f#31604:Type u#(uu___19395) -> projectee#31605:(FStar.Pervasives.Native.tuple6<uu___19395, uu___19396, uu___19397, uu___19398, uu___19399, uu___19400> 'a@5:(Tm_type) 'b@4:(Tm_type) 'c@3:(Tm_type) 'd@2:(Tm_type) 'e@1:(Tm_type) 'f@0:(Tm_type)) -> Tot<uu___19395> 'f@1:(Tm_type))


Checked: [@FStar.Pervasives.Substitute]
visible (Projector FStar.Pervasives.Native.Mktuple6 _6) let  FStar.Pervasives.Native.__proj__Mktuple6__item___6 <uu___19395, uu___19396, uu___19397, uu___19398, uu___19399, uu___19400> : (#'a#33231:Type u#(@0) -> #'b#33232:Type u#(@2) -> #'c#33233:Type u#(@4) -> #'d#33234:Type u#(@6) -> #'e#33235:Type u#(@8) -> #'f#33236:Type u#(@10) -> projectee#33237:(FStar.Pervasives.Native.tuple6<@11, @10, @9, @8, @7, @6> 'a@5:(Tm_type) 'b@4:(Tm_type) 'c@3:(Tm_type) 'd@2:(Tm_type) 'e@1:(Tm_type) 'f@0:(Tm_type)) -> Tot<@12> 'f@1:(Tm_type)) = (fun #'a#33238:Type u#(@0) #'b#33239:Type u#(@2) #'c#33240:Type u#(@4) #'d#33241:Type u#(@6) #'e#33242:Type u#(@8) #'f#33243:Type u#(@10) projectee#33244:(FStar.Pervasives.Native.tuple6<@11, @10, @9, @8, @7, @6> 'a@5:(Tm_type) 'b@4:(Tm_type) 'c@3:(Tm_type) 'd@2:(Tm_type) 'e@1:(Tm_type) 'f@0:(Tm_type)) -> (((match projectee@0:(Tm_delayed) with
	| (FStar.Pervasives.Native.Mktuple6 #.'a#19497:Type u#(@7) #.'b#19498:Type u#(@8) #.'c#19499:Type u#(@9) #.'d#19500:Type u#(@10) #.'e#19501:Type u#(@11) #.'f#19502:Type u#(@12) Pat_wild _1#33245 Pat_wild _2#33246 Pat_wild _3#33247 Pat_wild _4#33248 Pat_wild _5#33249 _6#33250:'f@6:(Tm_type))  -> _6@0:(Tm_name: 'f#33243)) <ascribed: [Prims.PURE] 'f@1:(Tm_type) ) $$ (residual) Prims.Tot 'f@1:(Tm_type)))

Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: type FStar.Pervasives.Native.tuple7 'a#37080:Type u#(@0) 'b#37081:Type u#(@2) 'c#37082:Type u#(@4) 'd#37083:Type u#(@6) 'e#37084:Type u#(@8) 'f#37085:Type u#(@10) 'g#37086:Type u#(@12) : Type u#((max @13, @12, @11, @10, @9, @8, @7))
datacon<uu___33540, uu___33541, uu___33542, uu___33543, uu___33544, uu___33545, uu___33546> FStar.Pervasives.Native.Mktuple7 : (#.'a#37087:Type u#(@0) -> #.'b#37088:Type u#(@2) -> #.'c#37089:Type u#(@4) -> #.'d#37090:Type u#(@6) -> #.'e#37091:Type u#(@8) -> #.'f#37092:Type u#(@10) -> #.'g#37093:Type u#(@12) -> _1#37094:'a@6:(Tm_type) -> _2#37095:'b@6:(Tm_type) -> _3#37096:'c@6:(Tm_type) -> _4#37097:'d@6:(Tm_type) -> _5#37098:'e@6:(Tm_type) -> _6#37099:'f@6:(Tm_type) -> _7#37100:'g@6:(Tm_type) -> Tot (FStar.Pervasives.Native.tuple7<@20, @19, @18, @17, @16, @15, @14> 'a@13:(Tm_type) 'b@12:(Tm_type) 'c@11:(Tm_type) 'd@10:(Tm_type) 'e@9:(Tm_type) 'f@8:(Tm_type) 'g@7:(Tm_type)))
val FStar.Pervasives.Native.tuple7_haseq : (Prims.l_Forall<(uu___33546 + 1)> #Type u#(uu___33546) (fun 'a#37101:Type u#(uu___33546) -> ((Prims.l_Forall<(uu___33545 + 1)> #Type u#(uu___33545) (fun 'b#37102:Type u#(uu___33545) -> ((Prims.l_Forall<(uu___33544 + 1)> #Type u#(uu___33544) (fun 'c#37103:Type u#(uu___33544) -> ((Prims.l_Forall<(uu___33543 + 1)> #Type u#(uu___33543) (fun 'd#37104:Type u#(uu___33543) -> ((Prims.l_Forall<(uu___33542 + 1)> #Type u#(uu___33542) (fun 'e#37105:Type u#(uu___33542) -> ((Prims.l_Forall<(uu___33541 + 1)> #Type u#(uu___33541) (fun 'f#37106:Type u#(uu___33541) -> ((Prims.l_Forall<(uu___33540 + 1)> #Type u#(uu___33540) (fun 'g#37107:Type u#(uu___33540) -> ({:pattern (Prims.hasEq<(max uu___33540, uu___33541, uu___33542, uu___33543, uu___33544, uu___33545, uu___33546)> (FStar.Pervasives.Native.tuple7<uu___33540, uu___33541, uu___33542, uu___33543, uu___33544, uu___33545, uu___33546> 'a@6:(Tm_type) 'b@5:(Tm_type) 'c@4:(Tm_type) 'd@3:(Tm_type) 'e@2:(Tm_type) 'f@1:(Tm_type) 'g@0:(Tm_type)))} (Prims.l_imp (Prims.l_and (Prims.l_and (Prims.l_and (Prims.l_and (Prims.l_and (Prims.l_and (Prims.l_and Prims.l_True (Prims.hasEq<uu___33546> 'a@6:(Tm_type))) (Prims.hasEq<uu___33545> 'b@5:(Tm_type))) (Prims.hasEq<uu___33544> 'c@4:(Tm_type))) (Prims.hasEq<uu___33543> 'd@3:(Tm_type))) (Prims.hasEq<uu___33542> 'e@2:(Tm_type))) (Prims.hasEq<uu___33541> 'f@1:(Tm_type))) (Prims.hasEq<uu___33540> 'g@0:(Tm_type))) (Prims.hasEq<(max uu___33540, uu___33541, uu___33542, uu___33543, uu___33544, uu___33545, uu___33546)> (FStar.Pervasives.Native.tuple7<uu___33540, uu___33541, uu___33542, uu___33543, uu___33544, uu___33545, uu___33546> 'a@6:(Tm_type) 'b@5:(Tm_type) 'c@4:(Tm_type) 'd@3:(Tm_type) 'e@2:(Tm_type) 'f@1:(Tm_type) 'g@0:(Tm_type)))) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.GTot Type u#(0))))

Checked: (Discriminator FStar.Pervasives.Native.Mktuple7) val FStar.Pervasives.Native.uu___is_Mktuple7 <uu___33540, uu___33541, uu___33542, uu___33543, uu___33544, uu___33545, uu___33546> : (#'a#37527:Type u#(uu___33546) -> #'b#37528:Type u#(uu___33545) -> #'c#37529:Type u#(uu___33544) -> #'d#37530:Type u#(uu___33543) -> #'e#37531:Type u#(uu___33542) -> #'f#37532:Type u#(uu___33541) -> #'g#37533:Type u#(uu___33540) -> projectee#37534:(FStar.Pervasives.Native.tuple7<uu___33540, uu___33541, uu___33542, uu___33543, uu___33544, uu___33545, uu___33546> 'a@6:(Tm_type) 'b@5:(Tm_type) 'c@4:(Tm_type) 'd@3:(Tm_type) 'e@2:(Tm_type) 'f@1:(Tm_type) 'g@0:(Tm_type)) -> Tot<0> Prims.bool)


Checked: visible (Discriminator FStar.Pervasives.Native.Mktuple7) let  FStar.Pervasives.Native.uu___is_Mktuple7 <uu___33540, uu___33541, uu___33542, uu___33543, uu___33544, uu___33545, uu___33546> : (#'a#37729:Type u#(@0) -> #'b#37730:Type u#(@2) -> #'c#37731:Type u#(@4) -> #'d#37732:Type u#(@6) -> #'e#37733:Type u#(@8) -> #'f#37734:Type u#(@10) -> #'g#37735:Type u#(@12) -> projectee#37736:(FStar.Pervasives.Native.tuple7<@13, @12, @11, @10, @9, @8, @7> 'a@6:(Tm_type) 'b@5:(Tm_type) 'c@4:(Tm_type) 'd@3:(Tm_type) 'e@2:(Tm_type) 'f@1:(Tm_type) 'g@0:(Tm_type)) -> Tot<0> Prims.bool) = (fun #'a#37737:Type u#(@0) #'b#37738:Type u#(@2) #'c#37739:Type u#(@4) #'d#37740:Type u#(@6) #'e#37741:Type u#(@8) #'f#37742:Type u#(@10) #'g#37743:Type u#(@12) projectee#37744:(FStar.Pervasives.Native.tuple7<@13, @12, @11, @10, @9, @8, @7> 'a@6:(Tm_type) 'b@5:(Tm_type) 'c@4:(Tm_type) 'd@3:(Tm_type) 'e@2:(Tm_type) 'f@1:(Tm_type) 'g@0:(Tm_type)) -> (true $$ (residual) Prims.Tot Prims.bool))

Checked: [@FStar.Pervasives.Substitute]
(Projector FStar.Pervasives.Native.Mktuple7 _1) val FStar.Pervasives.Native.__proj__Mktuple7__item___1 <uu___33540, uu___33541, uu___33542, uu___33543, uu___33544, uu___33545, uu___33546> : (#'a#37887:Type u#(uu___33546) -> #'b#37888:Type u#(uu___33545) -> #'c#37889:Type u#(uu___33544) -> #'d#37890:Type u#(uu___33543) -> #'e#37891:Type u#(uu___33542) -> #'f#37892:Type u#(uu___33541) -> #'g#37893:Type u#(uu___33540) -> projectee#37894:(FStar.Pervasives.Native.tuple7<uu___33540, uu___33541, uu___33542, uu___33543, uu___33544, uu___33545, uu___33546> 'a@6:(Tm_type) 'b@5:(Tm_type) 'c@4:(Tm_type) 'd@3:(Tm_type) 'e@2:(Tm_type) 'f@1:(Tm_type) 'g@0:(Tm_type)) -> Tot<uu___33546> 'a@7:(Tm_type))


Checked: [@FStar.Pervasives.Substitute]
visible (Projector FStar.Pervasives.Native.Mktuple7 _1) let  FStar.Pervasives.Native.__proj__Mktuple7__item___1 <uu___33540, uu___33541, uu___33542, uu___33543, uu___33544, uu___33545, uu___33546> : (#'a#40144:Type u#(@0) -> #'b#40145:Type u#(@2) -> #'c#40146:Type u#(@4) -> #'d#40147:Type u#(@6) -> #'e#40148:Type u#(@8) -> #'f#40149:Type u#(@10) -> #'g#40150:Type u#(@12) -> projectee#40151:(FStar.Pervasives.Native.tuple7<@13, @12, @11, @10, @9, @8, @7> 'a@6:(Tm_type) 'b@5:(Tm_type) 'c@4:(Tm_type) 'd@3:(Tm_type) 'e@2:(Tm_type) 'f@1:(Tm_type) 'g@0:(Tm_type)) -> Tot<@8> 'a@7:(Tm_type)) = (fun #'a#40152:Type u#(@0) #'b#40153:Type u#(@2) #'c#40154:Type u#(@4) #'d#40155:Type u#(@6) #'e#40156:Type u#(@8) #'f#40157:Type u#(@10) #'g#40158:Type u#(@12) projectee#40159:(FStar.Pervasives.Native.tuple7<@13, @12, @11, @10, @9, @8, @7> 'a@6:(Tm_type) 'b@5:(Tm_type) 'c@4:(Tm_type) 'd@3:(Tm_type) 'e@2:(Tm_type) 'f@1:(Tm_type) 'g@0:(Tm_type)) -> (((match projectee@0:(Tm_delayed) with
	| (FStar.Pervasives.Native.Mktuple7 #.'a#33588:Type u#(@8) #.'b#33589:Type u#(@9) #.'c#33590:Type u#(@10) #.'d#33591:Type u#(@11) #.'e#33592:Type u#(@12) #.'f#33593:Type u#(@13) #.'g#33594:Type u#(@14) _1#40160:'a@7:(Tm_type) Pat_wild _2#40161 Pat_wild _3#40162 Pat_wild _4#40163 Pat_wild _5#40164 Pat_wild _6#40165 Pat_wild _7#40166)  -> _1@6:(Tm_name: 'a#40152)) <ascribed: [Prims.PURE] 'a@7:(Tm_type) ) $$ (residual) Prims.Tot 'a@7:(Tm_type)))

Checked: [@FStar.Pervasives.Substitute]
(Projector FStar.Pervasives.Native.Mktuple7 _2) val FStar.Pervasives.Native.__proj__Mktuple7__item___2 <uu___33540, uu___33541, uu___33542, uu___33543, uu___33544, uu___33545, uu___33546> : (#'a#40309:Type u#(uu___33546) -> #'b#40310:Type u#(uu___33545) -> #'c#40311:Type u#(uu___33544) -> #'d#40312:Type u#(uu___33543) -> #'e#40313:Type u#(uu___33542) -> #'f#40314:Type u#(uu___33541) -> #'g#40315:Type u#(uu___33540) -> projectee#40316:(FStar.Pervasives.Native.tuple7<uu___33540, uu___33541, uu___33542, uu___33543, uu___33544, uu___33545, uu___33546> 'a@6:(Tm_type) 'b@5:(Tm_type) 'c@4:(Tm_type) 'd@3:(Tm_type) 'e@2:(Tm_type) 'f@1:(Tm_type) 'g@0:(Tm_type)) -> Tot<uu___33545> 'b@6:(Tm_type))


Checked: [@FStar.Pervasives.Substitute]
visible (Projector FStar.Pervasives.Native.Mktuple7 _2) let  FStar.Pervasives.Native.__proj__Mktuple7__item___2 <uu___33540, uu___33541, uu___33542, uu___33543, uu___33544, uu___33545, uu___33546> : (#'a#42566:Type u#(@0) -> #'b#42567:Type u#(@2) -> #'c#42568:Type u#(@4) -> #'d#42569:Type u#(@6) -> #'e#42570:Type u#(@8) -> #'f#42571:Type u#(@10) -> #'g#42572:Type u#(@12) -> projectee#42573:(FStar.Pervasives.Native.tuple7<@13, @12, @11, @10, @9, @8, @7> 'a@6:(Tm_type) 'b@5:(Tm_type) 'c@4:(Tm_type) 'd@3:(Tm_type) 'e@2:(Tm_type) 'f@1:(Tm_type) 'g@0:(Tm_type)) -> Tot<@9> 'b@6:(Tm_type)) = (fun #'a#42574:Type u#(@0) #'b#42575:Type u#(@2) #'c#42576:Type u#(@4) #'d#42577:Type u#(@6) #'e#42578:Type u#(@8) #'f#42579:Type u#(@10) #'g#42580:Type u#(@12) projectee#42581:(FStar.Pervasives.Native.tuple7<@13, @12, @11, @10, @9, @8, @7> 'a@6:(Tm_type) 'b@5:(Tm_type) 'c@4:(Tm_type) 'd@3:(Tm_type) 'e@2:(Tm_type) 'f@1:(Tm_type) 'g@0:(Tm_type)) -> (((match projectee@0:(Tm_delayed) with
	| (FStar.Pervasives.Native.Mktuple7 #.'a#33602:Type u#(@8) #.'b#33603:Type u#(@9) #.'c#33604:Type u#(@10) #.'d#33605:Type u#(@11) #.'e#33606:Type u#(@12) #.'f#33607:Type u#(@13) #.'g#33608:Type u#(@14) Pat_wild _1#42582 _2#42583:'b@7:(Tm_type) Pat_wild _3#42584 Pat_wild _4#42585 Pat_wild _5#42586 Pat_wild _6#42587 Pat_wild _7#42588)  -> _2@5:(Tm_name: 'b#42575)) <ascribed: [Prims.PURE] 'b@6:(Tm_type) ) $$ (residual) Prims.Tot 'b@6:(Tm_type)))

Checked: [@FStar.Pervasives.Substitute]
(Projector FStar.Pervasives.Native.Mktuple7 _3) val FStar.Pervasives.Native.__proj__Mktuple7__item___3 <uu___33540, uu___33541, uu___33542, uu___33543, uu___33544, uu___33545, uu___33546> : (#'a#42731:Type u#(uu___33546) -> #'b#42732:Type u#(uu___33545) -> #'c#42733:Type u#(uu___33544) -> #'d#42734:Type u#(uu___33543) -> #'e#42735:Type u#(uu___33542) -> #'f#42736:Type u#(uu___33541) -> #'g#42737:Type u#(uu___33540) -> projectee#42738:(FStar.Pervasives.Native.tuple7<uu___33540, uu___33541, uu___33542, uu___33543, uu___33544, uu___33545, uu___33546> 'a@6:(Tm_type) 'b@5:(Tm_type) 'c@4:(Tm_type) 'd@3:(Tm_type) 'e@2:(Tm_type) 'f@1:(Tm_type) 'g@0:(Tm_type)) -> Tot<uu___33544> 'c@5:(Tm_type))


Checked: [@FStar.Pervasives.Substitute]
visible (Projector FStar.Pervasives.Native.Mktuple7 _3) let  FStar.Pervasives.Native.__proj__Mktuple7__item___3 <uu___33540, uu___33541, uu___33542, uu___33543, uu___33544, uu___33545, uu___33546> : (#'a#44988:Type u#(@0) -> #'b#44989:Type u#(@2) -> #'c#44990:Type u#(@4) -> #'d#44991:Type u#(@6) -> #'e#44992:Type u#(@8) -> #'f#44993:Type u#(@10) -> #'g#44994:Type u#(@12) -> projectee#44995:(FStar.Pervasives.Native.tuple7<@13, @12, @11, @10, @9, @8, @7> 'a@6:(Tm_type) 'b@5:(Tm_type) 'c@4:(Tm_type) 'd@3:(Tm_type) 'e@2:(Tm_type) 'f@1:(Tm_type) 'g@0:(Tm_type)) -> Tot<@10> 'c@5:(Tm_type)) = (fun #'a#44996:Type u#(@0) #'b#44997:Type u#(@2) #'c#44998:Type u#(@4) #'d#44999:Type u#(@6) #'e#45000:Type u#(@8) #'f#45001:Type u#(@10) #'g#45002:Type u#(@12) projectee#45003:(FStar.Pervasives.Native.tuple7<@13, @12, @11, @10, @9, @8, @7> 'a@6:(Tm_type) 'b@5:(Tm_type) 'c@4:(Tm_type) 'd@3:(Tm_type) 'e@2:(Tm_type) 'f@1:(Tm_type) 'g@0:(Tm_type)) -> (((match projectee@0:(Tm_delayed) with
	| (FStar.Pervasives.Native.Mktuple7 #.'a#33616:Type u#(@8) #.'b#33617:Type u#(@9) #.'c#33618:Type u#(@10) #.'d#33619:Type u#(@11) #.'e#33620:Type u#(@12) #.'f#33621:Type u#(@13) #.'g#33622:Type u#(@14) Pat_wild _1#45004 Pat_wild _2#45005 _3#45006:'c@7:(Tm_type) Pat_wild _4#45007 Pat_wild _5#45008 Pat_wild _6#45009 Pat_wild _7#45010)  -> _3@4:(Tm_name: 'c#44998)) <ascribed: [Prims.PURE] 'c@5:(Tm_type) ) $$ (residual) Prims.Tot 'c@5:(Tm_type)))

Checked: [@FStar.Pervasives.Substitute]
(Projector FStar.Pervasives.Native.Mktuple7 _4) val FStar.Pervasives.Native.__proj__Mktuple7__item___4 <uu___33540, uu___33541, uu___33542, uu___33543, uu___33544, uu___33545, uu___33546> : (#'a#45153:Type u#(uu___33546) -> #'b#45154:Type u#(uu___33545) -> #'c#45155:Type u#(uu___33544) -> #'d#45156:Type u#(uu___33543) -> #'e#45157:Type u#(uu___33542) -> #'f#45158:Type u#(uu___33541) -> #'g#45159:Type u#(uu___33540) -> projectee#45160:(FStar.Pervasives.Native.tuple7<uu___33540, uu___33541, uu___33542, uu___33543, uu___33544, uu___33545, uu___33546> 'a@6:(Tm_type) 'b@5:(Tm_type) 'c@4:(Tm_type) 'd@3:(Tm_type) 'e@2:(Tm_type) 'f@1:(Tm_type) 'g@0:(Tm_type)) -> Tot<uu___33543> 'd@4:(Tm_type))


Checked: [@FStar.Pervasives.Substitute]
visible (Projector FStar.Pervasives.Native.Mktuple7 _4) let  FStar.Pervasives.Native.__proj__Mktuple7__item___4 <uu___33540, uu___33541, uu___33542, uu___33543, uu___33544, uu___33545, uu___33546> : (#'a#47410:Type u#(@0) -> #'b#47411:Type u#(@2) -> #'c#47412:Type u#(@4) -> #'d#47413:Type u#(@6) -> #'e#47414:Type u#(@8) -> #'f#47415:Type u#(@10) -> #'g#47416:Type u#(@12) -> projectee#47417:(FStar.Pervasives.Native.tuple7<@13, @12, @11, @10, @9, @8, @7> 'a@6:(Tm_type) 'b@5:(Tm_type) 'c@4:(Tm_type) 'd@3:(Tm_type) 'e@2:(Tm_type) 'f@1:(Tm_type) 'g@0:(Tm_type)) -> Tot<@11> 'd@4:(Tm_type)) = (fun #'a#47418:Type u#(@0) #'b#47419:Type u#(@2) #'c#47420:Type u#(@4) #'d#47421:Type u#(@6) #'e#47422:Type u#(@8) #'f#47423:Type u#(@10) #'g#47424:Type u#(@12) projectee#47425:(FStar.Pervasives.Native.tuple7<@13, @12, @11, @10, @9, @8, @7> 'a@6:(Tm_type) 'b@5:(Tm_type) 'c@4:(Tm_type) 'd@3:(Tm_type) 'e@2:(Tm_type) 'f@1:(Tm_type) 'g@0:(Tm_type)) -> (((match projectee@0:(Tm_delayed) with
	| (FStar.Pervasives.Native.Mktuple7 #.'a#33630:Type u#(@8) #.'b#33631:Type u#(@9) #.'c#33632:Type u#(@10) #.'d#33633:Type u#(@11) #.'e#33634:Type u#(@12) #.'f#33635:Type u#(@13) #.'g#33636:Type u#(@14) Pat_wild _1#47426 Pat_wild _2#47427 Pat_wild _3#47428 _4#47429:'d@7:(Tm_type) Pat_wild _5#47430 Pat_wild _6#47431 Pat_wild _7#47432)  -> _4@3:(Tm_name: 'd#47421)) <ascribed: [Prims.PURE] 'd@4:(Tm_type) ) $$ (residual) Prims.Tot 'd@4:(Tm_type)))

Checked: [@FStar.Pervasives.Substitute]
(Projector FStar.Pervasives.Native.Mktuple7 _5) val FStar.Pervasives.Native.__proj__Mktuple7__item___5 <uu___33540, uu___33541, uu___33542, uu___33543, uu___33544, uu___33545, uu___33546> : (#'a#47575:Type u#(uu___33546) -> #'b#47576:Type u#(uu___33545) -> #'c#47577:Type u#(uu___33544) -> #'d#47578:Type u#(uu___33543) -> #'e#47579:Type u#(uu___33542) -> #'f#47580:Type u#(uu___33541) -> #'g#47581:Type u#(uu___33540) -> projectee#47582:(FStar.Pervasives.Native.tuple7<uu___33540, uu___33541, uu___33542, uu___33543, uu___33544, uu___33545, uu___33546> 'a@6:(Tm_type) 'b@5:(Tm_type) 'c@4:(Tm_type) 'd@3:(Tm_type) 'e@2:(Tm_type) 'f@1:(Tm_type) 'g@0:(Tm_type)) -> Tot<uu___33542> 'e@3:(Tm_type))


Checked: [@FStar.Pervasives.Substitute]
visible (Projector FStar.Pervasives.Native.Mktuple7 _5) let  FStar.Pervasives.Native.__proj__Mktuple7__item___5 <uu___33540, uu___33541, uu___33542, uu___33543, uu___33544, uu___33545, uu___33546> : (#'a#49832:Type u#(@0) -> #'b#49833:Type u#(@2) -> #'c#49834:Type u#(@4) -> #'d#49835:Type u#(@6) -> #'e#49836:Type u#(@8) -> #'f#49837:Type u#(@10) -> #'g#49838:Type u#(@12) -> projectee#49839:(FStar.Pervasives.Native.tuple7<@13, @12, @11, @10, @9, @8, @7> 'a@6:(Tm_type) 'b@5:(Tm_type) 'c@4:(Tm_type) 'd@3:(Tm_type) 'e@2:(Tm_type) 'f@1:(Tm_type) 'g@0:(Tm_type)) -> Tot<@12> 'e@3:(Tm_type)) = (fun #'a#49840:Type u#(@0) #'b#49841:Type u#(@2) #'c#49842:Type u#(@4) #'d#49843:Type u#(@6) #'e#49844:Type u#(@8) #'f#49845:Type u#(@10) #'g#49846:Type u#(@12) projectee#49847:(FStar.Pervasives.Native.tuple7<@13, @12, @11, @10, @9, @8, @7> 'a@6:(Tm_type) 'b@5:(Tm_type) 'c@4:(Tm_type) 'd@3:(Tm_type) 'e@2:(Tm_type) 'f@1:(Tm_type) 'g@0:(Tm_type)) -> (((match projectee@0:(Tm_delayed) with
	| (FStar.Pervasives.Native.Mktuple7 #.'a#33644:Type u#(@8) #.'b#33645:Type u#(@9) #.'c#33646:Type u#(@10) #.'d#33647:Type u#(@11) #.'e#33648:Type u#(@12) #.'f#33649:Type u#(@13) #.'g#33650:Type u#(@14) Pat_wild _1#49848 Pat_wild _2#49849 Pat_wild _3#49850 Pat_wild _4#49851 _5#49852:'e@7:(Tm_type) Pat_wild _6#49853 Pat_wild _7#49854)  -> _5@2:(Tm_name: 'e#49844)) <ascribed: [Prims.PURE] 'e@3:(Tm_type) ) $$ (residual) Prims.Tot 'e@3:(Tm_type)))

Checked: [@FStar.Pervasives.Substitute]
(Projector FStar.Pervasives.Native.Mktuple7 _6) val FStar.Pervasives.Native.__proj__Mktuple7__item___6 <uu___33540, uu___33541, uu___33542, uu___33543, uu___33544, uu___33545, uu___33546> : (#'a#49997:Type u#(uu___33546) -> #'b#49998:Type u#(uu___33545) -> #'c#49999:Type u#(uu___33544) -> #'d#50000:Type u#(uu___33543) -> #'e#50001:Type u#(uu___33542) -> #'f#50002:Type u#(uu___33541) -> #'g#50003:Type u#(uu___33540) -> projectee#50004:(FStar.Pervasives.Native.tuple7<uu___33540, uu___33541, uu___33542, uu___33543, uu___33544, uu___33545, uu___33546> 'a@6:(Tm_type) 'b@5:(Tm_type) 'c@4:(Tm_type) 'd@3:(Tm_type) 'e@2:(Tm_type) 'f@1:(Tm_type) 'g@0:(Tm_type)) -> Tot<uu___33541> 'f@2:(Tm_type))


Checked: [@FStar.Pervasives.Substitute]
visible (Projector FStar.Pervasives.Native.Mktuple7 _6) let  FStar.Pervasives.Native.__proj__Mktuple7__item___6 <uu___33540, uu___33541, uu___33542, uu___33543, uu___33544, uu___33545, uu___33546> : (#'a#52254:Type u#(@0) -> #'b#52255:Type u#(@2) -> #'c#52256:Type u#(@4) -> #'d#52257:Type u#(@6) -> #'e#52258:Type u#(@8) -> #'f#52259:Type u#(@10) -> #'g#52260:Type u#(@12) -> projectee#52261:(FStar.Pervasives.Native.tuple7<@13, @12, @11, @10, @9, @8, @7> 'a@6:(Tm_type) 'b@5:(Tm_type) 'c@4:(Tm_type) 'd@3:(Tm_type) 'e@2:(Tm_type) 'f@1:(Tm_type) 'g@0:(Tm_type)) -> Tot<@13> 'f@2:(Tm_type)) = (fun #'a#52262:Type u#(@0) #'b#52263:Type u#(@2) #'c#52264:Type u#(@4) #'d#52265:Type u#(@6) #'e#52266:Type u#(@8) #'f#52267:Type u#(@10) #'g#52268:Type u#(@12) projectee#52269:(FStar.Pervasives.Native.tuple7<@13, @12, @11, @10, @9, @8, @7> 'a@6:(Tm_type) 'b@5:(Tm_type) 'c@4:(Tm_type) 'd@3:(Tm_type) 'e@2:(Tm_type) 'f@1:(Tm_type) 'g@0:(Tm_type)) -> (((match projectee@0:(Tm_delayed) with
	| (FStar.Pervasives.Native.Mktuple7 #.'a#33658:Type u#(@8) #.'b#33659:Type u#(@9) #.'c#33660:Type u#(@10) #.'d#33661:Type u#(@11) #.'e#33662:Type u#(@12) #.'f#33663:Type u#(@13) #.'g#33664:Type u#(@14) Pat_wild _1#52270 Pat_wild _2#52271 Pat_wild _3#52272 Pat_wild _4#52273 Pat_wild _5#52274 _6#52275:'f@7:(Tm_type) Pat_wild _7#52276)  -> _6@1:(Tm_name: 'f#52267)) <ascribed: [Prims.PURE] 'f@2:(Tm_type) ) $$ (residual) Prims.Tot 'f@2:(Tm_type)))

Checked: [@FStar.Pervasives.Substitute]
(Projector FStar.Pervasives.Native.Mktuple7 _7) val FStar.Pervasives.Native.__proj__Mktuple7__item___7 <uu___33540, uu___33541, uu___33542, uu___33543, uu___33544, uu___33545, uu___33546> : (#'a#52419:Type u#(uu___33546) -> #'b#52420:Type u#(uu___33545) -> #'c#52421:Type u#(uu___33544) -> #'d#52422:Type u#(uu___33543) -> #'e#52423:Type u#(uu___33542) -> #'f#52424:Type u#(uu___33541) -> #'g#52425:Type u#(uu___33540) -> projectee#52426:(FStar.Pervasives.Native.tuple7<uu___33540, uu___33541, uu___33542, uu___33543, uu___33544, uu___33545, uu___33546> 'a@6:(Tm_type) 'b@5:(Tm_type) 'c@4:(Tm_type) 'd@3:(Tm_type) 'e@2:(Tm_type) 'f@1:(Tm_type) 'g@0:(Tm_type)) -> Tot<uu___33540> 'g@1:(Tm_type))


Checked: [@FStar.Pervasives.Substitute]
visible (Projector FStar.Pervasives.Native.Mktuple7 _7) let  FStar.Pervasives.Native.__proj__Mktuple7__item___7 <uu___33540, uu___33541, uu___33542, uu___33543, uu___33544, uu___33545, uu___33546> : (#'a#54676:Type u#(@0) -> #'b#54677:Type u#(@2) -> #'c#54678:Type u#(@4) -> #'d#54679:Type u#(@6) -> #'e#54680:Type u#(@8) -> #'f#54681:Type u#(@10) -> #'g#54682:Type u#(@12) -> projectee#54683:(FStar.Pervasives.Native.tuple7<@13, @12, @11, @10, @9, @8, @7> 'a@6:(Tm_type) 'b@5:(Tm_type) 'c@4:(Tm_type) 'd@3:(Tm_type) 'e@2:(Tm_type) 'f@1:(Tm_type) 'g@0:(Tm_type)) -> Tot<@14> 'g@1:(Tm_type)) = (fun #'a#54684:Type u#(@0) #'b#54685:Type u#(@2) #'c#54686:Type u#(@4) #'d#54687:Type u#(@6) #'e#54688:Type u#(@8) #'f#54689:Type u#(@10) #'g#54690:Type u#(@12) projectee#54691:(FStar.Pervasives.Native.tuple7<@13, @12, @11, @10, @9, @8, @7> 'a@6:(Tm_type) 'b@5:(Tm_type) 'c@4:(Tm_type) 'd@3:(Tm_type) 'e@2:(Tm_type) 'f@1:(Tm_type) 'g@0:(Tm_type)) -> (((match projectee@0:(Tm_delayed) with
	| (FStar.Pervasives.Native.Mktuple7 #.'a#33672:Type u#(@8) #.'b#33673:Type u#(@9) #.'c#33674:Type u#(@10) #.'d#33675:Type u#(@11) #.'e#33676:Type u#(@12) #.'f#33677:Type u#(@13) #.'g#33678:Type u#(@14) Pat_wild _1#54692 Pat_wild _2#54693 Pat_wild _3#54694 Pat_wild _4#54695 Pat_wild _5#54696 Pat_wild _6#54697 _7#54698:'g@7:(Tm_type))  -> _7@0:(Tm_name: 'g#54690)) <ascribed: [Prims.PURE] 'g@1:(Tm_type) ) $$ (residual) Prims.Tot 'g@1:(Tm_type)))

Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: type FStar.Pervasives.Native.tuple8 'a#59526:Type u#(@0) 'b#59527:Type u#(@2) 'c#59528:Type u#(@4) 'd#59529:Type u#(@6) 'e#59530:Type u#(@8) 'f#59531:Type u#(@10) 'g#59532:Type u#(@12) 'h#59533:Type u#(@14) : Type u#((max @15, @14, @13, @12, @11, @10, @9, @8))
datacon<uu___55061, uu___55062, uu___55063, uu___55064, uu___55065, uu___55066, uu___55067, uu___55068> FStar.Pervasives.Native.Mktuple8 : (#.'a#59534:Type u#(@0) -> #.'b#59535:Type u#(@2) -> #.'c#59536:Type u#(@4) -> #.'d#59537:Type u#(@6) -> #.'e#59538:Type u#(@8) -> #.'f#59539:Type u#(@10) -> #.'g#59540:Type u#(@12) -> #.'h#59541:Type u#(@14) -> _1#59542:'a@7:(Tm_type) -> _2#59543:'b@7:(Tm_type) -> _3#59544:'c@7:(Tm_type) -> _4#59545:'d@7:(Tm_type) -> _5#59546:'e@7:(Tm_type) -> _6#59547:'f@7:(Tm_type) -> _7#59548:'g@7:(Tm_type) -> _8#59549:'h@7:(Tm_type) -> Tot (FStar.Pervasives.Native.tuple8<@23, @22, @21, @20, @19, @18, @17, @16> 'a@15:(Tm_type) 'b@14:(Tm_type) 'c@13:(Tm_type) 'd@12:(Tm_type) 'e@11:(Tm_type) 'f@10:(Tm_type) 'g@9:(Tm_type) 'h@8:(Tm_type)))
val FStar.Pervasives.Native.tuple8_haseq : (Prims.l_Forall<(uu___55068 + 1)> #Type u#(uu___55068) (fun 'a#59550:Type u#(uu___55068) -> ((Prims.l_Forall<(uu___55067 + 1)> #Type u#(uu___55067) (fun 'b#59551:Type u#(uu___55067) -> ((Prims.l_Forall<(uu___55066 + 1)> #Type u#(uu___55066) (fun 'c#59552:Type u#(uu___55066) -> ((Prims.l_Forall<(uu___55065 + 1)> #Type u#(uu___55065) (fun 'd#59553:Type u#(uu___55065) -> ((Prims.l_Forall<(uu___55064 + 1)> #Type u#(uu___55064) (fun 'e#59554:Type u#(uu___55064) -> ((Prims.l_Forall<(uu___55063 + 1)> #Type u#(uu___55063) (fun 'f#59555:Type u#(uu___55063) -> ((Prims.l_Forall<(uu___55062 + 1)> #Type u#(uu___55062) (fun 'g#59556:Type u#(uu___55062) -> ((Prims.l_Forall<(uu___55061 + 1)> #Type u#(uu___55061) (fun 'h#59557:Type u#(uu___55061) -> ({:pattern (Prims.hasEq<(max uu___55061, uu___55062, uu___55063, uu___55064, uu___55065, uu___55066, uu___55067, uu___55068)> (FStar.Pervasives.Native.tuple8<uu___55061, uu___55062, uu___55063, uu___55064, uu___55065, uu___55066, uu___55067, uu___55068> 'a@7:(Tm_type) 'b@6:(Tm_type) 'c@5:(Tm_type) 'd@4:(Tm_type) 'e@3:(Tm_type) 'f@2:(Tm_type) 'g@1:(Tm_type) 'h@0:(Tm_type)))} (Prims.l_imp (Prims.l_and (Prims.l_and (Prims.l_and (Prims.l_and (Prims.l_and (Prims.l_and (Prims.l_and (Prims.l_and Prims.l_True (Prims.hasEq<uu___55068> 'a@7:(Tm_type))) (Prims.hasEq<uu___55067> 'b@6:(Tm_type))) (Prims.hasEq<uu___55066> 'c@5:(Tm_type))) (Prims.hasEq<uu___55065> 'd@4:(Tm_type))) (Prims.hasEq<uu___55064> 'e@3:(Tm_type))) (Prims.hasEq<uu___55063> 'f@2:(Tm_type))) (Prims.hasEq<uu___55062> 'g@1:(Tm_type))) (Prims.hasEq<uu___55061> 'h@0:(Tm_type))) (Prims.hasEq<(max uu___55061, uu___55062, uu___55063, uu___55064, uu___55065, uu___55066, uu___55067, uu___55068)> (FStar.Pervasives.Native.tuple8<uu___55061, uu___55062, uu___55063, uu___55064, uu___55065, uu___55066, uu___55067, uu___55068> 'a@7:(Tm_type) 'b@6:(Tm_type) 'c@5:(Tm_type) 'd@4:(Tm_type) 'e@3:(Tm_type) 'f@2:(Tm_type) 'g@1:(Tm_type) 'h@0:(Tm_type)))) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.GTot Type u#(0))))

Checked: (Discriminator FStar.Pervasives.Native.Mktuple8) val FStar.Pervasives.Native.uu___is_Mktuple8 <uu___55061, uu___55062, uu___55063, uu___55064, uu___55065, uu___55066, uu___55067, uu___55068> : (#'a#60071:Type u#(uu___55068) -> #'b#60072:Type u#(uu___55067) -> #'c#60073:Type u#(uu___55066) -> #'d#60074:Type u#(uu___55065) -> #'e#60075:Type u#(uu___55064) -> #'f#60076:Type u#(uu___55063) -> #'g#60077:Type u#(uu___55062) -> #'h#60078:Type u#(uu___55061) -> projectee#60079:(FStar.Pervasives.Native.tuple8<uu___55061, uu___55062, uu___55063, uu___55064, uu___55065, uu___55066, uu___55067, uu___55068> 'a@7:(Tm_type) 'b@6:(Tm_type) 'c@5:(Tm_type) 'd@4:(Tm_type) 'e@3:(Tm_type) 'f@2:(Tm_type) 'g@1:(Tm_type) 'h@0:(Tm_type)) -> Tot<0> Prims.bool)


Checked: visible (Discriminator FStar.Pervasives.Native.Mktuple8) let  FStar.Pervasives.Native.uu___is_Mktuple8 <uu___55061, uu___55062, uu___55063, uu___55064, uu___55065, uu___55066, uu___55067, uu___55068> : (#'a#60312:Type u#(@0) -> #'b#60313:Type u#(@2) -> #'c#60314:Type u#(@4) -> #'d#60315:Type u#(@6) -> #'e#60316:Type u#(@8) -> #'f#60317:Type u#(@10) -> #'g#60318:Type u#(@12) -> #'h#60319:Type u#(@14) -> projectee#60320:(FStar.Pervasives.Native.tuple8<@15, @14, @13, @12, @11, @10, @9, @8> 'a@7:(Tm_type) 'b@6:(Tm_type) 'c@5:(Tm_type) 'd@4:(Tm_type) 'e@3:(Tm_type) 'f@2:(Tm_type) 'g@1:(Tm_type) 'h@0:(Tm_type)) -> Tot<0> Prims.bool) = (fun #'a#60321:Type u#(@0) #'b#60322:Type u#(@2) #'c#60323:Type u#(@4) #'d#60324:Type u#(@6) #'e#60325:Type u#(@8) #'f#60326:Type u#(@10) #'g#60327:Type u#(@12) #'h#60328:Type u#(@14) projectee#60329:(FStar.Pervasives.Native.tuple8<@15, @14, @13, @12, @11, @10, @9, @8> 'a@7:(Tm_type) 'b@6:(Tm_type) 'c@5:(Tm_type) 'd@4:(Tm_type) 'e@3:(Tm_type) 'f@2:(Tm_type) 'g@1:(Tm_type) 'h@0:(Tm_type)) -> (true $$ (residual) Prims.Tot Prims.bool))

Checked: [@FStar.Pervasives.Substitute]
(Projector FStar.Pervasives.Native.Mktuple8 _1) val FStar.Pervasives.Native.__proj__Mktuple8__item___1 <uu___55061, uu___55062, uu___55063, uu___55064, uu___55065, uu___55066, uu___55067, uu___55068> : (#'a#60503:Type u#(uu___55068) -> #'b#60504:Type u#(uu___55067) -> #'c#60505:Type u#(uu___55066) -> #'d#60506:Type u#(uu___55065) -> #'e#60507:Type u#(uu___55064) -> #'f#60508:Type u#(uu___55063) -> #'g#60509:Type u#(uu___55062) -> #'h#60510:Type u#(uu___55061) -> projectee#60511:(FStar.Pervasives.Native.tuple8<uu___55061, uu___55062, uu___55063, uu___55064, uu___55065, uu___55066, uu___55067, uu___55068> 'a@7:(Tm_type) 'b@6:(Tm_type) 'c@5:(Tm_type) 'd@4:(Tm_type) 'e@3:(Tm_type) 'f@2:(Tm_type) 'g@1:(Tm_type) 'h@0:(Tm_type)) -> Tot<uu___55068> 'a@8:(Tm_type))


Checked: [@FStar.Pervasives.Substitute]
visible (Projector FStar.Pervasives.Native.Mktuple8 _1) let  FStar.Pervasives.Native.__proj__Mktuple8__item___1 <uu___55061, uu___55062, uu___55063, uu___55064, uu___55065, uu___55066, uu___55067, uu___55068> : (#'a#63519:Type u#(@0) -> #'b#63520:Type u#(@2) -> #'c#63521:Type u#(@4) -> #'d#63522:Type u#(@6) -> #'e#63523:Type u#(@8) -> #'f#63524:Type u#(@10) -> #'g#63525:Type u#(@12) -> #'h#63526:Type u#(@14) -> projectee#63527:(FStar.Pervasives.Native.tuple8<@15, @14, @13, @12, @11, @10, @9, @8> 'a@7:(Tm_type) 'b@6:(Tm_type) 'c@5:(Tm_type) 'd@4:(Tm_type) 'e@3:(Tm_type) 'f@2:(Tm_type) 'g@1:(Tm_type) 'h@0:(Tm_type)) -> Tot<@9> 'a@8:(Tm_type)) = (fun #'a#63528:Type u#(@0) #'b#63529:Type u#(@2) #'c#63530:Type u#(@4) #'d#63531:Type u#(@6) #'e#63532:Type u#(@8) #'f#63533:Type u#(@10) #'g#63534:Type u#(@12) #'h#63535:Type u#(@14) projectee#63536:(FStar.Pervasives.Native.tuple8<@15, @14, @13, @12, @11, @10, @9, @8> 'a@7:(Tm_type) 'b@6:(Tm_type) 'c@5:(Tm_type) 'd@4:(Tm_type) 'e@3:(Tm_type) 'f@2:(Tm_type) 'g@1:(Tm_type) 'h@0:(Tm_type)) -> (((match projectee@0:(Tm_delayed) with
	| (FStar.Pervasives.Native.Mktuple8 #.'a#55115:Type u#(@9) #.'b#55116:Type u#(@10) #.'c#55117:Type u#(@11) #.'d#55118:Type u#(@12) #.'e#55119:Type u#(@13) #.'f#55120:Type u#(@14) #.'g#55121:Type u#(@15) #.'h#55122:Type u#(@16) _1#63537:'a@8:(Tm_type) Pat_wild _2#63538 Pat_wild _3#63539 Pat_wild _4#63540 Pat_wild _5#63541 Pat_wild _6#63542 Pat_wild _7#63543 Pat_wild _8#63544)  -> _1@7:(Tm_name: 'a#63528)) <ascribed: [Prims.PURE] 'a@8:(Tm_type) ) $$ (residual) Prims.Tot 'a@8:(Tm_type)))

Checked: [@FStar.Pervasives.Substitute]
(Projector FStar.Pervasives.Native.Mktuple8 _2) val FStar.Pervasives.Native.__proj__Mktuple8__item___2 <uu___55061, uu___55062, uu___55063, uu___55064, uu___55065, uu___55066, uu___55067, uu___55068> : (#'a#63718:Type u#(uu___55068) -> #'b#63719:Type u#(uu___55067) -> #'c#63720:Type u#(uu___55066) -> #'d#63721:Type u#(uu___55065) -> #'e#63722:Type u#(uu___55064) -> #'f#63723:Type u#(uu___55063) -> #'g#63724:Type u#(uu___55062) -> #'h#63725:Type u#(uu___55061) -> projectee#63726:(FStar.Pervasives.Native.tuple8<uu___55061, uu___55062, uu___55063, uu___55064, uu___55065, uu___55066, uu___55067, uu___55068> 'a@7:(Tm_type) 'b@6:(Tm_type) 'c@5:(Tm_type) 'd@4:(Tm_type) 'e@3:(Tm_type) 'f@2:(Tm_type) 'g@1:(Tm_type) 'h@0:(Tm_type)) -> Tot<uu___55067> 'b@7:(Tm_type))


Checked: [@FStar.Pervasives.Substitute]
visible (Projector FStar.Pervasives.Native.Mktuple8 _2) let  FStar.Pervasives.Native.__proj__Mktuple8__item___2 <uu___55061, uu___55062, uu___55063, uu___55064, uu___55065, uu___55066, uu___55067, uu___55068> : (#'a#66734:Type u#(@0) -> #'b#66735:Type u#(@2) -> #'c#66736:Type u#(@4) -> #'d#66737:Type u#(@6) -> #'e#66738:Type u#(@8) -> #'f#66739:Type u#(@10) -> #'g#66740:Type u#(@12) -> #'h#66741:Type u#(@14) -> projectee#66742:(FStar.Pervasives.Native.tuple8<@15, @14, @13, @12, @11, @10, @9, @8> 'a@7:(Tm_type) 'b@6:(Tm_type) 'c@5:(Tm_type) 'd@4:(Tm_type) 'e@3:(Tm_type) 'f@2:(Tm_type) 'g@1:(Tm_type) 'h@0:(Tm_type)) -> Tot<@10> 'b@7:(Tm_type)) = (fun #'a#66743:Type u#(@0) #'b#66744:Type u#(@2) #'c#66745:Type u#(@4) #'d#66746:Type u#(@6) #'e#66747:Type u#(@8) #'f#66748:Type u#(@10) #'g#66749:Type u#(@12) #'h#66750:Type u#(@14) projectee#66751:(FStar.Pervasives.Native.tuple8<@15, @14, @13, @12, @11, @10, @9, @8> 'a@7:(Tm_type) 'b@6:(Tm_type) 'c@5:(Tm_type) 'd@4:(Tm_type) 'e@3:(Tm_type) 'f@2:(Tm_type) 'g@1:(Tm_type) 'h@0:(Tm_type)) -> (((match projectee@0:(Tm_delayed) with
	| (FStar.Pervasives.Native.Mktuple8 #.'a#55131:Type u#(@9) #.'b#55132:Type u#(@10) #.'c#55133:Type u#(@11) #.'d#55134:Type u#(@12) #.'e#55135:Type u#(@13) #.'f#55136:Type u#(@14) #.'g#55137:Type u#(@15) #.'h#55138:Type u#(@16) Pat_wild _1#66752 _2#66753:'b@8:(Tm_type) Pat_wild _3#66754 Pat_wild _4#66755 Pat_wild _5#66756 Pat_wild _6#66757 Pat_wild _7#66758 Pat_wild _8#66759)  -> _2@6:(Tm_name: 'b#66744)) <ascribed: [Prims.PURE] 'b@7:(Tm_type) ) $$ (residual) Prims.Tot 'b@7:(Tm_type)))

Checked: [@FStar.Pervasives.Substitute]
(Projector FStar.Pervasives.Native.Mktuple8 _3) val FStar.Pervasives.Native.__proj__Mktuple8__item___3 <uu___55061, uu___55062, uu___55063, uu___55064, uu___55065, uu___55066, uu___55067, uu___55068> : (#'a#66933:Type u#(uu___55068) -> #'b#66934:Type u#(uu___55067) -> #'c#66935:Type u#(uu___55066) -> #'d#66936:Type u#(uu___55065) -> #'e#66937:Type u#(uu___55064) -> #'f#66938:Type u#(uu___55063) -> #'g#66939:Type u#(uu___55062) -> #'h#66940:Type u#(uu___55061) -> projectee#66941:(FStar.Pervasives.Native.tuple8<uu___55061, uu___55062, uu___55063, uu___55064, uu___55065, uu___55066, uu___55067, uu___55068> 'a@7:(Tm_type) 'b@6:(Tm_type) 'c@5:(Tm_type) 'd@4:(Tm_type) 'e@3:(Tm_type) 'f@2:(Tm_type) 'g@1:(Tm_type) 'h@0:(Tm_type)) -> Tot<uu___55066> 'c@6:(Tm_type))


Checked: [@FStar.Pervasives.Substitute]
visible (Projector FStar.Pervasives.Native.Mktuple8 _3) let  FStar.Pervasives.Native.__proj__Mktuple8__item___3 <uu___55061, uu___55062, uu___55063, uu___55064, uu___55065, uu___55066, uu___55067, uu___55068> : (#'a#69949:Type u#(@0) -> #'b#69950:Type u#(@2) -> #'c#69951:Type u#(@4) -> #'d#69952:Type u#(@6) -> #'e#69953:Type u#(@8) -> #'f#69954:Type u#(@10) -> #'g#69955:Type u#(@12) -> #'h#69956:Type u#(@14) -> projectee#69957:(FStar.Pervasives.Native.tuple8<@15, @14, @13, @12, @11, @10, @9, @8> 'a@7:(Tm_type) 'b@6:(Tm_type) 'c@5:(Tm_type) 'd@4:(Tm_type) 'e@3:(Tm_type) 'f@2:(Tm_type) 'g@1:(Tm_type) 'h@0:(Tm_type)) -> Tot<@11> 'c@6:(Tm_type)) = (fun #'a#69958:Type u#(@0) #'b#69959:Type u#(@2) #'c#69960:Type u#(@4) #'d#69961:Type u#(@6) #'e#69962:Type u#(@8) #'f#69963:Type u#(@10) #'g#69964:Type u#(@12) #'h#69965:Type u#(@14) projectee#69966:(FStar.Pervasives.Native.tuple8<@15, @14, @13, @12, @11, @10, @9, @8> 'a@7:(Tm_type) 'b@6:(Tm_type) 'c@5:(Tm_type) 'd@4:(Tm_type) 'e@3:(Tm_type) 'f@2:(Tm_type) 'g@1:(Tm_type) 'h@0:(Tm_type)) -> (((match projectee@0:(Tm_delayed) with
	| (FStar.Pervasives.Native.Mktuple8 #.'a#55147:Type u#(@9) #.'b#55148:Type u#(@10) #.'c#55149:Type u#(@11) #.'d#55150:Type u#(@12) #.'e#55151:Type u#(@13) #.'f#55152:Type u#(@14) #.'g#55153:Type u#(@15) #.'h#55154:Type u#(@16) Pat_wild _1#69967 Pat_wild _2#69968 _3#69969:'c@8:(Tm_type) Pat_wild _4#69970 Pat_wild _5#69971 Pat_wild _6#69972 Pat_wild _7#69973 Pat_wild _8#69974)  -> _3@5:(Tm_name: 'c#69960)) <ascribed: [Prims.PURE] 'c@6:(Tm_type) ) $$ (residual) Prims.Tot 'c@6:(Tm_type)))

Checked: [@FStar.Pervasives.Substitute]
(Projector FStar.Pervasives.Native.Mktuple8 _4) val FStar.Pervasives.Native.__proj__Mktuple8__item___4 <uu___55061, uu___55062, uu___55063, uu___55064, uu___55065, uu___55066, uu___55067, uu___55068> : (#'a#70148:Type u#(uu___55068) -> #'b#70149:Type u#(uu___55067) -> #'c#70150:Type u#(uu___55066) -> #'d#70151:Type u#(uu___55065) -> #'e#70152:Type u#(uu___55064) -> #'f#70153:Type u#(uu___55063) -> #'g#70154:Type u#(uu___55062) -> #'h#70155:Type u#(uu___55061) -> projectee#70156:(FStar.Pervasives.Native.tuple8<uu___55061, uu___55062, uu___55063, uu___55064, uu___55065, uu___55066, uu___55067, uu___55068> 'a@7:(Tm_type) 'b@6:(Tm_type) 'c@5:(Tm_type) 'd@4:(Tm_type) 'e@3:(Tm_type) 'f@2:(Tm_type) 'g@1:(Tm_type) 'h@0:(Tm_type)) -> Tot<uu___55065> 'd@5:(Tm_type))


Checked: [@FStar.Pervasives.Substitute]
visible (Projector FStar.Pervasives.Native.Mktuple8 _4) let  FStar.Pervasives.Native.__proj__Mktuple8__item___4 <uu___55061, uu___55062, uu___55063, uu___55064, uu___55065, uu___55066, uu___55067, uu___55068> : (#'a#73164:Type u#(@0) -> #'b#73165:Type u#(@2) -> #'c#73166:Type u#(@4) -> #'d#73167:Type u#(@6) -> #'e#73168:Type u#(@8) -> #'f#73169:Type u#(@10) -> #'g#73170:Type u#(@12) -> #'h#73171:Type u#(@14) -> projectee#73172:(FStar.Pervasives.Native.tuple8<@15, @14, @13, @12, @11, @10, @9, @8> 'a@7:(Tm_type) 'b@6:(Tm_type) 'c@5:(Tm_type) 'd@4:(Tm_type) 'e@3:(Tm_type) 'f@2:(Tm_type) 'g@1:(Tm_type) 'h@0:(Tm_type)) -> Tot<@12> 'd@5:(Tm_type)) = (fun #'a#73173:Type u#(@0) #'b#73174:Type u#(@2) #'c#73175:Type u#(@4) #'d#73176:Type u#(@6) #'e#73177:Type u#(@8) #'f#73178:Type u#(@10) #'g#73179:Type u#(@12) #'h#73180:Type u#(@14) projectee#73181:(FStar.Pervasives.Native.tuple8<@15, @14, @13, @12, @11, @10, @9, @8> 'a@7:(Tm_type) 'b@6:(Tm_type) 'c@5:(Tm_type) 'd@4:(Tm_type) 'e@3:(Tm_type) 'f@2:(Tm_type) 'g@1:(Tm_type) 'h@0:(Tm_type)) -> (((match projectee@0:(Tm_delayed) with
	| (FStar.Pervasives.Native.Mktuple8 #.'a#55163:Type u#(@9) #.'b#55164:Type u#(@10) #.'c#55165:Type u#(@11) #.'d#55166:Type u#(@12) #.'e#55167:Type u#(@13) #.'f#55168:Type u#(@14) #.'g#55169:Type u#(@15) #.'h#55170:Type u#(@16) Pat_wild _1#73182 Pat_wild _2#73183 Pat_wild _3#73184 _4#73185:'d@8:(Tm_type) Pat_wild _5#73186 Pat_wild _6#73187 Pat_wild _7#73188 Pat_wild _8#73189)  -> _4@4:(Tm_name: 'd#73176)) <ascribed: [Prims.PURE] 'd@5:(Tm_type) ) $$ (residual) Prims.Tot 'd@5:(Tm_type)))

Checked: [@FStar.Pervasives.Substitute]
(Projector FStar.Pervasives.Native.Mktuple8 _5) val FStar.Pervasives.Native.__proj__Mktuple8__item___5 <uu___55061, uu___55062, uu___55063, uu___55064, uu___55065, uu___55066, uu___55067, uu___55068> : (#'a#73363:Type u#(uu___55068) -> #'b#73364:Type u#(uu___55067) -> #'c#73365:Type u#(uu___55066) -> #'d#73366:Type u#(uu___55065) -> #'e#73367:Type u#(uu___55064) -> #'f#73368:Type u#(uu___55063) -> #'g#73369:Type u#(uu___55062) -> #'h#73370:Type u#(uu___55061) -> projectee#73371:(FStar.Pervasives.Native.tuple8<uu___55061, uu___55062, uu___55063, uu___55064, uu___55065, uu___55066, uu___55067, uu___55068> 'a@7:(Tm_type) 'b@6:(Tm_type) 'c@5:(Tm_type) 'd@4:(Tm_type) 'e@3:(Tm_type) 'f@2:(Tm_type) 'g@1:(Tm_type) 'h@0:(Tm_type)) -> Tot<uu___55064> 'e@4:(Tm_type))


Checked: [@FStar.Pervasives.Substitute]
visible (Projector FStar.Pervasives.Native.Mktuple8 _5) let  FStar.Pervasives.Native.__proj__Mktuple8__item___5 <uu___55061, uu___55062, uu___55063, uu___55064, uu___55065, uu___55066, uu___55067, uu___55068> : (#'a#76379:Type u#(@0) -> #'b#76380:Type u#(@2) -> #'c#76381:Type u#(@4) -> #'d#76382:Type u#(@6) -> #'e#76383:Type u#(@8) -> #'f#76384:Type u#(@10) -> #'g#76385:Type u#(@12) -> #'h#76386:Type u#(@14) -> projectee#76387:(FStar.Pervasives.Native.tuple8<@15, @14, @13, @12, @11, @10, @9, @8> 'a@7:(Tm_type) 'b@6:(Tm_type) 'c@5:(Tm_type) 'd@4:(Tm_type) 'e@3:(Tm_type) 'f@2:(Tm_type) 'g@1:(Tm_type) 'h@0:(Tm_type)) -> Tot<@13> 'e@4:(Tm_type)) = (fun #'a#76388:Type u#(@0) #'b#76389:Type u#(@2) #'c#76390:Type u#(@4) #'d#76391:Type u#(@6) #'e#76392:Type u#(@8) #'f#76393:Type u#(@10) #'g#76394:Type u#(@12) #'h#76395:Type u#(@14) projectee#76396:(FStar.Pervasives.Native.tuple8<@15, @14, @13, @12, @11, @10, @9, @8> 'a@7:(Tm_type) 'b@6:(Tm_type) 'c@5:(Tm_type) 'd@4:(Tm_type) 'e@3:(Tm_type) 'f@2:(Tm_type) 'g@1:(Tm_type) 'h@0:(Tm_type)) -> (((match projectee@0:(Tm_delayed) with
	| (FStar.Pervasives.Native.Mktuple8 #.'a#55179:Type u#(@9) #.'b#55180:Type u#(@10) #.'c#55181:Type u#(@11) #.'d#55182:Type u#(@12) #.'e#55183:Type u#(@13) #.'f#55184:Type u#(@14) #.'g#55185:Type u#(@15) #.'h#55186:Type u#(@16) Pat_wild _1#76397 Pat_wild _2#76398 Pat_wild _3#76399 Pat_wild _4#76400 _5#76401:'e@8:(Tm_type) Pat_wild _6#76402 Pat_wild _7#76403 Pat_wild _8#76404)  -> _5@3:(Tm_name: 'e#76392)) <ascribed: [Prims.PURE] 'e@4:(Tm_type) ) $$ (residual) Prims.Tot 'e@4:(Tm_type)))

Checked: [@FStar.Pervasives.Substitute]
(Projector FStar.Pervasives.Native.Mktuple8 _6) val FStar.Pervasives.Native.__proj__Mktuple8__item___6 <uu___55061, uu___55062, uu___55063, uu___55064, uu___55065, uu___55066, uu___55067, uu___55068> : (#'a#76578:Type u#(uu___55068) -> #'b#76579:Type u#(uu___55067) -> #'c#76580:Type u#(uu___55066) -> #'d#76581:Type u#(uu___55065) -> #'e#76582:Type u#(uu___55064) -> #'f#76583:Type u#(uu___55063) -> #'g#76584:Type u#(uu___55062) -> #'h#76585:Type u#(uu___55061) -> projectee#76586:(FStar.Pervasives.Native.tuple8<uu___55061, uu___55062, uu___55063, uu___55064, uu___55065, uu___55066, uu___55067, uu___55068> 'a@7:(Tm_type) 'b@6:(Tm_type) 'c@5:(Tm_type) 'd@4:(Tm_type) 'e@3:(Tm_type) 'f@2:(Tm_type) 'g@1:(Tm_type) 'h@0:(Tm_type)) -> Tot<uu___55063> 'f@3:(Tm_type))


Checked: [@FStar.Pervasives.Substitute]
visible (Projector FStar.Pervasives.Native.Mktuple8 _6) let  FStar.Pervasives.Native.__proj__Mktuple8__item___6 <uu___55061, uu___55062, uu___55063, uu___55064, uu___55065, uu___55066, uu___55067, uu___55068> : (#'a#79594:Type u#(@0) -> #'b#79595:Type u#(@2) -> #'c#79596:Type u#(@4) -> #'d#79597:Type u#(@6) -> #'e#79598:Type u#(@8) -> #'f#79599:Type u#(@10) -> #'g#79600:Type u#(@12) -> #'h#79601:Type u#(@14) -> projectee#79602:(FStar.Pervasives.Native.tuple8<@15, @14, @13, @12, @11, @10, @9, @8> 'a@7:(Tm_type) 'b@6:(Tm_type) 'c@5:(Tm_type) 'd@4:(Tm_type) 'e@3:(Tm_type) 'f@2:(Tm_type) 'g@1:(Tm_type) 'h@0:(Tm_type)) -> Tot<@14> 'f@3:(Tm_type)) = (fun #'a#79603:Type u#(@0) #'b#79604:Type u#(@2) #'c#79605:Type u#(@4) #'d#79606:Type u#(@6) #'e#79607:Type u#(@8) #'f#79608:Type u#(@10) #'g#79609:Type u#(@12) #'h#79610:Type u#(@14) projectee#79611:(FStar.Pervasives.Native.tuple8<@15, @14, @13, @12, @11, @10, @9, @8> 'a@7:(Tm_type) 'b@6:(Tm_type) 'c@5:(Tm_type) 'd@4:(Tm_type) 'e@3:(Tm_type) 'f@2:(Tm_type) 'g@1:(Tm_type) 'h@0:(Tm_type)) -> (((match projectee@0:(Tm_delayed) with
	| (FStar.Pervasives.Native.Mktuple8 #.'a#55195:Type u#(@9) #.'b#55196:Type u#(@10) #.'c#55197:Type u#(@11) #.'d#55198:Type u#(@12) #.'e#55199:Type u#(@13) #.'f#55200:Type u#(@14) #.'g#55201:Type u#(@15) #.'h#55202:Type u#(@16) Pat_wild _1#79612 Pat_wild _2#79613 Pat_wild _3#79614 Pat_wild _4#79615 Pat_wild _5#79616 _6#79617:'f@8:(Tm_type) Pat_wild _7#79618 Pat_wild _8#79619)  -> _6@2:(Tm_name: 'f#79608)) <ascribed: [Prims.PURE] 'f@3:(Tm_type) ) $$ (residual) Prims.Tot 'f@3:(Tm_type)))

Checked: [@FStar.Pervasives.Substitute]
(Projector FStar.Pervasives.Native.Mktuple8 _7) val FStar.Pervasives.Native.__proj__Mktuple8__item___7 <uu___55061, uu___55062, uu___55063, uu___55064, uu___55065, uu___55066, uu___55067, uu___55068> : (#'a#79793:Type u#(uu___55068) -> #'b#79794:Type u#(uu___55067) -> #'c#79795:Type u#(uu___55066) -> #'d#79796:Type u#(uu___55065) -> #'e#79797:Type u#(uu___55064) -> #'f#79798:Type u#(uu___55063) -> #'g#79799:Type u#(uu___55062) -> #'h#79800:Type u#(uu___55061) -> projectee#79801:(FStar.Pervasives.Native.tuple8<uu___55061, uu___55062, uu___55063, uu___55064, uu___55065, uu___55066, uu___55067, uu___55068> 'a@7:(Tm_type) 'b@6:(Tm_type) 'c@5:(Tm_type) 'd@4:(Tm_type) 'e@3:(Tm_type) 'f@2:(Tm_type) 'g@1:(Tm_type) 'h@0:(Tm_type)) -> Tot<uu___55062> 'g@2:(Tm_type))


Checked: [@FStar.Pervasives.Substitute]
visible (Projector FStar.Pervasives.Native.Mktuple8 _7) let  FStar.Pervasives.Native.__proj__Mktuple8__item___7 <uu___55061, uu___55062, uu___55063, uu___55064, uu___55065, uu___55066, uu___55067, uu___55068> : (#'a#82809:Type u#(@0) -> #'b#82810:Type u#(@2) -> #'c#82811:Type u#(@4) -> #'d#82812:Type u#(@6) -> #'e#82813:Type u#(@8) -> #'f#82814:Type u#(@10) -> #'g#82815:Type u#(@12) -> #'h#82816:Type u#(@14) -> projectee#82817:(FStar.Pervasives.Native.tuple8<@15, @14, @13, @12, @11, @10, @9, @8> 'a@7:(Tm_type) 'b@6:(Tm_type) 'c@5:(Tm_type) 'd@4:(Tm_type) 'e@3:(Tm_type) 'f@2:(Tm_type) 'g@1:(Tm_type) 'h@0:(Tm_type)) -> Tot<@15> 'g@2:(Tm_type)) = (fun #'a#82818:Type u#(@0) #'b#82819:Type u#(@2) #'c#82820:Type u#(@4) #'d#82821:Type u#(@6) #'e#82822:Type u#(@8) #'f#82823:Type u#(@10) #'g#82824:Type u#(@12) #'h#82825:Type u#(@14) projectee#82826:(FStar.Pervasives.Native.tuple8<@15, @14, @13, @12, @11, @10, @9, @8> 'a@7:(Tm_type) 'b@6:(Tm_type) 'c@5:(Tm_type) 'd@4:(Tm_type) 'e@3:(Tm_type) 'f@2:(Tm_type) 'g@1:(Tm_type) 'h@0:(Tm_type)) -> (((match projectee@0:(Tm_delayed) with
	| (FStar.Pervasives.Native.Mktuple8 #.'a#55211:Type u#(@9) #.'b#55212:Type u#(@10) #.'c#55213:Type u#(@11) #.'d#55214:Type u#(@12) #.'e#55215:Type u#(@13) #.'f#55216:Type u#(@14) #.'g#55217:Type u#(@15) #.'h#55218:Type u#(@16) Pat_wild _1#82827 Pat_wild _2#82828 Pat_wild _3#82829 Pat_wild _4#82830 Pat_wild _5#82831 Pat_wild _6#82832 _7#82833:'g@8:(Tm_type) Pat_wild _8#82834)  -> _7@1:(Tm_name: 'g#82824)) <ascribed: [Prims.PURE] 'g@2:(Tm_type) ) $$ (residual) Prims.Tot 'g@2:(Tm_type)))

Checked: [@FStar.Pervasives.Substitute]
(Projector FStar.Pervasives.Native.Mktuple8 _8) val FStar.Pervasives.Native.__proj__Mktuple8__item___8 <uu___55061, uu___55062, uu___55063, uu___55064, uu___55065, uu___55066, uu___55067, uu___55068> : (#'a#83008:Type u#(uu___55068) -> #'b#83009:Type u#(uu___55067) -> #'c#83010:Type u#(uu___55066) -> #'d#83011:Type u#(uu___55065) -> #'e#83012:Type u#(uu___55064) -> #'f#83013:Type u#(uu___55063) -> #'g#83014:Type u#(uu___55062) -> #'h#83015:Type u#(uu___55061) -> projectee#83016:(FStar.Pervasives.Native.tuple8<uu___55061, uu___55062, uu___55063, uu___55064, uu___55065, uu___55066, uu___55067, uu___55068> 'a@7:(Tm_type) 'b@6:(Tm_type) 'c@5:(Tm_type) 'd@4:(Tm_type) 'e@3:(Tm_type) 'f@2:(Tm_type) 'g@1:(Tm_type) 'h@0:(Tm_type)) -> Tot<uu___55061> 'h@1:(Tm_type))


Checked: [@FStar.Pervasives.Substitute]
visible (Projector FStar.Pervasives.Native.Mktuple8 _8) let  FStar.Pervasives.Native.__proj__Mktuple8__item___8 <uu___55061, uu___55062, uu___55063, uu___55064, uu___55065, uu___55066, uu___55067, uu___55068> : (#'a#86024:Type u#(@0) -> #'b#86025:Type u#(@2) -> #'c#86026:Type u#(@4) -> #'d#86027:Type u#(@6) -> #'e#86028:Type u#(@8) -> #'f#86029:Type u#(@10) -> #'g#86030:Type u#(@12) -> #'h#86031:Type u#(@14) -> projectee#86032:(FStar.Pervasives.Native.tuple8<@15, @14, @13, @12, @11, @10, @9, @8> 'a@7:(Tm_type) 'b@6:(Tm_type) 'c@5:(Tm_type) 'd@4:(Tm_type) 'e@3:(Tm_type) 'f@2:(Tm_type) 'g@1:(Tm_type) 'h@0:(Tm_type)) -> Tot<@16> 'h@1:(Tm_type)) = (fun #'a#86033:Type u#(@0) #'b#86034:Type u#(@2) #'c#86035:Type u#(@4) #'d#86036:Type u#(@6) #'e#86037:Type u#(@8) #'f#86038:Type u#(@10) #'g#86039:Type u#(@12) #'h#86040:Type u#(@14) projectee#86041:(FStar.Pervasives.Native.tuple8<@15, @14, @13, @12, @11, @10, @9, @8> 'a@7:(Tm_type) 'b@6:(Tm_type) 'c@5:(Tm_type) 'd@4:(Tm_type) 'e@3:(Tm_type) 'f@2:(Tm_type) 'g@1:(Tm_type) 'h@0:(Tm_type)) -> (((match projectee@0:(Tm_delayed) with
	| (FStar.Pervasives.Native.Mktuple8 #.'a#55227:Type u#(@9) #.'b#55228:Type u#(@10) #.'c#55229:Type u#(@11) #.'d#55230:Type u#(@12) #.'e#55231:Type u#(@13) #.'f#55232:Type u#(@14) #.'g#55233:Type u#(@15) #.'h#55234:Type u#(@16) Pat_wild _1#86042 Pat_wild _2#86043 Pat_wild _3#86044 Pat_wild _4#86045 Pat_wild _5#86046 Pat_wild _6#86047 Pat_wild _7#86048 _8#86049:'h@8:(Tm_type))  -> _8@0:(Tm_name: 'h#86040)) <ascribed: [Prims.PURE] 'h@1:(Tm_type) ) $$ (residual) Prims.Tot 'h@1:(Tm_type)))

Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
let FStar.Pervasives.id : (#a#374:Type u#(@0) -> x#375:a@0:(Tm_type) -> Tot a@1:(Tm_type))
Checked: [@(FStar.Pervasives.Comment "")]
visible let  FStar.Pervasives.id <uu___367> : (#a#378:Type u#(@0) -> x#379:a@0:(Tm_type) -> Tot a@1:(Tm_type)) = (fun #a#380:Type u#(@0) x#381:a@0:(Tm_type) -> (x@0:(Tm_name: a#380) $$ (residual) Prims.Tot a@1:(Tm_type)))

Checked: [@(FStar.Pervasives.Comment "")]
new_effect { FStar.Pervasives.DIV<uu___933>  : (a#936:Type u#(@0) -> wp#937:(Prims.pure_wp<@1> a@0:(Tm_type)) -> Tot<0> Effect) 
  return_wp   = <>Prims.pure_return<@0>
; bind_wp     = <uu___566>Prims.pure_bind_wp<@0, @1>
; if_then_else= <>Prims.pure_if_then_else<@0>
; ite_wp      = <>Prims.pure_ite_wp<@0>
; stronger    = <>Prims.pure_stronger<@0>
; close_wp    = <uu___778>Prims.pure_close_wp<@0, @1>
; assert_p    = <>Prims.pure_assert_p<@0>
; assume_p    = <>Prims.pure_assume_p<@0>
; null_wp     = <>Prims.pure_null_wp<@0>
; trivial     = <>Prims.pure_trivial<@0>
; repr        = Tm_unknown
; bind_repr   = <>Tm_unknown
; return_repr = <>Tm_unknown
and effect_actions
	
}


Checked: [@(FStar.Pervasives.Comment "")]
sub_effect Prims.PURE ~> FStar.Pervasives.DIV : <uu___963> Prims.purewp_id<uu___963>

Checked: [@(FStar.Pervasives.Comment "")]
effect FStar.Pervasives.Div<uu___1136> a#1144:Type u#(uu___1136) pre#1145:Prims.pure_pre post#1146:(Prims.pure_post'<0, uu___1136> a@1:(Tm_type) pre@0:(Tm_fvar: Prims.pure_pre)) = FStar.Pervasives.DIV<uu___1136> (a@2:(Tm_type)) (fun p#1147:(Prims.pure_post<uu___1136> a@2:(Tm_type)) -> ((Prims.l_and pre@2:(Tm_fvar: Prims.pure_pre) (Prims.l_Forall<uu___1136> #(uu___6#1043:a@3:(Tm_type){(Prims.l_and pre@3:(Tm_fvar: Prims.pure_pre) Prims.l_True)}) (fun a#1149:(uu___6#1043:a@3:(Tm_type){(Prims.l_and pre@3:(Tm_fvar: Prims.pure_pre) Prims.l_True)}) -> ((Prims.l_imp (post@2:(Tm_delayed) a@0:(Tm_delayed)) (p@1:(Tm_delayed) a@0:(Tm_delayed))) $$ (residual) Prims.GTot Type u#(0))))) $$ (residual) Prims.GTot Prims.pure_pre)) (attributes )

Checked: [@(FStar.Pervasives.Comment "")]
effect FStar.Pervasives.Dv<uu___1209> a#1213:Type u#(uu___1209) = FStar.Pervasives.DIV<uu___1209> (a@0:(Tm_type)) (fun p#1214:(Prims.pure_post<uu___1209> a@0:(Tm_type)) -> ((Prims.l_Forall<uu___1209> #a@1:(Tm_type) (fun x#1215:a@1:(Tm_type) -> ((p@1:(Tm_delayed) x@0:(Tm_name: a#1213)) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.GTot Prims.pure_pre)) (attributes )

Checked: [@(FStar.Pervasives.Comment "")]
effect FStar.Pervasives.EXT<uu___1227> a#1229:Type u#(uu___1227) = FStar.Pervasives.Dv<uu___1227> (a@0:(Tm_type))  (attributes )

let FStar.Pervasives.st_pre_h : (heap#1247:Type u#(@0) -> Tot Type u#((max 1, @1)))
Checked: [@(FStar.Pervasives.Comment "")]
visible let  FStar.Pervasives.st_pre_h <uu___1242> : (heap#1249:Type u#(@0) -> Tot Type u#((max 1, @1))) = (fun heap#1250:Type u#(@0) -> ((uu___#1251:heap@0:(Tm_type) -> GTot<1> Type u#(0)) $$ (residual) Prims.Tot Type u#((max 1, @1))))

let FStar.Pervasives.st_post_h' : (heap#1321:Type u#(@0) -> a#1322:Type u#(@2) -> pre#1323:Type u#(@4) -> Tot Type u#((max 1, @4, @3)))
Checked: [@(FStar.Pervasives.Comment "")]
visible let  FStar.Pervasives.st_post_h' <uu___1306, uu___1307, uu___1308> : (heap#1327:Type u#(@0) -> a#1328:Type u#(@2) -> pre#1329:Type u#(@4) -> Tot Type u#((max 1, @4, @3))) = (fun heap#1330:Type u#(@0) a#1331:Type u#(@2) pre#1332:Type u#(@4) -> ((uu___#1333:a@1:(Tm_type) -> uu___7#1334:(uu___7#1276:heap@3:(Tm_type){pre@2:(Tm_type)}) -> GTot<1> Type u#(0)) $$ (residual) Prims.Tot Type u#((max 1, @4, @3))))

let FStar.Pervasives.st_post_h : (heap#1384:Type u#(@0) -> a#1385:Type u#(@2) -> Tot Type u#((max 1, @3, @2)))
Checked: [@(FStar.Pervasives.Comment "")]
visible let  FStar.Pervasives.st_post_h <uu___1376, uu___1377> : (heap#1388:Type u#(@0) -> a#1389:Type u#(@2) -> Tot Type u#((max 1, @3, @2))) = (fun heap#1390:Type u#(@0) a#1391:Type u#(@2) -> ((FStar.Pervasives.st_post_h'<0, @3, @2> heap@1:(Tm_type) a@0:(Tm_type) Prims.l_True) $$ (residual) Prims.Tot Type u#((max 1, @3, @2))))

let FStar.Pervasives.st_wp_h : (heap#1447:Type u#(@0) -> a#1448:Type u#(@2) -> Tot Type u#((max 1, @3, @2)))
Checked: [@(FStar.Pervasives.Comment "")]
visible let  FStar.Pervasives.st_wp_h <uu___1438, uu___1439> : (heap#1451:Type u#(@0) -> a#1452:Type u#(@2) -> Tot Type u#((max 1, @3, @2))) = (fun heap#1453:Type u#(@0) a#1454:Type u#(@2) -> ((uu___#1455:(FStar.Pervasives.st_post_h<@3, @2> heap@1:(Tm_type) a@0:(Tm_type)) -> Tot<(max 1, @3)> (FStar.Pervasives.st_pre_h<@3> heap@2:(Tm_type))) $$ (residual) Prims.Tot Type u#((max 1, @3, @2))))

let FStar.Pervasives.st_return : (heap#1532:Type u#(@0) -> a#1533:Type u#(@2) -> x#1534:a@0:(Tm_type) -> p#1535:(FStar.Pervasives.st_post_h<@4, @3> heap@2:(Tm_type) a@1:(Tm_type)) -> Tot (uu___7#1536:(uu___7#1276:heap@3:(Tm_type){Prims.l_True}) -> GTot<1> Type u#(0)))
Checked: [@(FStar.Pervasives.Comment "")]
unfold let  FStar.Pervasives.st_return <uu___1514, uu___1515> : (heap#1543:Type u#(@0) -> a#1544:Type u#(@2) -> x#1545:a@0:(Tm_type) -> p#1546:(FStar.Pervasives.st_post_h<@4, @3> heap@2:(Tm_type) a@1:(Tm_type)) -> Tot (uu___7#1547:(uu___7#1276:heap@3:(Tm_type){Prims.l_True}) -> GTot<1> Type u#(0))) = (fun heap#1549:Type u#(@0) a#1550:Type u#(@2) x#1551:a@0:(Tm_type) p#1552:(FStar.Pervasives.st_post_h<@4, @3> heap@2:(Tm_type) a@1:(Tm_type)) -> ((p@0:(Tm_delayed) x@1:(Tm_name: a#1550)) $$ (residual) Prims.Tot (uu___7#1555:(uu___7#1276:heap@3:(Tm_type){Prims.l_True}) -> GTot<1> Type u#(0))))

let FStar.Pervasives.st_bind_wp : (heap#1843:Type u#(@0) -> r1#1844:Prims.range -> a#1845:Type u#(@3) -> b#1846:Type u#(@5) -> wp1#1847:(FStar.Pervasives.st_wp_h<@5, @4> heap@3:(Tm_type) a@1:(Tm_type)) -> wp2#1848:(uu___#1851:a@2:(Tm_type) -> GTot<(max 1, @8, @6)> (FStar.Pervasives.st_wp_h<@8, @6> heap@5:(Tm_type) b@2:(Tm_type))) -> p#1849:(FStar.Pervasives.st_post_h<@8, @6> heap@5:(Tm_type) b@2:(Tm_type)) -> h0#1850:heap@6:(Tm_type) -> Tot Type u#(0))
Checked: [@(FStar.Pervasives.Comment "")]
unfold let  FStar.Pervasives.st_bind_wp <uu___1811, uu___1812, uu___1813> : (heap#1860:Type u#(@0) -> r1#1861:Prims.range -> a#1862:Type u#(@3) -> b#1863:Type u#(@5) -> wp1#1864:(FStar.Pervasives.st_wp_h<@5, @4> heap@3:(Tm_type) a@1:(Tm_type)) -> wp2#1865:(uu___#1868:a@2:(Tm_type) -> GTot<(max 1, @8, @6)> (FStar.Pervasives.st_wp_h<@8, @6> heap@5:(Tm_type) b@2:(Tm_type))) -> p#1866:(FStar.Pervasives.st_post_h<@8, @6> heap@5:(Tm_type) b@2:(Tm_type)) -> h0#1867:heap@6:(Tm_type) -> Tot Type u#(0)) = (fun heap#1869:Type u#(@0) r1#1870:Prims.range a#1871:Type u#(@3) b#1872:Type u#(@5) wp1#1873:(FStar.Pervasives.st_wp_h<@5, @4> heap@3:(Tm_type) a@1:(Tm_type)) wp2#1874:(uu___#1880:a@2:(Tm_type) -> GTot<(max 1, @8, @6)> (FStar.Pervasives.st_wp_h<@8, @6> heap@5:(Tm_type) b@2:(Tm_type))) p#1875:(FStar.Pervasives.st_post_h<@8, @6> heap@5:(Tm_type) b@2:(Tm_type)) h0#1876:heap@6:(Tm_type) -> ((wp1@3:(Tm_delayed) (fun a#1877:a@5:(Tm_type) h1#1878:(uu___7#1276:heap@8:(Tm_type){Prims.l_True}) -> ((wp2@4:(Tm_delayed) a@1:(Tm_name: a#1871) p@3:(Tm_delayed) h1@0:(Tm_delayed)) $$ (residual) Prims.GTot Type u#(0))) h0@0:(Tm_name: heap#1869)) $$ (residual) Prims.Tot Type u#(0)))

let FStar.Pervasives.st_if_then_else : (heap#2130:Type u#(@0) -> a#2131:Type u#(@2) -> p#2132:Type u#(0) -> wp_then#2133:(FStar.Pervasives.st_wp_h<@4, @3> heap@2:(Tm_type) a@1:(Tm_type)) -> wp_else#2134:(FStar.Pervasives.st_wp_h<@5, @4> heap@3:(Tm_type) a@2:(Tm_type)) -> post#2135:(FStar.Pervasives.st_post_h<@6, @5> heap@4:(Tm_type) a@3:(Tm_type)) -> h0#2136:heap@5:(Tm_type) -> Tot Type u#(0))
Checked: [@(FStar.Pervasives.Comment "")]
unfold let  FStar.Pervasives.st_if_then_else <uu___2107, uu___2108> : (heap#2144:Type u#(@0) -> a#2145:Type u#(@2) -> p#2146:Type u#(0) -> wp_then#2147:(FStar.Pervasives.st_wp_h<@4, @3> heap@2:(Tm_type) a@1:(Tm_type)) -> wp_else#2148:(FStar.Pervasives.st_wp_h<@5, @4> heap@3:(Tm_type) a@2:(Tm_type)) -> post#2149:(FStar.Pervasives.st_post_h<@6, @5> heap@4:(Tm_type) a@3:(Tm_type)) -> h0#2150:heap@5:(Tm_type) -> Tot Type u#(0)) = (fun heap#2151:Type u#(@0) a#2152:Type u#(@2) p#2153:Type u#(0) wp_then#2154:(FStar.Pervasives.st_wp_h<@4, @3> heap@2:(Tm_type) a@1:(Tm_type)) wp_else#2155:(FStar.Pervasives.st_wp_h<@5, @4> heap@3:(Tm_type) a@2:(Tm_type)) post#2156:(FStar.Pervasives.st_post_h<@6, @5> heap@4:(Tm_type) a@3:(Tm_type)) h0#2157:heap@5:(Tm_type) -> ((Prims.l_ITE p@4:(Tm_type) (wp_then@3:(Tm_delayed) post@1:(Tm_delayed) h0@0:(Tm_name: heap#2151)) (wp_else@2:(Tm_delayed) post@1:(Tm_delayed) h0@0:(Tm_name: heap#2151))) $$ (residual) Prims.Tot Type u#(0)))

let FStar.Pervasives.st_ite_wp : (heap#2600:Type u#(@0) -> a#2601:Type u#(@2) -> wp#2602:(FStar.Pervasives.st_wp_h<@3, @2> heap@1:(Tm_type) a@0:(Tm_type)) -> post#2603:(FStar.Pervasives.st_post_h<@4, @3> heap@2:(Tm_type) a@1:(Tm_type)) -> h0#2604:heap@3:(Tm_type) -> Tot Type u#(0))
Checked: [@(FStar.Pervasives.Comment "")]
logic unfold let  FStar.Pervasives.st_ite_wp <uu___2580, uu___2581> : (heap#2610:Type u#(@0) -> a#2611:Type u#(@2) -> wp#2612:(FStar.Pervasives.st_wp_h<@3, @2> heap@1:(Tm_type) a@0:(Tm_type)) -> post#2613:(FStar.Pervasives.st_post_h<@4, @3> heap@2:(Tm_type) a@1:(Tm_type)) -> h0#2614:heap@3:(Tm_type) -> Tot Type u#(0)) = (fun heap#2615:Type u#(@0) a#2616:Type u#(@2) wp#2617:(FStar.Pervasives.st_wp_h<@3, @2> heap@1:(Tm_type) a@0:(Tm_type)) post#2618:(FStar.Pervasives.st_post_h<@4, @3> heap@2:(Tm_type) a@1:(Tm_type)) h0#2619:heap@3:(Tm_type) -> ((Prims.l_Forall<(max 1, @6, @5)> #(FStar.Pervasives.st_post_h<@6, @5> heap@4:(Tm_type) a@3:(Tm_type)) (fun k#2620:(FStar.Pervasives.st_post_h<@6, @5> heap@4:(Tm_type) a@3:(Tm_type)) -> ((Prims.l_imp (Prims.l_Forall<@7> #a@4:(Tm_type) (fun x#2621:a@4:(Tm_type) -> ((Prims.l_Forall<@7> #heap@6:(Tm_type) (fun h#2622:heap@6:(Tm_type) -> ({:pattern (Prims.guard_free (k@2:(Tm_delayed) x@1:(Tm_name: a#2616) h@0:(Tm_name: heap#2615)))} (Prims.l_iff (k@2:(Tm_delayed) x@1:(Tm_name: a#2616) h@0:(Tm_name: heap#2615)) (post@4:(Tm_delayed) x@1:(Tm_name: a#2616) h@0:(Tm_name: heap#2615))) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.GTot Type u#(0)))) (wp@3:(Tm_delayed) k@0:(Tm_delayed) h0@1:(Tm_name: heap#2615))) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.Tot Type u#(0)))

let FStar.Pervasives.st_stronger : (heap#2868:Type u#(@0) -> a#2869:Type u#(@2) -> wp1#2870:(FStar.Pervasives.st_wp_h<@3, @2> heap@1:(Tm_type) a@0:(Tm_type)) -> wp2#2871:(FStar.Pervasives.st_wp_h<@4, @3> heap@2:(Tm_type) a@1:(Tm_type)) -> Tot Type u#(0))
Checked: [@(FStar.Pervasives.Comment "")]
logic unfold let  FStar.Pervasives.st_stronger <uu___2852, uu___2853> : (heap#2876:Type u#(@0) -> a#2877:Type u#(@2) -> wp1#2878:(FStar.Pervasives.st_wp_h<@3, @2> heap@1:(Tm_type) a@0:(Tm_type)) -> wp2#2879:(FStar.Pervasives.st_wp_h<@4, @3> heap@2:(Tm_type) a@1:(Tm_type)) -> Tot Type u#(0)) = (fun heap#2880:Type u#(@0) a#2881:Type u#(@2) wp1#2882:(FStar.Pervasives.st_wp_h<@3, @2> heap@1:(Tm_type) a@0:(Tm_type)) wp2#2883:(FStar.Pervasives.st_wp_h<@4, @3> heap@2:(Tm_type) a@1:(Tm_type)) -> ((Prims.l_Forall<(max 1, @5, @4)> #(FStar.Pervasives.st_post_h<@5, @4> heap@3:(Tm_type) a@2:(Tm_type)) (fun p#2884:(FStar.Pervasives.st_post_h<@5, @4> heap@3:(Tm_type) a@2:(Tm_type)) -> ((Prims.l_Forall<@5> #heap@4:(Tm_type) (fun h#2885:heap@4:(Tm_type) -> ((Prims.l_imp (wp1@3:(Tm_delayed) p@1:(Tm_delayed) h@0:(Tm_name: heap#2880)) (wp2@2:(Tm_delayed) p@1:(Tm_delayed) h@0:(Tm_name: heap#2880))) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.Tot Type u#(0)))

let FStar.Pervasives.st_close_wp : (heap#3103:Type u#(@0) -> a#3104:Type u#(@2) -> b#3105:Type u#(@4) -> wp#3106:(uu___#3109:b@0:(Tm_type) -> GTot<(max 1, @5, @4)> (FStar.Pervasives.st_wp_h<@5, @4> heap@3:(Tm_type) a@2:(Tm_type))) -> p#3107:(FStar.Pervasives.st_post_h<@5, @4> heap@3:(Tm_type) a@2:(Tm_type)) -> h#3108:heap@4:(Tm_type) -> Tot Type u#(0))
Checked: [@(FStar.Pervasives.Comment "")]
logic unfold let  FStar.Pervasives.st_close_wp <uu___3079, uu___3080, uu___3081> : (heap#3116:Type u#(@0) -> a#3117:Type u#(@2) -> b#3118:Type u#(@4) -> wp#3119:(uu___#3122:b@0:(Tm_type) -> GTot<(max 1, @5, @4)> (FStar.Pervasives.st_wp_h<@5, @4> heap@3:(Tm_type) a@2:(Tm_type))) -> p#3120:(FStar.Pervasives.st_post_h<@5, @4> heap@3:(Tm_type) a@2:(Tm_type)) -> h#3121:heap@4:(Tm_type) -> Tot Type u#(0)) = (fun heap#3123:Type u#(@0) a#3124:Type u#(@2) b#3125:Type u#(@4) wp#3126:(uu___#3130:b@0:(Tm_type) -> GTot<(max 1, @5, @4)> (FStar.Pervasives.st_wp_h<@5, @4> heap@3:(Tm_type) a@2:(Tm_type))) p#3127:(FStar.Pervasives.st_post_h<@5, @4> heap@3:(Tm_type) a@2:(Tm_type)) h#3128:heap@4:(Tm_type) -> ((Prims.l_Forall<@8> #b@3:(Tm_type) (fun b#3129:b@3:(Tm_type) -> ((wp@3:(Tm_delayed) b@0:(Tm_name: b#3125) p@2:(Tm_delayed) h@1:(Tm_name: heap#3123)) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.Tot Type u#(0)))

let FStar.Pervasives.st_assert_p : (heap#3296:Type u#(@0) -> a#3297:Type u#(@2) -> p#3298:Type u#(0) -> wp#3299:(FStar.Pervasives.st_wp_h<@4, @3> heap@2:(Tm_type) a@1:(Tm_type)) -> q#3300:(FStar.Pervasives.st_post_h<@5, @4> heap@3:(Tm_type) a@2:(Tm_type)) -> h#3301:heap@4:(Tm_type) -> Tot Type u#(0))
Checked: [@(FStar.Pervasives.Comment "")]
logic unfold let  FStar.Pervasives.st_assert_p <uu___3276, uu___3277> : (heap#3308:Type u#(@0) -> a#3309:Type u#(@2) -> p#3310:Type u#(0) -> wp#3311:(FStar.Pervasives.st_wp_h<@4, @3> heap@2:(Tm_type) a@1:(Tm_type)) -> q#3312:(FStar.Pervasives.st_post_h<@5, @4> heap@3:(Tm_type) a@2:(Tm_type)) -> h#3313:heap@4:(Tm_type) -> Tot Type u#(0)) = (fun heap#3314:Type u#(@0) a#3315:Type u#(@2) p#3316:Type u#(0) wp#3317:(FStar.Pervasives.st_wp_h<@4, @3> heap@2:(Tm_type) a@1:(Tm_type)) q#3318:(FStar.Pervasives.st_post_h<@5, @4> heap@3:(Tm_type) a@2:(Tm_type)) h#3319:heap@4:(Tm_type) -> ((Prims.l_and p@3:(Tm_type) (wp@2:(Tm_delayed) q@1:(Tm_delayed) h@0:(Tm_name: heap#3314))) $$ (residual) Prims.Tot Type u#(0)))

let FStar.Pervasives.st_assume_p : (heap#3477:Type u#(@0) -> a#3478:Type u#(@2) -> p#3479:Type u#(0) -> wp#3480:(FStar.Pervasives.st_wp_h<@4, @3> heap@2:(Tm_type) a@1:(Tm_type)) -> q#3481:(FStar.Pervasives.st_post_h<@5, @4> heap@3:(Tm_type) a@2:(Tm_type)) -> h#3482:heap@4:(Tm_type) -> Tot Type u#(0))
Checked: [@(FStar.Pervasives.Comment "")]
logic unfold let  FStar.Pervasives.st_assume_p <uu___3457, uu___3458> : (heap#3489:Type u#(@0) -> a#3490:Type u#(@2) -> p#3491:Type u#(0) -> wp#3492:(FStar.Pervasives.st_wp_h<@4, @3> heap@2:(Tm_type) a@1:(Tm_type)) -> q#3493:(FStar.Pervasives.st_post_h<@5, @4> heap@3:(Tm_type) a@2:(Tm_type)) -> h#3494:heap@4:(Tm_type) -> Tot Type u#(0)) = (fun heap#3495:Type u#(@0) a#3496:Type u#(@2) p#3497:Type u#(0) wp#3498:(FStar.Pervasives.st_wp_h<@4, @3> heap@2:(Tm_type) a@1:(Tm_type)) q#3499:(FStar.Pervasives.st_post_h<@5, @4> heap@3:(Tm_type) a@2:(Tm_type)) h#3500:heap@4:(Tm_type) -> ((Prims.l_imp p@3:(Tm_type) (wp@2:(Tm_delayed) q@1:(Tm_delayed) h@0:(Tm_name: heap#3495))) $$ (residual) Prims.Tot Type u#(0)))

let FStar.Pervasives.st_null_wp : (heap#3676:Type u#(@0) -> a#3677:Type u#(@2) -> p#3678:(FStar.Pervasives.st_post_h<@3, @2> heap@1:(Tm_type) a@0:(Tm_type)) -> h#3679:heap@2:(Tm_type) -> Tot Type u#(0))
Checked: [@(FStar.Pervasives.Comment "")]
logic unfold let  FStar.Pervasives.st_null_wp <uu___3660, uu___3661> : (heap#3684:Type u#(@0) -> a#3685:Type u#(@2) -> p#3686:(FStar.Pervasives.st_post_h<@3, @2> heap@1:(Tm_type) a@0:(Tm_type)) -> h#3687:heap@2:(Tm_type) -> Tot Type u#(0)) = (fun heap#3688:Type u#(@0) a#3689:Type u#(@2) p#3690:(FStar.Pervasives.st_post_h<@3, @2> heap@1:(Tm_type) a@0:(Tm_type)) h#3691:heap@2:(Tm_type) -> ((Prims.l_Forall<@5> #a@2:(Tm_type) (fun x#3692:a@2:(Tm_type) -> ((Prims.l_Forall<@5> #heap@4:(Tm_type) (fun h#3693:heap@4:(Tm_type) -> ((p@3:(Tm_delayed) x@1:(Tm_name: a#3689) h@0:(Tm_name: heap#3688)) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.Tot Type u#(0)))

let FStar.Pervasives.st_trivial : (heap#3810:Type u#(@0) -> a#3811:Type u#(@2) -> wp#3812:(FStar.Pervasives.st_wp_h<@3, @2> heap@1:(Tm_type) a@0:(Tm_type)) -> Tot Type u#(0))
Checked: [@(FStar.Pervasives.Comment "")]
logic unfold let  FStar.Pervasives.st_trivial <uu___3795, uu___3796> : (heap#3816:Type u#(@0) -> a#3817:Type u#(@2) -> wp#3818:(FStar.Pervasives.st_wp_h<@3, @2> heap@1:(Tm_type) a@0:(Tm_type)) -> Tot Type u#(0)) = (fun heap#3819:Type u#(@0) a#3820:Type u#(@2) wp#3821:(FStar.Pervasives.st_wp_h<@3, @2> heap@1:(Tm_type) a@0:(Tm_type)) -> ((Prims.l_Forall<@3> #heap@2:(Tm_type) (fun h0#3822:heap@2:(Tm_type) -> ((wp@1:(Tm_delayed) (fun r#3823:a@2:(Tm_type) h1#3824:(uu___7#1276:heap@4:(Tm_type){Prims.l_True}) -> (Prims.l_True $$ (residual) Prims.GTot Type u#(0))) h0@0:(Tm_name: heap#3819)) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.Tot Type u#(0)))

Checked: [@(FStar.Pervasives.Comment "")]
new_effect { FStar.Pervasives.STATE_h<uu___4667, uu___4668> heap#4672:Type u#(@0) : (result#4673:Type u#(@2) -> wp#4674:(FStar.Pervasives.st_wp_h<@3, @2> heap@1:(Tm_type) result@0:(Tm_type)) -> Tot<0> Effect) 
  return_wp   = <>(FStar.Pervasives.st_return<@1, @0> heap@0:(Tm_type))
; bind_wp     = <uu___4120>(FStar.Pervasives.st_bind_wp<@0, @2, @1> heap@1:(Tm_type))
; if_then_else= <>(FStar.Pervasives.st_if_then_else<@1, @0> heap@0:(Tm_type))
; ite_wp      = <>(FStar.Pervasives.st_ite_wp<@1, @0> heap@0:(Tm_type))
; stronger    = <>(FStar.Pervasives.st_stronger<@1, @0> heap@0:(Tm_type))
; close_wp    = <uu___4427>(FStar.Pervasives.st_close_wp<@0, @2, @1> heap@1:(Tm_type))
; assert_p    = <>(FStar.Pervasives.st_assert_p<@1, @0> heap@0:(Tm_type))
; assume_p    = <>(FStar.Pervasives.st_assume_p<@1, @0> heap@0:(Tm_type))
; null_wp     = <>(FStar.Pervasives.st_null_wp<@1, @0> heap@0:(Tm_type))
; trivial     = <>(FStar.Pervasives.st_trivial<@1, @0> heap@0:(Tm_type))
; repr        = Tm_unknown
; bind_repr   = <>Tm_unknown
; return_repr = <>Tm_unknown
and effect_actions
	
}


Checked: noeq type FStar.Pervasives.result a#4772:Type u#(@0) : Type u#(@1)
datacon<uu___4722> FStar.Pervasives.V : (#.a#4773:Type u#(@0) -> v#4774:a@0:(Tm_type) -> Tot (FStar.Pervasives.result<@2> a@1:(Tm_type)))
datacon<uu___4722> FStar.Pervasives.E : (#.a#4775:Type u#(@0) -> e#4776:Prims.exn -> Tot (FStar.Pervasives.result<@2> a@1:(Tm_type)))
datacon<uu___4722> FStar.Pervasives.Err : (#.a#4777:Type u#(@0) -> msg#4778:Prims.string -> Tot (FStar.Pervasives.result<@2> a@1:(Tm_type)))

Checked: (Discriminator FStar.Pervasives.V) val FStar.Pervasives.uu___is_V <uu___4722> : (#a#4865:Type u#(uu___4722) -> projectee#4866:(FStar.Pervasives.result<uu___4722> a@0:(Tm_type)) -> Tot<0> Prims.bool)


Checked: visible (Discriminator FStar.Pervasives.V) let  FStar.Pervasives.uu___is_V <uu___4722> : (#a#4984:Type u#(@0) -> projectee#4985:(FStar.Pervasives.result<@1> a@0:(Tm_type)) -> Tot<0> Prims.bool) = (fun #a#4986:Type u#(@0) projectee#4987:(FStar.Pervasives.result<@1> a@0:(Tm_type)) -> (((match projectee@0:(Tm_delayed) with
	| (FStar.Pervasives.V #.a#4743:Type u#(@2) Pat_wild v#4988)  -> true
	|Pat_wild uu___#4989  -> false) <ascribed: [Prims.PURE] Prims.bool ) $$ (residual) Prims.Tot Prims.bool))

Checked: [@FStar.Pervasives.Substitute]
(Projector FStar.Pervasives.V v) val FStar.Pervasives.__proj__V__item__v <uu___4722> : (#a#5038:Type u#(uu___4722) -> projectee#5039:(uu___#4994:(FStar.Pervasives.result<uu___4722> a@0:(Tm_type)){(Prims.b2t (FStar.Pervasives.uu___is_V<uu___4722> #a@1:(Tm_type) uu___@0:(Tm_delayed)))}) -> Tot<uu___4722> a@1:(Tm_type))


Checked: [@FStar.Pervasives.Substitute]
visible (Projector FStar.Pervasives.V v) let  FStar.Pervasives.__proj__V__item__v <uu___4722> : (#a#5211:Type u#(@0) -> projectee#5212:(uu___#4994:(FStar.Pervasives.result<@1> a@0:(Tm_type)){(Prims.b2t (FStar.Pervasives.uu___is_V<@2> #a@1:(Tm_type) uu___@0:(Tm_delayed)))}) -> Tot<@2> a@1:(Tm_type)) = (fun #a#5214:Type u#(@0) projectee#5215:(uu___#5064:(FStar.Pervasives.result<@1> a@0:(Tm_type)){(Prims.b2t (FStar.Pervasives.uu___is_V<@2> #a@1:(Tm_type) uu___@0:(Tm_delayed)))}) -> (((match projectee@0:(Tm_delayed) with
	| (FStar.Pervasives.V #.a#4747:Type u#(@2) v#5216:a@1:(Tm_type))  -> v@0:(Tm_name: a#5214)) <ascribed: [Prims.PURE] a@1:(Tm_type) ) $$ (residual) Prims.Tot a@1:(Tm_type)))

Checked: (Discriminator FStar.Pervasives.E) val FStar.Pervasives.uu___is_E <uu___4722> : (#a#5237:Type u#(uu___4722) -> projectee#5238:(FStar.Pervasives.result<uu___4722> a@0:(Tm_type)) -> Tot<0> Prims.bool)


Checked: visible (Discriminator FStar.Pervasives.E) let  FStar.Pervasives.uu___is_E <uu___4722> : (#a#5343:Type u#(@0) -> projectee#5344:(FStar.Pervasives.result<@1> a@0:(Tm_type)) -> Tot<0> Prims.bool) = (fun #a#5345:Type u#(@0) projectee#5346:(FStar.Pervasives.result<@1> a@0:(Tm_type)) -> (((match projectee@0:(Tm_delayed) with
	| (FStar.Pervasives.E #.a#4753:Type u#(@2) Pat_wild e#5347)  -> true
	|Pat_wild uu___#5348  -> false) <ascribed: [Prims.PURE] Prims.bool ) $$ (residual) Prims.Tot Prims.bool))

Checked: [@FStar.Pervasives.Substitute]
(Projector FStar.Pervasives.E e) val FStar.Pervasives.__proj__E__item__e <uu___4722> : (#a#5397:Type u#(uu___4722) -> projectee#5398:(uu___#5353:(FStar.Pervasives.result<uu___4722> a@0:(Tm_type)){(Prims.b2t (FStar.Pervasives.uu___is_E<uu___4722> #a@1:(Tm_type) uu___@0:(Tm_delayed)))}) -> Tot<0> Prims.exn)


Checked: [@FStar.Pervasives.Substitute]
visible (Projector FStar.Pervasives.E e) let  FStar.Pervasives.__proj__E__item__e <uu___4722> : (#a#5554:Type u#(@0) -> projectee#5555:(uu___#5353:(FStar.Pervasives.result<@1> a@0:(Tm_type)){(Prims.b2t (FStar.Pervasives.uu___is_E<@2> #a@1:(Tm_type) uu___@0:(Tm_delayed)))}) -> Tot<0> Prims.exn) = (fun #a#5557:Type u#(@0) projectee#5558:(uu___#5423:(FStar.Pervasives.result<@1> a@0:(Tm_type)){(Prims.b2t (FStar.Pervasives.uu___is_E<@2> #a@1:(Tm_type) uu___@0:(Tm_delayed)))}) -> (((match projectee@0:(Tm_delayed) with
	| (FStar.Pervasives.E #.a#4757:Type u#(@2) e#5559:Prims.exn)  -> e@0:(Tm_fvar: Prims.exn)) <ascribed: [Prims.PURE] Prims.exn ) $$ (residual) Prims.Tot Prims.exn))

Checked: (Discriminator FStar.Pervasives.Err) val FStar.Pervasives.uu___is_Err <uu___4722> : (#a#5580:Type u#(uu___4722) -> projectee#5581:(FStar.Pervasives.result<uu___4722> a@0:(Tm_type)) -> Tot<0> Prims.bool)


Checked: visible (Discriminator FStar.Pervasives.Err) let  FStar.Pervasives.uu___is_Err <uu___4722> : (#a#5686:Type u#(@0) -> projectee#5687:(FStar.Pervasives.result<@1> a@0:(Tm_type)) -> Tot<0> Prims.bool) = (fun #a#5688:Type u#(@0) projectee#5689:(FStar.Pervasives.result<@1> a@0:(Tm_type)) -> (((match projectee@0:(Tm_delayed) with
	| (FStar.Pervasives.Err #.a#4763:Type u#(@2) Pat_wild msg#5690)  -> true
	|Pat_wild uu___#5691  -> false) <ascribed: [Prims.PURE] Prims.bool ) $$ (residual) Prims.Tot Prims.bool))

Checked: [@FStar.Pervasives.Substitute]
(Projector FStar.Pervasives.Err msg) val FStar.Pervasives.__proj__Err__item__msg <uu___4722> : (#a#5740:Type u#(uu___4722) -> projectee#5741:(uu___#5696:(FStar.Pervasives.result<uu___4722> a@0:(Tm_type)){(Prims.b2t (FStar.Pervasives.uu___is_Err<uu___4722> #a@1:(Tm_type) uu___@0:(Tm_delayed)))}) -> Tot<0> Prims.string)


Checked: [@FStar.Pervasives.Substitute]
visible (Projector FStar.Pervasives.Err msg) let  FStar.Pervasives.__proj__Err__item__msg <uu___4722> : (#a#5897:Type u#(@0) -> projectee#5898:(uu___#5696:(FStar.Pervasives.result<@1> a@0:(Tm_type)){(Prims.b2t (FStar.Pervasives.uu___is_Err<@2> #a@1:(Tm_type) uu___@0:(Tm_delayed)))}) -> Tot<0> Prims.string) = (fun #a#5900:Type u#(@0) projectee#5901:(uu___#5766:(FStar.Pervasives.result<@1> a@0:(Tm_type)){(Prims.b2t (FStar.Pervasives.uu___is_Err<@2> #a@1:(Tm_type) uu___@0:(Tm_delayed)))}) -> (((match projectee@0:(Tm_delayed) with
	| (FStar.Pervasives.Err #.a#4767:Type u#(@2) msg#5902:Prims.string)  -> msg@0:(Tm_fvar: Prims.string)) <ascribed: [Prims.PURE] Prims.string ) $$ (residual) Prims.Tot Prims.string))

Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
let FStar.Pervasives.ex_pre : Type u#(1)
Checked: [@(FStar.Pervasives.Comment "")]
visible let  FStar.Pervasives.ex_pre <> : Type u#(1) = Type u#(0)

let FStar.Pervasives.ex_post' : (a#5948:Type u#(@0) -> pre#5949:Type u#(@2) -> Tot Type u#((max 1, @2)))
Checked: [@(FStar.Pervasives.Comment "")]
visible let  FStar.Pervasives.ex_post' <uu___5938, uu___5939> : (a#5952:Type u#(@0) -> pre#5953:Type u#(@2) -> Tot Type u#((max 1, @2))) = (fun a#5954:Type u#(@0) pre#5955:Type u#(@2) -> ((uu___8#5956:(uu___8#5912:(FStar.Pervasives.result<@2> a@1:(Tm_type)){pre@1:(Tm_type)}) -> GTot<1> Type u#(0)) $$ (residual) Prims.Tot Type u#((max 1, @2))))

let FStar.Pervasives.ex_post : (a#5986:Type u#(@0) -> Tot Type u#((max 1, @1)))
Checked: [@(FStar.Pervasives.Comment "")]
visible let  FStar.Pervasives.ex_post <uu___5982> : (a#5988:Type u#(@0) -> Tot Type u#((max 1, @1))) = (fun a#5989:Type u#(@0) -> ((FStar.Pervasives.ex_post'<0, @1> a@0:(Tm_type) Prims.l_True) $$ (residual) Prims.Tot Type u#((max 1, @1))))

let FStar.Pervasives.ex_wp : (a#6017:Type u#(@0) -> Tot Type u#((max 1, @1)))
Checked: [@(FStar.Pervasives.Comment "")]
visible let  FStar.Pervasives.ex_wp <uu___6012> : (a#6019:Type u#(@0) -> Tot Type u#((max 1, @1))) = (fun a#6020:Type u#(@0) -> ((uu___#6021:(FStar.Pervasives.ex_post<@1> a@0:(Tm_type)) -> GTot<1> FStar.Pervasives.ex_pre) $$ (residual) Prims.Tot Type u#((max 1, @1))))

let FStar.Pervasives.ex_return : (a#6101:Type u#(@0) -> x#6102:a@0:(Tm_type) -> p#6103:(FStar.Pervasives.ex_post<@2> a@1:(Tm_type)) -> GTot<1> Type u#(0))
Checked: [@(FStar.Pervasives.Comment "")]
unfold let  FStar.Pervasives.ex_return <uu___6091> : (a#6107:Type u#(@0) -> x#6108:a@0:(Tm_type) -> p#6109:(FStar.Pervasives.ex_post<@2> a@1:(Tm_type)) -> GTot<1> Type u#(0)) = (fun a#6110:Type u#(@0) x#6111:a@0:(Tm_type) p#6112:(FStar.Pervasives.ex_post<@2> a@1:(Tm_type)) -> (((p@0:(Tm_delayed) (FStar.Pervasives.V<@3> #a@2:(Tm_type) x@1:(Tm_name: a#6110))) <ascribed: GTot<1> Type u#(0) ) $$ (residual) Prims.GTot Type u#(0)))

let FStar.Pervasives.ex_bind_wp : (r1#7470:Prims.range -> a#7471:Type u#(@1) -> b#7472:Type u#(@3) -> wp1#7473:(FStar.Pervasives.ex_wp<@3> a@1:(Tm_type)) -> wp2#7474:(uu___#7476:a@2:(Tm_type) -> GTot<(max 1, @6)> (FStar.Pervasives.ex_wp<@6> b@2:(Tm_type))) -> p#7475:(FStar.Pervasives.ex_post<@6> b@2:(Tm_type)) -> GTot<1> Type u#(0))
Checked: [@(FStar.Pervasives.Comment "")]
logic unfold let  FStar.Pervasives.ex_bind_wp <uu___7441, uu___7442> : (r1#7483:Prims.range -> a#7484:Type u#(@1) -> b#7485:Type u#(@3) -> wp1#7486:(FStar.Pervasives.ex_wp<@3> a@1:(Tm_type)) -> wp2#7487:(uu___#7489:a@2:(Tm_type) -> GTot<(max 1, @6)> (FStar.Pervasives.ex_wp<@6> b@2:(Tm_type))) -> p#7488:(FStar.Pervasives.ex_post<@6> b@2:(Tm_type)) -> GTot<1> Type u#(0)) = (fun r1#7490:Prims.range a#7491:Type u#(@1) b#7492:Type u#(@3) wp1#7493:(FStar.Pervasives.ex_wp<@3> a@1:(Tm_type)) wp2#7494:(uu___#7503:a@2:(Tm_type) -> GTot<(max 1, @6)> (FStar.Pervasives.ex_wp<@6> b@2:(Tm_type))) p#7495:(FStar.Pervasives.ex_post<@6> b@2:(Tm_type)) -> (((Prims.l_Forall<(max 1, @7)> #(FStar.Pervasives.ex_post<@7> b@3:(Tm_type)) (fun k#7496:(FStar.Pervasives.ex_post<@7> b@3:(Tm_type)) -> ((Prims.l_imp (Prims.l_Forall<@8> #(FStar.Pervasives.result<@8> b@4:(Tm_type)) (fun rb#7497:(FStar.Pervasives.result<@8> b@4:(Tm_type)) -> ({:pattern (Prims.guard_free (k@1:(Tm_delayed) rb@0:(Tm_delayed)))} (Prims.l_iff (k@1:(Tm_delayed) rb@0:(Tm_delayed)) (p@2:(Tm_delayed) rb@0:(Tm_delayed))) $$ (residual) Prims.GTot Type u#(0)))) (wp1@3:(Tm_delayed) (fun uu___9#7498:(uu___8#5912:(FStar.Pervasives.result<@7> a@5:(Tm_type)){Prims.l_True}) -> (((match uu___9@0:(Tm_delayed) with
	| (FStar.Pervasives.V #.uu___#6394:Type u#(@8) ra1#7499:a@6:(Tm_type))  -> (wp2@4:(Tm_delayed) ra1@0:(Tm_name: a#7491) k@2:(Tm_delayed))
	|(FStar.Pervasives.E #.uu___#6715:Type u#(@8) e#7500:Prims.exn)  -> (k@2:(Tm_delayed) (FStar.Pervasives.E<@10> #b@6:(Tm_type) e@0:(Tm_fvar: Prims.exn)))
	|(FStar.Pervasives.Err #.uu___#7011:Type u#(@8) m#7501:Prims.string)  -> (k@2:(Tm_delayed) (FStar.Pervasives.Err<@10> #b@6:(Tm_type) m@0:(Tm_fvar: Prims.string)))) <ascribed: [Prims.PURE] Type u#(0) ) $$ (residual) Prims.GTot Type u#(0))))) $$ (residual) Prims.GTot Type u#(0)))) <ascribed: GTot<1> Type u#(0) ) $$ (residual) Prims.GTot Type u#(0)))

let FStar.Pervasives.ex_ite_wp : (a#7795:Type u#(@0) -> wp#7796:(FStar.Pervasives.ex_wp<@1> a@0:(Tm_type)) -> post#7797:(FStar.Pervasives.ex_post<@2> a@1:(Tm_type)) -> Tot Type u#(0))
Checked: [@(FStar.Pervasives.Comment "")]
logic unfold let  FStar.Pervasives.ex_ite_wp <uu___7783> : (a#7801:Type u#(@0) -> wp#7802:(FStar.Pervasives.ex_wp<@1> a@0:(Tm_type)) -> post#7803:(FStar.Pervasives.ex_post<@2> a@1:(Tm_type)) -> Tot Type u#(0)) = (fun a#7804:Type u#(@0) wp#7805:(FStar.Pervasives.ex_wp<@1> a@0:(Tm_type)) post#7806:(FStar.Pervasives.ex_post<@2> a@1:(Tm_type)) -> ((Prims.l_Forall<(max 1, @3)> #(FStar.Pervasives.ex_post<@3> a@2:(Tm_type)) (fun k#7807:(FStar.Pervasives.ex_post<@3> a@2:(Tm_type)) -> ((Prims.l_imp (Prims.l_Forall<@4> #(FStar.Pervasives.result<@4> a@3:(Tm_type)) (fun rb#7808:(FStar.Pervasives.result<@4> a@3:(Tm_type)) -> ({:pattern (Prims.guard_free (k@1:(Tm_delayed) rb@0:(Tm_delayed)))} (Prims.l_iff (k@1:(Tm_delayed) rb@0:(Tm_delayed)) (post@2:(Tm_delayed) rb@0:(Tm_delayed))) $$ (residual) Prims.GTot Type u#(0)))) (wp@2:(Tm_delayed) k@0:(Tm_delayed))) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.Tot Type u#(0)))

let FStar.Pervasives.ex_if_then_else : (a#7936:Type u#(@0) -> p#7937:Type u#(0) -> wp_then#7938:(FStar.Pervasives.ex_wp<@2> a@1:(Tm_type)) -> wp_else#7939:(FStar.Pervasives.ex_wp<@3> a@2:(Tm_type)) -> post#7940:(FStar.Pervasives.ex_post<@4> a@3:(Tm_type)) -> Tot Type u#(0))
Checked: [@(FStar.Pervasives.Comment "")]
unfold let  FStar.Pervasives.ex_if_then_else <uu___7920> : (a#7946:Type u#(@0) -> p#7947:Type u#(0) -> wp_then#7948:(FStar.Pervasives.ex_wp<@2> a@1:(Tm_type)) -> wp_else#7949:(FStar.Pervasives.ex_wp<@3> a@2:(Tm_type)) -> post#7950:(FStar.Pervasives.ex_post<@4> a@3:(Tm_type)) -> Tot Type u#(0)) = (fun a#7951:Type u#(@0) p#7952:Type u#(0) wp_then#7953:(FStar.Pervasives.ex_wp<@2> a@1:(Tm_type)) wp_else#7954:(FStar.Pervasives.ex_wp<@3> a@2:(Tm_type)) post#7955:(FStar.Pervasives.ex_post<@4> a@3:(Tm_type)) -> ((Prims.l_ITE p@3:(Tm_type) (wp_then@2:(Tm_delayed) post@0:(Tm_delayed)) (wp_else@1:(Tm_delayed) post@0:(Tm_delayed))) $$ (residual) Prims.Tot Type u#(0)))

let FStar.Pervasives.ex_stronger : (a#8092:Type u#(@0) -> wp1#8093:(FStar.Pervasives.ex_wp<@1> a@0:(Tm_type)) -> wp2#8094:(FStar.Pervasives.ex_wp<@2> a@1:(Tm_type)) -> Tot Type u#(0))
Checked: [@(FStar.Pervasives.Comment "")]
logic unfold let  FStar.Pervasives.ex_stronger <uu___8081> : (a#8098:Type u#(@0) -> wp1#8099:(FStar.Pervasives.ex_wp<@1> a@0:(Tm_type)) -> wp2#8100:(FStar.Pervasives.ex_wp<@2> a@1:(Tm_type)) -> Tot Type u#(0)) = (fun a#8101:Type u#(@0) wp1#8102:(FStar.Pervasives.ex_wp<@1> a@0:(Tm_type)) wp2#8103:(FStar.Pervasives.ex_wp<@2> a@1:(Tm_type)) -> ((Prims.l_Forall<(max 1, @3)> #(FStar.Pervasives.ex_post<@3> a@2:(Tm_type)) (fun p#8104:(FStar.Pervasives.ex_post<@3> a@2:(Tm_type)) -> ((Prims.l_imp (wp1@2:(Tm_delayed) p@0:(Tm_delayed)) (wp2@1:(Tm_delayed) p@0:(Tm_delayed))) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.Tot Type u#(0)))

let FStar.Pervasives.ex_close_wp : (a#8240:Type u#(@0) -> b#8241:Type u#(@2) -> wp#8242:(uu___#8244:b@0:(Tm_type) -> GTot<(max 1, @3)> (FStar.Pervasives.ex_wp<@3> a@2:(Tm_type))) -> p#8243:(FStar.Pervasives.ex_post<@3> a@2:(Tm_type)) -> Tot Type u#(0))
Checked: [@(FStar.Pervasives.Comment "")]
logic unfold let  FStar.Pervasives.ex_close_wp <uu___8223, uu___8224> : (a#8249:Type u#(@0) -> b#8250:Type u#(@2) -> wp#8251:(uu___#8253:b@0:(Tm_type) -> GTot<(max 1, @3)> (FStar.Pervasives.ex_wp<@3> a@2:(Tm_type))) -> p#8252:(FStar.Pervasives.ex_post<@3> a@2:(Tm_type)) -> Tot Type u#(0)) = (fun a#8254:Type u#(@0) b#8255:Type u#(@2) wp#8256:(uu___#8259:b@0:(Tm_type) -> GTot<(max 1, @3)> (FStar.Pervasives.ex_wp<@3> a@2:(Tm_type))) p#8257:(FStar.Pervasives.ex_post<@3> a@2:(Tm_type)) -> ((Prims.l_Forall<@5> #b@2:(Tm_type) (fun b#8258:b@2:(Tm_type) -> ((wp@2:(Tm_delayed) b@0:(Tm_name: b#8255) p@1:(Tm_delayed)) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.Tot Type u#(0)))

let FStar.Pervasives.ex_assert_p : (a#8357:Type u#(@0) -> q#8358:Type u#(0) -> wp#8359:(FStar.Pervasives.ex_wp<@2> a@1:(Tm_type)) -> p#8360:(FStar.Pervasives.ex_post<@3> a@2:(Tm_type)) -> Tot Type u#(0))
Checked: [@(FStar.Pervasives.Comment "")]
logic unfold let  FStar.Pervasives.ex_assert_p <uu___8344> : (a#8365:Type u#(@0) -> q#8366:Type u#(0) -> wp#8367:(FStar.Pervasives.ex_wp<@2> a@1:(Tm_type)) -> p#8368:(FStar.Pervasives.ex_post<@3> a@2:(Tm_type)) -> Tot Type u#(0)) = (fun a#8369:Type u#(@0) q#8370:Type u#(0) wp#8371:(FStar.Pervasives.ex_wp<@2> a@1:(Tm_type)) p#8372:(FStar.Pervasives.ex_post<@3> a@2:(Tm_type)) -> ((Prims.l_and q@2:(Tm_type) (wp@1:(Tm_delayed) p@0:(Tm_delayed))) $$ (residual) Prims.Tot Type u#(0)))

let FStar.Pervasives.ex_assume_p : (a#8462:Type u#(@0) -> q#8463:Type u#(0) -> wp#8464:(FStar.Pervasives.ex_wp<@2> a@1:(Tm_type)) -> p#8465:(FStar.Pervasives.ex_post<@3> a@2:(Tm_type)) -> Tot Type u#(0))
Checked: [@(FStar.Pervasives.Comment "")]
logic unfold let  FStar.Pervasives.ex_assume_p <uu___8449> : (a#8470:Type u#(@0) -> q#8471:Type u#(0) -> wp#8472:(FStar.Pervasives.ex_wp<@2> a@1:(Tm_type)) -> p#8473:(FStar.Pervasives.ex_post<@3> a@2:(Tm_type)) -> Tot Type u#(0)) = (fun a#8474:Type u#(@0) q#8475:Type u#(0) wp#8476:(FStar.Pervasives.ex_wp<@2> a@1:(Tm_type)) p#8477:(FStar.Pervasives.ex_post<@3> a@2:(Tm_type)) -> ((Prims.l_imp q@2:(Tm_type) (wp@1:(Tm_delayed) p@0:(Tm_delayed))) $$ (residual) Prims.Tot Type u#(0)))

let FStar.Pervasives.ex_null_wp : (a#8562:Type u#(@0) -> p#8563:(FStar.Pervasives.ex_post<@1> a@0:(Tm_type)) -> Tot Type u#(0))
Checked: [@(FStar.Pervasives.Comment "")]
logic unfold let  FStar.Pervasives.ex_null_wp <uu___8554> : (a#8566:Type u#(@0) -> p#8567:(FStar.Pervasives.ex_post<@1> a@0:(Tm_type)) -> Tot Type u#(0)) = (fun a#8568:Type u#(@0) p#8569:(FStar.Pervasives.ex_post<@1> a@0:(Tm_type)) -> ((Prims.l_Forall<@2> #(FStar.Pervasives.result<@2> a@1:(Tm_type)) (fun r#8570:(FStar.Pervasives.result<@2> a@1:(Tm_type)) -> ((p@1:(Tm_delayed) r@0:(Tm_delayed)) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.Tot Type u#(0)))

let FStar.Pervasives.ex_trivial : (a#8617:Type u#(@0) -> wp#8618:(FStar.Pervasives.ex_wp<@1> a@0:(Tm_type)) -> Tot FStar.Pervasives.ex_pre)
Checked: [@(FStar.Pervasives.Comment "")]
unfold let  FStar.Pervasives.ex_trivial <uu___8608> : (a#8621:Type u#(@0) -> wp#8622:(FStar.Pervasives.ex_wp<@1> a@0:(Tm_type)) -> Tot FStar.Pervasives.ex_pre) = (fun a#8623:Type u#(@0) wp#8624:(FStar.Pervasives.ex_wp<@1> a@0:(Tm_type)) -> ((wp@0:(Tm_delayed) (fun r#8625:(uu___8#5912:(FStar.Pervasives.result<@2> a@1:(Tm_type)){Prims.l_True}) -> (Prims.l_True $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.Tot FStar.Pervasives.ex_pre))

Checked: [@(FStar.Pervasives.Comment "")]
new_effect { FStar.Pervasives.EXN<uu___9189>  : (result#9192:Type u#(@0) -> wp#9193:(FStar.Pervasives.ex_wp<@1> result@0:(Tm_type)) -> Tot<0> Effect) 
  return_wp   = <>FStar.Pervasives.ex_return<@0>
; bind_wp     = <uu___8822>FStar.Pervasives.ex_bind_wp<@0, @1>
; if_then_else= <>FStar.Pervasives.ex_if_then_else<@0>
; ite_wp      = <>FStar.Pervasives.ex_ite_wp<@0>
; stronger    = <>FStar.Pervasives.ex_stronger<@0>
; close_wp    = <uu___9034>FStar.Pervasives.ex_close_wp<@0, @1>
; assert_p    = <>FStar.Pervasives.ex_assert_p<@0>
; assume_p    = <>FStar.Pervasives.ex_assume_p<@0>
; null_wp     = <>FStar.Pervasives.ex_null_wp<@0>
; trivial     = <>FStar.Pervasives.ex_trivial<@0>
; repr        = Tm_unknown
; bind_repr   = <>Tm_unknown
; return_repr = <>Tm_unknown
and effect_actions
	
}


Checked: [@(FStar.Pervasives.Comment "")]
effect FStar.Pervasives.Exn<uu___9358> a#9364:Type u#(uu___9358) pre#9365:FStar.Pervasives.ex_pre post#9366:(FStar.Pervasives.ex_post'<0, uu___9358> a@1:(Tm_type) pre@0:(Tm_fvar: FStar.Pervasives.ex_pre)) = FStar.Pervasives.EXN<uu___9358> (a@2:(Tm_type)) (fun p#9367:(FStar.Pervasives.ex_post<uu___9358> a@2:(Tm_type)) -> ((Prims.l_and pre@2:(Tm_fvar: FStar.Pervasives.ex_pre) (Prims.l_Forall<uu___9358> #(FStar.Pervasives.result<uu___9358> a@3:(Tm_type)) (fun r#9368:(FStar.Pervasives.result<uu___9358> a@3:(Tm_type)) -> ((Prims.l_imp (post@2:(Tm_delayed) r@0:(Tm_delayed)) (p@1:(Tm_delayed) r@0:(Tm_delayed))) $$ (residual) Prims.GTot Type u#(0))))) $$ (residual) Prims.GTot FStar.Pervasives.ex_pre)) (attributes )

let FStar.Pervasives.lift_div_exn : (a#9461:Type u#(@0) -> wp#9462:(Prims.pure_wp<@1> a@0:(Tm_type)) -> p#9463:(FStar.Pervasives.ex_post<@2> a@1:(Tm_type)) -> Tot Prims.pure_pre)
Checked: [@(FStar.Pervasives.Comment "")]
unfold let  FStar.Pervasives.lift_div_exn <uu___9449> : (a#9467:Type u#(@0) -> wp#9468:(Prims.pure_wp<@1> a@0:(Tm_type)) -> p#9469:(FStar.Pervasives.ex_post<@2> a@1:(Tm_type)) -> Tot Prims.pure_pre) = (fun a#9470:Type u#(@0) wp#9471:(Prims.pure_wp<@1> a@0:(Tm_type)) p#9472:(FStar.Pervasives.ex_post<@2> a@1:(Tm_type)) -> ((wp@1:(Tm_delayed) (fun a#9473:(uu___6#3442:a@2:(Tm_type){Prims.l_True}) -> ((p@1:(Tm_delayed) (FStar.Pervasives.V<@4> #a@3:(Tm_type) a@0:(Tm_delayed))) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.Tot Prims.pure_pre))

Checked: [@(FStar.Pervasives.Comment "")]
sub_effect FStar.Pervasives.DIV ~> FStar.Pervasives.EXN : <uu___9539> FStar.Pervasives.lift_div_exn<uu___9539>

Checked: [@(FStar.Pervasives.Comment "")]
effect FStar.Pervasives.Ex<uu___9566> a#9570:Type u#(uu___9566) = FStar.Pervasives.Exn<uu___9566> (a@0:(Tm_type)) Prims.l_True, (fun v#9571:(uu___8#5912:(FStar.Pervasives.result<uu___9566> a@0:(Tm_type)){Prims.l_True}) -> (Prims.l_True $$ (residual) Prims.GTot Type u#(0))) (attributes )

let FStar.Pervasives.all_pre_h : (h#9590:Type u#(@0) -> Tot Type u#((max 1, @1)))
Checked: [@(FStar.Pervasives.Comment "")]
visible let  FStar.Pervasives.all_pre_h <uu___9585> : (h#9592:Type u#(@0) -> Tot Type u#((max 1, @1))) = (fun h#9593:Type u#(@0) -> ((uu___#9594:h@0:(Tm_type) -> GTot<1> Type u#(0)) $$ (residual) Prims.Tot Type u#((max 1, @1))))

let FStar.Pervasives.all_post_h' : (h#9670:Type u#(@0) -> a#9671:Type u#(@2) -> pre#9672:Type u#(@4) -> Tot Type u#((max 1, @4, @3)))
Checked: [@(FStar.Pervasives.Comment "")]
visible let  FStar.Pervasives.all_post_h' <uu___9655, uu___9656, uu___9657> : (h#9676:Type u#(@0) -> a#9677:Type u#(@2) -> pre#9678:Type u#(@4) -> Tot Type u#((max 1, @4, @3))) = (fun h#9679:Type u#(@0) a#9680:Type u#(@2) pre#9681:Type u#(@4) -> ((uu___#9682:(FStar.Pervasives.result<@4> a@1:(Tm_type)) -> uu___10#9683:(uu___10#9625:h@3:(Tm_type){pre@2:(Tm_type)}) -> GTot<1> Type u#(0)) $$ (residual) Prims.Tot Type u#((max 1, @4, @3))))

let FStar.Pervasives.all_post_h : (h#9734:Type u#(@0) -> a#9735:Type u#(@2) -> Tot Type u#((max 1, @3, @2)))
Checked: [@(FStar.Pervasives.Comment "")]
visible let  FStar.Pervasives.all_post_h <uu___9726, uu___9727> : (h#9738:Type u#(@0) -> a#9739:Type u#(@2) -> Tot Type u#((max 1, @3, @2))) = (fun h#9740:Type u#(@0) a#9741:Type u#(@2) -> ((FStar.Pervasives.all_post_h'<0, @3, @2> h@1:(Tm_type) a@0:(Tm_type) Prims.l_True) $$ (residual) Prims.Tot Type u#((max 1, @3, @2))))

let FStar.Pervasives.all_wp_h : (h#9797:Type u#(@0) -> a#9798:Type u#(@2) -> Tot Type u#((max 1, @3, @2)))
Checked: [@(FStar.Pervasives.Comment "")]
visible let  FStar.Pervasives.all_wp_h <uu___9788, uu___9789> : (h#9801:Type u#(@0) -> a#9802:Type u#(@2) -> Tot Type u#((max 1, @3, @2))) = (fun h#9803:Type u#(@0) a#9804:Type u#(@2) -> ((uu___#9805:(FStar.Pervasives.all_post_h<@3, @2> h@1:(Tm_type) a@0:(Tm_type)) -> Tot<(max 1, @3)> (FStar.Pervasives.all_pre_h<@3> h@2:(Tm_type))) $$ (residual) Prims.Tot Type u#((max 1, @3, @2))))

let FStar.Pervasives.all_ite_wp : (heap#10225:Type u#(@0) -> a#10226:Type u#(@2) -> wp#10227:(FStar.Pervasives.all_wp_h<@3, @2> heap@1:(Tm_type) a@0:(Tm_type)) -> post#10228:(FStar.Pervasives.all_post_h<@4, @3> heap@2:(Tm_type) a@1:(Tm_type)) -> h0#10229:heap@3:(Tm_type) -> Tot Type u#(0))
Checked: [@(FStar.Pervasives.Comment "")]
logic unfold let  FStar.Pervasives.all_ite_wp <uu___10205, uu___10206> : (heap#10235:Type u#(@0) -> a#10236:Type u#(@2) -> wp#10237:(FStar.Pervasives.all_wp_h<@3, @2> heap@1:(Tm_type) a@0:(Tm_type)) -> post#10238:(FStar.Pervasives.all_post_h<@4, @3> heap@2:(Tm_type) a@1:(Tm_type)) -> h0#10239:heap@3:(Tm_type) -> Tot Type u#(0)) = (fun heap#10240:Type u#(@0) a#10241:Type u#(@2) wp#10242:(FStar.Pervasives.all_wp_h<@3, @2> heap@1:(Tm_type) a@0:(Tm_type)) post#10243:(FStar.Pervasives.all_post_h<@4, @3> heap@2:(Tm_type) a@1:(Tm_type)) h0#10244:heap@3:(Tm_type) -> ((Prims.l_Forall<(max 1, @6, @5)> #(FStar.Pervasives.all_post_h<@6, @5> heap@4:(Tm_type) a@3:(Tm_type)) (fun k#10245:(FStar.Pervasives.all_post_h<@6, @5> heap@4:(Tm_type) a@3:(Tm_type)) -> ((Prims.l_imp (Prims.l_Forall<@7> #(FStar.Pervasives.result<@7> a@4:(Tm_type)) (fun x#10246:(FStar.Pervasives.result<@7> a@4:(Tm_type)) -> ((Prims.l_Forall<@7> #heap@6:(Tm_type) (fun h#10247:heap@6:(Tm_type) -> ({:pattern (Prims.guard_free (k@2:(Tm_delayed) x@1:(Tm_delayed) h@0:(Tm_name: heap#10240)))} (Prims.l_iff (k@2:(Tm_delayed) x@1:(Tm_delayed) h@0:(Tm_name: heap#10240)) (post@4:(Tm_delayed) x@1:(Tm_delayed) h@0:(Tm_name: heap#10240))) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.GTot Type u#(0)))) (wp@3:(Tm_delayed) k@0:(Tm_delayed) h0@1:(Tm_name: heap#10240))) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.Tot Type u#(0)))

let FStar.Pervasives.all_return : (heap#10374:Type u#(@0) -> a#10375:Type u#(@2) -> x#10376:a@0:(Tm_type) -> p#10377:(FStar.Pervasives.all_post_h<@4, @3> heap@2:(Tm_type) a@1:(Tm_type)) -> Tot (uu___10#10378:(uu___10#9625:heap@3:(Tm_type){Prims.l_True}) -> GTot<1> Type u#(0)))
Checked: [@(FStar.Pervasives.Comment "")]
unfold let  FStar.Pervasives.all_return <uu___10356, uu___10357> : (heap#10385:Type u#(@0) -> a#10386:Type u#(@2) -> x#10387:a@0:(Tm_type) -> p#10388:(FStar.Pervasives.all_post_h<@4, @3> heap@2:(Tm_type) a@1:(Tm_type)) -> Tot (uu___10#10389:(uu___10#9625:heap@3:(Tm_type){Prims.l_True}) -> GTot<1> Type u#(0))) = (fun heap#10391:Type u#(@0) a#10392:Type u#(@2) x#10393:a@0:(Tm_type) p#10394:(FStar.Pervasives.all_post_h<@4, @3> heap@2:(Tm_type) a@1:(Tm_type)) -> ((p@0:(Tm_delayed) (FStar.Pervasives.V<@5> #a@2:(Tm_type) x@1:(Tm_name: a#10392))) $$ (residual) Prims.Tot (uu___10#10397:(uu___10#9625:heap@3:(Tm_type){Prims.l_True}) -> GTot<1> Type u#(0))))

let FStar.Pervasives.all_bind_wp : (heap#11917:Type u#(@0) -> r1#11918:Prims.range -> a#11919:Type u#(@3) -> b#11920:Type u#(@5) -> wp1#11921:(FStar.Pervasives.all_wp_h<@5, @4> heap@3:(Tm_type) a@1:(Tm_type)) -> wp2#11922:(uu___#11925:a@2:(Tm_type) -> GTot<(max 1, @8, @6)> (FStar.Pervasives.all_wp_h<@8, @6> heap@5:(Tm_type) b@2:(Tm_type))) -> p#11923:(FStar.Pervasives.all_post_h<@8, @6> heap@5:(Tm_type) b@2:(Tm_type)) -> h0#11924:heap@6:(Tm_type) -> GTot<1> Type u#(0))
Checked: [@(FStar.Pervasives.Comment "")]
unfold let  FStar.Pervasives.all_bind_wp <uu___11882, uu___11883, uu___11884> : (heap#11934:Type u#(@0) -> r1#11935:Prims.range -> a#11936:Type u#(@3) -> b#11937:Type u#(@5) -> wp1#11938:(FStar.Pervasives.all_wp_h<@5, @4> heap@3:(Tm_type) a@1:(Tm_type)) -> wp2#11939:(uu___#11942:a@2:(Tm_type) -> GTot<(max 1, @8, @6)> (FStar.Pervasives.all_wp_h<@8, @6> heap@5:(Tm_type) b@2:(Tm_type))) -> p#11940:(FStar.Pervasives.all_post_h<@8, @6> heap@5:(Tm_type) b@2:(Tm_type)) -> h0#11941:heap@6:(Tm_type) -> GTot<1> Type u#(0)) = (fun heap#11943:Type u#(@0) r1#11944:Prims.range a#11945:Type u#(@3) b#11946:Type u#(@5) wp1#11947:(FStar.Pervasives.all_wp_h<@5, @4> heap@3:(Tm_type) a@1:(Tm_type)) wp2#11948:(uu___#11957:a@2:(Tm_type) -> GTot<(max 1, @8, @6)> (FStar.Pervasives.all_wp_h<@8, @6> heap@5:(Tm_type) b@2:(Tm_type))) p#11949:(FStar.Pervasives.all_post_h<@8, @6> heap@5:(Tm_type) b@2:(Tm_type)) h0#11950:heap@6:(Tm_type) -> (((wp1@3:(Tm_delayed) (fun ra#11951:(FStar.Pervasives.result<@9> a@5:(Tm_type)) h1#11952:(uu___10#9625:heap@8:(Tm_type){Prims.l_True}) -> (((match ra@1:(Tm_delayed) with
	| (FStar.Pervasives.V #.uu___#10566:Type u#(@11) v#11953:a@7:(Tm_type))  -> (wp2@5:(Tm_delayed) v@0:(Tm_name: a#11945) p@4:(Tm_delayed) h1@1:(Tm_delayed))
	|(FStar.Pervasives.E #.uu___#11002:Type u#(@11) e#11954:Prims.exn)  -> (p@4:(Tm_delayed) (FStar.Pervasives.E<@13> #b@7:(Tm_type) e@0:(Tm_fvar: Prims.exn)) h1@1:(Tm_delayed))
	|(FStar.Pervasives.Err #.uu___#11392:Type u#(@11) msg#11955:Prims.string)  -> (p@4:(Tm_delayed) (FStar.Pervasives.Err<@13> #b@7:(Tm_type) msg@0:(Tm_fvar: Prims.string)) h1@1:(Tm_delayed))) <ascribed: [Prims.PURE] Type u#(0) ) $$ (residual) Prims.GTot Type u#(0))) h0@0:(Tm_name: heap#11943)) <ascribed: GTot<1> Type u#(0) ) $$ (residual) Prims.GTot Type u#(0)))

let FStar.Pervasives.all_if_then_else : (heap#12240:Type u#(@0) -> a#12241:Type u#(@2) -> p#12242:Type u#(0) -> wp_then#12243:(FStar.Pervasives.all_wp_h<@4, @3> heap@2:(Tm_type) a@1:(Tm_type)) -> wp_else#12244:(FStar.Pervasives.all_wp_h<@5, @4> heap@3:(Tm_type) a@2:(Tm_type)) -> post#12245:(FStar.Pervasives.all_post_h<@6, @5> heap@4:(Tm_type) a@3:(Tm_type)) -> h0#12246:heap@5:(Tm_type) -> Tot Type u#(0))
Checked: [@(FStar.Pervasives.Comment "")]
unfold let  FStar.Pervasives.all_if_then_else <uu___12217, uu___12218> : (heap#12254:Type u#(@0) -> a#12255:Type u#(@2) -> p#12256:Type u#(0) -> wp_then#12257:(FStar.Pervasives.all_wp_h<@4, @3> heap@2:(Tm_type) a@1:(Tm_type)) -> wp_else#12258:(FStar.Pervasives.all_wp_h<@5, @4> heap@3:(Tm_type) a@2:(Tm_type)) -> post#12259:(FStar.Pervasives.all_post_h<@6, @5> heap@4:(Tm_type) a@3:(Tm_type)) -> h0#12260:heap@5:(Tm_type) -> Tot Type u#(0)) = (fun heap#12261:Type u#(@0) a#12262:Type u#(@2) p#12263:Type u#(0) wp_then#12264:(FStar.Pervasives.all_wp_h<@4, @3> heap@2:(Tm_type) a@1:(Tm_type)) wp_else#12265:(FStar.Pervasives.all_wp_h<@5, @4> heap@3:(Tm_type) a@2:(Tm_type)) post#12266:(FStar.Pervasives.all_post_h<@6, @5> heap@4:(Tm_type) a@3:(Tm_type)) h0#12267:heap@5:(Tm_type) -> ((Prims.l_ITE p@4:(Tm_type) (wp_then@3:(Tm_delayed) post@1:(Tm_delayed) h0@0:(Tm_name: heap#12261)) (wp_else@2:(Tm_delayed) post@1:(Tm_delayed) h0@0:(Tm_name: heap#12261))) $$ (residual) Prims.Tot Type u#(0)))

let FStar.Pervasives.all_stronger : (heap#12528:Type u#(@0) -> a#12529:Type u#(@2) -> wp1#12530:(FStar.Pervasives.all_wp_h<@3, @2> heap@1:(Tm_type) a@0:(Tm_type)) -> wp2#12531:(FStar.Pervasives.all_wp_h<@4, @3> heap@2:(Tm_type) a@1:(Tm_type)) -> Tot Type u#(0))
Checked: [@(FStar.Pervasives.Comment "")]
logic unfold let  FStar.Pervasives.all_stronger <uu___12512, uu___12513> : (heap#12536:Type u#(@0) -> a#12537:Type u#(@2) -> wp1#12538:(FStar.Pervasives.all_wp_h<@3, @2> heap@1:(Tm_type) a@0:(Tm_type)) -> wp2#12539:(FStar.Pervasives.all_wp_h<@4, @3> heap@2:(Tm_type) a@1:(Tm_type)) -> Tot Type u#(0)) = (fun heap#12540:Type u#(@0) a#12541:Type u#(@2) wp1#12542:(FStar.Pervasives.all_wp_h<@3, @2> heap@1:(Tm_type) a@0:(Tm_type)) wp2#12543:(FStar.Pervasives.all_wp_h<@4, @3> heap@2:(Tm_type) a@1:(Tm_type)) -> ((Prims.l_Forall<(max 1, @5, @4)> #(FStar.Pervasives.all_post_h<@5, @4> heap@3:(Tm_type) a@2:(Tm_type)) (fun p#12544:(FStar.Pervasives.all_post_h<@5, @4> heap@3:(Tm_type) a@2:(Tm_type)) -> ((Prims.l_Forall<@5> #heap@4:(Tm_type) (fun h#12545:heap@4:(Tm_type) -> ((Prims.l_imp (wp1@3:(Tm_delayed) p@1:(Tm_delayed) h@0:(Tm_name: heap#12540)) (wp2@2:(Tm_delayed) p@1:(Tm_delayed) h@0:(Tm_name: heap#12540))) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.Tot Type u#(0)))

let FStar.Pervasives.all_close_wp : (heap#12763:Type u#(@0) -> a#12764:Type u#(@2) -> b#12765:Type u#(@4) -> wp#12766:(uu___#12769:b@0:(Tm_type) -> GTot<(max 1, @5, @4)> (FStar.Pervasives.all_wp_h<@5, @4> heap@3:(Tm_type) a@2:(Tm_type))) -> p#12767:(FStar.Pervasives.all_post_h<@5, @4> heap@3:(Tm_type) a@2:(Tm_type)) -> h#12768:heap@4:(Tm_type) -> Tot Type u#(0))
Checked: [@(FStar.Pervasives.Comment "")]
logic unfold let  FStar.Pervasives.all_close_wp <uu___12739, uu___12740, uu___12741> : (heap#12776:Type u#(@0) -> a#12777:Type u#(@2) -> b#12778:Type u#(@4) -> wp#12779:(uu___#12782:b@0:(Tm_type) -> GTot<(max 1, @5, @4)> (FStar.Pervasives.all_wp_h<@5, @4> heap@3:(Tm_type) a@2:(Tm_type))) -> p#12780:(FStar.Pervasives.all_post_h<@5, @4> heap@3:(Tm_type) a@2:(Tm_type)) -> h#12781:heap@4:(Tm_type) -> Tot Type u#(0)) = (fun heap#12783:Type u#(@0) a#12784:Type u#(@2) b#12785:Type u#(@4) wp#12786:(uu___#12790:b@0:(Tm_type) -> GTot<(max 1, @5, @4)> (FStar.Pervasives.all_wp_h<@5, @4> heap@3:(Tm_type) a@2:(Tm_type))) p#12787:(FStar.Pervasives.all_post_h<@5, @4> heap@3:(Tm_type) a@2:(Tm_type)) h#12788:heap@4:(Tm_type) -> ((Prims.l_Forall<@8> #b@3:(Tm_type) (fun b#12789:b@3:(Tm_type) -> ((wp@3:(Tm_delayed) b@0:(Tm_name: b#12785) p@2:(Tm_delayed) h@1:(Tm_name: heap#12783)) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.Tot Type u#(0)))

let FStar.Pervasives.all_assert_p : (heap#12956:Type u#(@0) -> a#12957:Type u#(@2) -> p#12958:Type u#(0) -> wp#12959:(FStar.Pervasives.all_wp_h<@4, @3> heap@2:(Tm_type) a@1:(Tm_type)) -> q#12960:(FStar.Pervasives.all_post_h<@5, @4> heap@3:(Tm_type) a@2:(Tm_type)) -> h#12961:heap@4:(Tm_type) -> Tot Type u#(0))
Checked: [@(FStar.Pervasives.Comment "")]
logic unfold let  FStar.Pervasives.all_assert_p <uu___12936, uu___12937> : (heap#12968:Type u#(@0) -> a#12969:Type u#(@2) -> p#12970:Type u#(0) -> wp#12971:(FStar.Pervasives.all_wp_h<@4, @3> heap@2:(Tm_type) a@1:(Tm_type)) -> q#12972:(FStar.Pervasives.all_post_h<@5, @4> heap@3:(Tm_type) a@2:(Tm_type)) -> h#12973:heap@4:(Tm_type) -> Tot Type u#(0)) = (fun heap#12974:Type u#(@0) a#12975:Type u#(@2) p#12976:Type u#(0) wp#12977:(FStar.Pervasives.all_wp_h<@4, @3> heap@2:(Tm_type) a@1:(Tm_type)) q#12978:(FStar.Pervasives.all_post_h<@5, @4> heap@3:(Tm_type) a@2:(Tm_type)) h#12979:heap@4:(Tm_type) -> ((Prims.l_and p@3:(Tm_type) (wp@2:(Tm_delayed) q@1:(Tm_delayed) h@0:(Tm_name: heap#12974))) $$ (residual) Prims.Tot Type u#(0)))

let FStar.Pervasives.all_assume_p : (heap#13137:Type u#(@0) -> a#13138:Type u#(@2) -> p#13139:Type u#(0) -> wp#13140:(FStar.Pervasives.all_wp_h<@4, @3> heap@2:(Tm_type) a@1:(Tm_type)) -> q#13141:(FStar.Pervasives.all_post_h<@5, @4> heap@3:(Tm_type) a@2:(Tm_type)) -> h#13142:heap@4:(Tm_type) -> Tot Type u#(0))
Checked: [@(FStar.Pervasives.Comment "")]
logic unfold let  FStar.Pervasives.all_assume_p <uu___13117, uu___13118> : (heap#13149:Type u#(@0) -> a#13150:Type u#(@2) -> p#13151:Type u#(0) -> wp#13152:(FStar.Pervasives.all_wp_h<@4, @3> heap@2:(Tm_type) a@1:(Tm_type)) -> q#13153:(FStar.Pervasives.all_post_h<@5, @4> heap@3:(Tm_type) a@2:(Tm_type)) -> h#13154:heap@4:(Tm_type) -> Tot Type u#(0)) = (fun heap#13155:Type u#(@0) a#13156:Type u#(@2) p#13157:Type u#(0) wp#13158:(FStar.Pervasives.all_wp_h<@4, @3> heap@2:(Tm_type) a@1:(Tm_type)) q#13159:(FStar.Pervasives.all_post_h<@5, @4> heap@3:(Tm_type) a@2:(Tm_type)) h#13160:heap@4:(Tm_type) -> ((Prims.l_imp p@3:(Tm_type) (wp@2:(Tm_delayed) q@1:(Tm_delayed) h@0:(Tm_name: heap#13155))) $$ (residual) Prims.Tot Type u#(0)))

let FStar.Pervasives.all_null_wp : (heap#13350:Type u#(@0) -> a#13351:Type u#(@2) -> p#13352:(FStar.Pervasives.all_post_h<@3, @2> heap@1:(Tm_type) a@0:(Tm_type)) -> h0#13353:heap@2:(Tm_type) -> Tot Type u#(0))
Checked: [@(FStar.Pervasives.Comment "")]
logic unfold let  FStar.Pervasives.all_null_wp <uu___13334, uu___13335> : (heap#13358:Type u#(@0) -> a#13359:Type u#(@2) -> p#13360:(FStar.Pervasives.all_post_h<@3, @2> heap@1:(Tm_type) a@0:(Tm_type)) -> h0#13361:heap@2:(Tm_type) -> Tot Type u#(0)) = (fun heap#13362:Type u#(@0) a#13363:Type u#(@2) p#13364:(FStar.Pervasives.all_post_h<@3, @2> heap@1:(Tm_type) a@0:(Tm_type)) h0#13365:heap@2:(Tm_type) -> ((Prims.l_Forall<@5> #(FStar.Pervasives.result<@5> a@2:(Tm_type)) (fun a#13366:(FStar.Pervasives.result<@5> a@2:(Tm_type)) -> ((Prims.l_Forall<@5> #heap@4:(Tm_type) (fun h#13367:heap@4:(Tm_type) -> ((p@3:(Tm_delayed) a@1:(Tm_delayed) h@0:(Tm_name: heap#13362)) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.Tot Type u#(0)))

let FStar.Pervasives.all_trivial : (heap#13484:Type u#(@0) -> a#13485:Type u#(@2) -> wp#13486:(FStar.Pervasives.all_wp_h<@3, @2> heap@1:(Tm_type) a@0:(Tm_type)) -> Tot Type u#(0))
Checked: [@(FStar.Pervasives.Comment "")]
logic unfold let  FStar.Pervasives.all_trivial <uu___13469, uu___13470> : (heap#13490:Type u#(@0) -> a#13491:Type u#(@2) -> wp#13492:(FStar.Pervasives.all_wp_h<@3, @2> heap@1:(Tm_type) a@0:(Tm_type)) -> Tot Type u#(0)) = (fun heap#13493:Type u#(@0) a#13494:Type u#(@2) wp#13495:(FStar.Pervasives.all_wp_h<@3, @2> heap@1:(Tm_type) a@0:(Tm_type)) -> ((Prims.l_Forall<@3> #heap@2:(Tm_type) (fun h0#13496:heap@2:(Tm_type) -> ((wp@1:(Tm_delayed) (fun r#13497:(FStar.Pervasives.result<@5> a@2:(Tm_type)) h1#13498:(uu___10#9625:heap@4:(Tm_type){Prims.l_True}) -> (Prims.l_True $$ (residual) Prims.GTot Type u#(0))) h0@0:(Tm_name: heap#13493)) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.Tot Type u#(0)))

Checked: [@(FStar.Pervasives.Comment "")]
new_effect { FStar.Pervasives.ALL_h<uu___14343, uu___14344> heap#14348:Type u#(@0) : (a#14349:Type u#(@2) -> wp#14350:(FStar.Pervasives.all_wp_h<@3, @2> heap@1:(Tm_type) a@0:(Tm_type)) -> Tot<0> Effect) 
  return_wp   = <>(FStar.Pervasives.all_return<@1, @0> heap@0:(Tm_type))
; bind_wp     = <uu___13796>(FStar.Pervasives.all_bind_wp<@0, @2, @1> heap@1:(Tm_type))
; if_then_else= <>(FStar.Pervasives.all_if_then_else<@1, @0> heap@0:(Tm_type))
; ite_wp      = <>(FStar.Pervasives.all_ite_wp<@1, @0> heap@0:(Tm_type))
; stronger    = <>(FStar.Pervasives.all_stronger<@1, @0> heap@0:(Tm_type))
; close_wp    = <uu___14103>(FStar.Pervasives.all_close_wp<@0, @2, @1> heap@1:(Tm_type))
; assert_p    = <>(FStar.Pervasives.all_assert_p<@1, @0> heap@0:(Tm_type))
; assume_p    = <>(FStar.Pervasives.all_assume_p<@1, @0> heap@0:(Tm_type))
; null_wp     = <>(FStar.Pervasives.all_null_wp<@1, @0> heap@0:(Tm_type))
; trivial     = <>(FStar.Pervasives.all_trivial<@1, @0> heap@0:(Tm_type))
; repr        = Tm_unknown
; bind_repr   = <>Tm_unknown
; return_repr = <>Tm_unknown
and effect_actions
	
}


let FStar.Pervasives.inversion : (a#14361:Type u#(@0) -> Tot Type u#(0))
Checked: [@(FStar.Pervasives.Comment "")]
visible let  FStar.Pervasives.inversion <uu___14357> : (a#14363:Type u#(@0) -> Tot Type u#(0)) = (fun a#14364:Type u#(@0) -> (Prims.l_True $$ (residual) Prims.Tot Type u#(0)))

let FStar.Pervasives.allow_inversion : (a#14417:Type u#(@0) -> Prims.Pure<0> (Prims.unit) Prims.l_True, (fun x#14418:(uu___6#3442:Prims.unit{Prims.l_True}) -> ((FStar.Pervasives.inversion<@2> a@1:(Tm_type)) $$ (residual) Prims.GTot Type u#(0))) (attributes ))
Checked: [@(FStar.Pervasives.Comment "")]
visible let  FStar.Pervasives.allow_inversion <uu___14409> : (a#14421:Type u#(@0) -> Prims.Pure<0> (Prims.unit) Prims.l_True, (fun x#14422:(uu___6#3442:Prims.unit{Prims.l_True}) -> ((FStar.Pervasives.inversion<@2> a@1:(Tm_type)) $$ (residual) Prims.GTot Type u#(0))) (attributes )) = (fun a#14424:Type u#(@0) -> ((() <ascribed: Prims.Pure<0> (Prims.unit) Prims.l_True, (fun x#14425:(uu___6#3442:Prims.unit{Prims.l_True}) -> ((FStar.Pervasives.inversion<@2> a@1:(Tm_type)) $$ (residual) Prims.GTot Type u#(0))) (attributes ) ) $$ (residual) Prims.Pure Prims.unit))

Checked: [@(FStar.Pervasives.Comment "")]
val FStar.Pervasives.invertOption <uu___14598> : (a#14602:Type u#(uu___14598) -> Prims.Lemma<0> (Prims.unit) Prims.l_True, (fun uu___#14603:(Prims.squash<0> Prims.l_True) -> ((Prims.l_Forall<uu___14598> #(FStar.Pervasives.Native.option<uu___14598> a@1:(Tm_type)) (fun x#14604:(FStar.Pervasives.Native.option<uu___14598> a@1:(Tm_type)) -> ((Prims.l_or (Prims.b2t (FStar.Pervasives.Native.uu___is_None<uu___14598> #a@2:(Tm_type) x@0:(Tm_delayed))) (Prims.b2t (FStar.Pervasives.Native.uu___is_Some<uu___14598> #a@2:(Tm_type) x@0:(Tm_delayed)))) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.Tot Type u#(0))), Meta_desugared{Meta_desugared{(Prims.Cons<0> #Prims.pattern (Prims.smt_pat<(uu___14598 + 1)> #Type u#(uu___14598) (FStar.Pervasives.Native.option<uu___14598> a@0:(Tm_type))) (Prims.Nil<0> #.Prims.pattern))}} (attributes lemma))


Checked: [@(FStar.Pervasives.Comment "") (FStar.Pervasives.Comment "")]
visible let  FStar.Pervasives.invertOption <uu___14598> : (a#14637:Type u#(@0) -> Prims.Lemma<0> (Prims.unit) Prims.l_True, (fun uu___#14638:(Prims.squash<0> Prims.l_True) -> ((Prims.l_Forall<@2> #(FStar.Pervasives.Native.option<@2> a@1:(Tm_type)) (fun x#14639:(FStar.Pervasives.Native.option<@2> a@1:(Tm_type)) -> ((Prims.l_or (Prims.b2t (FStar.Pervasives.Native.uu___is_None<@3> #a@2:(Tm_type) x@0:(Tm_delayed))) (Prims.b2t (FStar.Pervasives.Native.uu___is_Some<@3> #a@2:(Tm_type) x@0:(Tm_delayed)))) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.Tot Type u#(0))), Meta_desugared{Meta_desugared{(Prims.Cons<0> #Prims.pattern (Prims.smt_pat<(@1 + 1)> #Type u#(@1) (FStar.Pervasives.Native.option<@1> a@0:(Tm_type))) (Prims.Nil<0> #.Prims.pattern))}} (attributes lemma)) = (fun a#14640:Type u#(@0) -> ((FStar.Pervasives.allow_inversion<@1> (FStar.Pervasives.Native.option<@1> a@0:(Tm_type))) $$ (residual) Prims.Lemma Prims.unit))

Checked: type FStar.Pervasives.either 'a#15261:Type u#(@0) 'b#15262:Type u#(@2) : Type u#((max @3, @2))
datacon<uu___14713, uu___14714> FStar.Pervasives.Inl : (#.'a#15263:Type u#(@0) -> #.'b#15264:Type u#(@2) -> v#15265:'a@1:(Tm_type) -> Tot (FStar.Pervasives.either<@4, @3> 'a@2:(Tm_type) 'b@1:(Tm_type)))
datacon<uu___14713, uu___14714> FStar.Pervasives.Inr : (#.'a#15266:Type u#(@0) -> #.'b#15267:Type u#(@2) -> v#15268:'b@0:(Tm_type) -> Tot (FStar.Pervasives.either<@4, @3> 'a@2:(Tm_type) 'b@1:(Tm_type)))
val FStar.Pervasives.either_haseq : (Prims.l_Forall<(uu___14714 + 1)> #Type u#(uu___14714) (fun 'a#15269:Type u#(uu___14714) -> ((Prims.l_Forall<(uu___14713 + 1)> #Type u#(uu___14713) (fun 'b#15270:Type u#(uu___14713) -> ({:pattern (Prims.hasEq<(max uu___14713, uu___14714)> (FStar.Pervasives.either<uu___14713, uu___14714> 'a@1:(Tm_type) 'b@0:(Tm_type)))} (Prims.l_imp (Prims.l_and (Prims.l_and Prims.l_True (Prims.hasEq<uu___14714> 'a@1:(Tm_type))) (Prims.hasEq<uu___14713> 'b@0:(Tm_type))) (Prims.hasEq<(max uu___14713, uu___14714)> (FStar.Pervasives.either<uu___14713, uu___14714> 'a@1:(Tm_type) 'b@0:(Tm_type)))) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.GTot Type u#(0))))

Checked: (Discriminator FStar.Pervasives.Inl) val FStar.Pervasives.uu___is_Inl <uu___14713, uu___14714> : (#'a#15379:Type u#(uu___14714) -> #'b#15380:Type u#(uu___14713) -> projectee#15381:(FStar.Pervasives.either<uu___14713, uu___14714> 'a@1:(Tm_type) 'b@0:(Tm_type)) -> Tot<0> Prims.bool)


Checked: visible (Discriminator FStar.Pervasives.Inl) let  FStar.Pervasives.uu___is_Inl <uu___14713, uu___14714> : (#'a#15586:Type u#(@0) -> #'b#15587:Type u#(@2) -> projectee#15588:(FStar.Pervasives.either<@3, @2> 'a@1:(Tm_type) 'b@0:(Tm_type)) -> Tot<0> Prims.bool) = (fun #'a#15589:Type u#(@0) #'b#15590:Type u#(@2) projectee#15591:(FStar.Pervasives.either<@3, @2> 'a@1:(Tm_type) 'b@0:(Tm_type)) -> (((match projectee@0:(Tm_delayed) with
	| (FStar.Pervasives.Inl #.'a#14735:Type u#(@3) #.'b#14736:Type u#(@4) Pat_wild v#15592)  -> true
	|Pat_wild uu___#15593  -> false) <ascribed: [Prims.PURE] Prims.bool ) $$ (residual) Prims.Tot Prims.bool))

Checked: [@FStar.Pervasives.Substitute]
(Projector FStar.Pervasives.Inl v) val FStar.Pervasives.__proj__Inl__item__v <uu___14713, uu___14714> : (#'a#15675:Type u#(uu___14714) -> #'b#15676:Type u#(uu___14713) -> projectee#15677:(uu___#15602:(FStar.Pervasives.either<uu___14713, uu___14714> 'a@1:(Tm_type) 'b@0:(Tm_type)){(Prims.b2t (FStar.Pervasives.uu___is_Inl<uu___14713, uu___14714> #'a@2:(Tm_type) #'b@1:(Tm_type) uu___@0:(Tm_delayed)))}) -> Tot<uu___14714> 'a@2:(Tm_type))


Checked: [@FStar.Pervasives.Substitute]
visible (Projector FStar.Pervasives.Inl v) let  FStar.Pervasives.__proj__Inl__item__v <uu___14713, uu___14714> : (#'a#15989:Type u#(@0) -> #'b#15990:Type u#(@2) -> projectee#15991:(uu___#15602:(FStar.Pervasives.either<@3, @2> 'a@1:(Tm_type) 'b@0:(Tm_type)){(Prims.b2t (FStar.Pervasives.uu___is_Inl<@4, @3> #'a@2:(Tm_type) #'b@1:(Tm_type) uu___@0:(Tm_delayed)))}) -> Tot<@3> 'a@2:(Tm_type)) = (fun #'a#15993:Type u#(@0) #'b#15994:Type u#(@2) projectee#15995:(uu___#15712:(FStar.Pervasives.either<@3, @2> 'a@1:(Tm_type) 'b@0:(Tm_type)){(Prims.b2t (FStar.Pervasives.uu___is_Inl<@4, @3> #'a@2:(Tm_type) #'b@1:(Tm_type) uu___@0:(Tm_delayed)))}) -> (((match projectee@0:(Tm_delayed) with
	| (FStar.Pervasives.Inl #.'a#14740:Type u#(@3) #.'b#14741:Type u#(@4) v#15996:'a@2:(Tm_type))  -> v@0:(Tm_name: 'a#15993)) <ascribed: [Prims.PURE] 'a@2:(Tm_type) ) $$ (residual) Prims.Tot 'a@2:(Tm_type)))

Checked: (Discriminator FStar.Pervasives.Inr) val FStar.Pervasives.uu___is_Inr <uu___14713, uu___14714> : (#'a#16030:Type u#(uu___14714) -> #'b#16031:Type u#(uu___14713) -> projectee#16032:(FStar.Pervasives.either<uu___14713, uu___14714> 'a@1:(Tm_type) 'b@0:(Tm_type)) -> Tot<0> Prims.bool)


Checked: visible (Discriminator FStar.Pervasives.Inr) let  FStar.Pervasives.uu___is_Inr <uu___14713, uu___14714> : (#'a#16237:Type u#(@0) -> #'b#16238:Type u#(@2) -> projectee#16239:(FStar.Pervasives.either<@3, @2> 'a@1:(Tm_type) 'b@0:(Tm_type)) -> Tot<0> Prims.bool) = (fun #'a#16240:Type u#(@0) #'b#16241:Type u#(@2) projectee#16242:(FStar.Pervasives.either<@3, @2> 'a@1:(Tm_type) 'b@0:(Tm_type)) -> (((match projectee@0:(Tm_delayed) with
	| (FStar.Pervasives.Inr #.'a#14748:Type u#(@3) #.'b#14749:Type u#(@4) Pat_wild v#16243)  -> true
	|Pat_wild uu___#16244  -> false) <ascribed: [Prims.PURE] Prims.bool ) $$ (residual) Prims.Tot Prims.bool))

Checked: [@FStar.Pervasives.Substitute]
(Projector FStar.Pervasives.Inr v) val FStar.Pervasives.__proj__Inr__item__v <uu___14713, uu___14714> : (#'a#16326:Type u#(uu___14714) -> #'b#16327:Type u#(uu___14713) -> projectee#16328:(uu___#16253:(FStar.Pervasives.either<uu___14713, uu___14714> 'a@1:(Tm_type) 'b@0:(Tm_type)){(Prims.b2t (FStar.Pervasives.uu___is_Inr<uu___14713, uu___14714> #'a@2:(Tm_type) #'b@1:(Tm_type) uu___@0:(Tm_delayed)))}) -> Tot<uu___14713> 'b@1:(Tm_type))


Checked: [@FStar.Pervasives.Substitute]
visible (Projector FStar.Pervasives.Inr v) let  FStar.Pervasives.__proj__Inr__item__v <uu___14713, uu___14714> : (#'a#16640:Type u#(@0) -> #'b#16641:Type u#(@2) -> projectee#16642:(uu___#16253:(FStar.Pervasives.either<@3, @2> 'a@1:(Tm_type) 'b@0:(Tm_type)){(Prims.b2t (FStar.Pervasives.uu___is_Inr<@4, @3> #'a@2:(Tm_type) #'b@1:(Tm_type) uu___@0:(Tm_delayed)))}) -> Tot<@4> 'b@1:(Tm_type)) = (fun #'a#16644:Type u#(@0) #'b#16645:Type u#(@2) projectee#16646:(uu___#16363:(FStar.Pervasives.either<@3, @2> 'a@1:(Tm_type) 'b@0:(Tm_type)){(Prims.b2t (FStar.Pervasives.uu___is_Inr<@4, @3> #'a@2:(Tm_type) #'b@1:(Tm_type) uu___@0:(Tm_delayed)))}) -> (((match projectee@0:(Tm_delayed) with
	| (FStar.Pervasives.Inr #.'a#14753:Type u#(@3) #.'b#14754:Type u#(@4) v#16647:'b@1:(Tm_type))  -> v@0:(Tm_name: 'b#16645)) <ascribed: [Prims.PURE] 'b@1:(Tm_type) ) $$ (residual) Prims.Tot 'b@1:(Tm_type)))

Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: [@(FStar.Pervasives.Comment "")]
val FStar.Pervasives.dfst <uu___16702, uu___16703> : (#a#16708:Type u#(uu___16703) -> #b#16709:(uu___#16711:a@0:(Tm_type) -> GTot<(uu___16702 + 1)> Type u#(uu___16702)) -> uu___#16710:(Prims.dtuple2<uu___16702, uu___16703> a@1:(Tm_type) b@0:(Tm_delayed)) -> Tot<uu___16703> a@2:(Tm_type))


Checked: [@(FStar.Pervasives.Comment "") (FStar.Pervasives.Comment "")]
visible let  FStar.Pervasives.dfst <uu___16702, uu___16703> : (#a#16785:Type u#(@0) -> #b#16786:(uu___#16788:a@0:(Tm_type) -> GTot<(@3 + 1)> Type u#(@3)) -> t#16787:(Prims.dtuple2<@3, @2> a@1:(Tm_type) b@0:(Tm_delayed)) -> Tot<@3> a@2:(Tm_type)) = (fun #a#16789:Type u#(@0) #b#16790:(uu___#16792:a@0:(Tm_type) -> GTot<(@3 + 1)> Type u#(@3)) t#16791:(Prims.dtuple2<@3, @2> a@1:(Tm_type) b@0:(Tm_delayed)) -> ((Prims.__proj__Mkdtuple2__item___1<@4, @3> #a@2:(Tm_type) #b@1:(Tm_delayed) t@0:(Tm_delayed)) $$ (residual) Prims.Tot a@2:(Tm_type)))

Checked: [@(FStar.Pervasives.Comment "")]
val FStar.Pervasives.dsnd <uu___16927, uu___16928> : (#a#16933:Type u#(uu___16928) -> #b#16934:(uu___#16936:a@0:(Tm_type) -> GTot<(uu___16927 + 1)> Type u#(uu___16927)) -> t#16935:(Prims.dtuple2<uu___16927, uu___16928> a@1:(Tm_type) b@0:(Tm_delayed)) -> Tot<uu___16927> (b@1:(Tm_delayed) (Prims.__proj__Mkdtuple2__item___1<uu___16927, uu___16928> #a@2:(Tm_type) #b@1:(Tm_delayed) t@0:(Tm_delayed))))


Checked: [@(FStar.Pervasives.Comment "") (FStar.Pervasives.Comment "")]
visible let  FStar.Pervasives.dsnd <uu___16927, uu___16928> : (#a#17014:Type u#(@0) -> #b#17015:(uu___#17017:a@0:(Tm_type) -> GTot<(@3 + 1)> Type u#(@3)) -> t#17016:(Prims.dtuple2<@3, @2> a@1:(Tm_type) b@0:(Tm_delayed)) -> Tot<@4> (b@1:(Tm_delayed) (Prims.__proj__Mkdtuple2__item___1<@4, @3> #a@2:(Tm_type) #b@1:(Tm_delayed) t@0:(Tm_delayed)))) = (fun #a#17018:Type u#(@0) #b#17019:(uu___#17021:a@0:(Tm_type) -> GTot<(@3 + 1)> Type u#(@3)) t#17020:(Prims.dtuple2<@3, @2> a@1:(Tm_type) b@0:(Tm_delayed)) -> ((Prims.__proj__Mkdtuple2__item___2<@4, @3> #a@2:(Tm_type) #b@1:(Tm_delayed) t@0:(Tm_delayed)) $$ (residual) Prims.Tot (b@1:(Tm_delayed) (Prims.__proj__Mkdtuple2__item___1<@4, @3> #a@2:(Tm_type) #b@1:(Tm_delayed) t@0:(Tm_delayed)))))

Checked: unopteq type FStar.Pervasives.dtuple3 a#17941:Type u#(@0) b#17942:(uu___#17944:a@0:(Tm_type) -> GTot<(@3 + 1)> Type u#(@3)) c#17943:(x#17945:a@1:(Tm_type) -> uu___#17946:(b@1:(Tm_delayed) x@0:(Tm_name: a#17941)) -> GTot<(@6 + 1)> Type u#(@6)) : Type u#((max @5, @4, @3))
datacon<uu___17250, uu___17251, uu___17252> FStar.Pervasives.Mkdtuple3 : (#.a#17947:Type u#(@0) -> #.b#17948:(uu___#17953:a@0:(Tm_type) -> GTot<(@3 + 1)> Type u#(@3)) -> #.c#17949:(x#17954:a@1:(Tm_type) -> uu___#17955:(b@1:(Tm_delayed) x@0:(Tm_name: a#17947)) -> GTot<(@6 + 1)> Type u#(@6)) -> _1#17950:a@2:(Tm_type) -> _2#17951:(b@2:(Tm_delayed) _1@0:(Tm_name: a#17947)) -> _3#17952:(c@2:(Tm_delayed) _1@1:(Tm_name: a#17947) _2@0:(Tm_delayed)) -> Tot (FStar.Pervasives.dtuple3<@8, @7, @6> a@5:(Tm_type) b@4:(Tm_delayed) c@3:(Tm_delayed)))
val FStar.Pervasives.dtuple3_haseq : (Prims.l_and Prims.l_True (Prims.l_Forall<(uu___17252 + 1)> #Type u#(uu___17252) (fun a#17956:Type u#(uu___17252) -> ((Prims.l_Forall<(max (uu___17251 + 1), uu___17252)> #(uu___#17957:a@0:(Tm_type) -> GTot<(uu___17251 + 1)> Type u#(uu___17251)) (fun b#17958:(uu___#17967:a@0:(Tm_type) -> GTot<(uu___17251 + 1)> Type u#(uu___17251)) -> ((Prims.l_Forall<(max (uu___17250 + 1), uu___17251, uu___17252)> #(x#17959:a@1:(Tm_type) -> uu___#17960:(b@1:(Tm_delayed) x@0:(Tm_name: a#17956)) -> GTot<(uu___17250 + 1)> Type u#(uu___17250)) (fun c#17961:(x#17965:a@1:(Tm_type) -> uu___#17966:(b@1:(Tm_delayed) x@0:(Tm_name: a#17956)) -> GTot<(uu___17250 + 1)> Type u#(uu___17250)) -> ({:pattern (Prims.hasEq<(max uu___17250, uu___17251, uu___17252)> (FStar.Pervasives.dtuple3<uu___17250, uu___17251, uu___17252> a@2:(Tm_type) b@1:(Tm_delayed) c@0:(Tm_delayed)))} (Prims.l_imp (Prims.l_and Prims.l_True (Prims.l_Forall<uu___17252> #a@2:(Tm_type) (fun _1#17962:a@2:(Tm_type) -> ((Prims.l_Forall<uu___17251> #(b@2:(Tm_delayed) _1@0:(Tm_name: a#17956)) (fun _2#17963:(b@2:(Tm_delayed) _1@0:(Tm_name: a#17956)) -> ((Prims.l_Forall<uu___17250> #(c@2:(Tm_delayed) _1@1:(Tm_name: a#17956) _2@0:(Tm_delayed)) (fun _3#17964:(c@2:(Tm_delayed) _1@1:(Tm_name: a#17956) _2@0:(Tm_delayed)) -> ((Prims.l_and (Prims.l_and (Prims.l_and Prims.l_True (Prims.hasEq<uu___17252> a@5:(Tm_type))) (Prims.hasEq<uu___17251> (b@4:(Tm_delayed) _1@2:(Tm_name: a#17956)))) (Prims.hasEq<uu___17250> (c@3:(Tm_delayed) _1@2:(Tm_name: a#17956) _2@1:(Tm_delayed)))) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.GTot Type u#(0))))) (Prims.hasEq<(max uu___17250, uu___17251, uu___17252)> (FStar.Pervasives.dtuple3<uu___17250, uu___17251, uu___17252> a@2:(Tm_type) b@1:(Tm_delayed) c@0:(Tm_delayed)))) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.GTot Type u#(0)))))

Checked: (Discriminator FStar.Pervasives.Mkdtuple3) val FStar.Pervasives.uu___is_Mkdtuple3 <uu___17250, uu___17251, uu___17252> : (#a#18253:Type u#(uu___17252) -> #b#18254:(uu___#18257:a@0:(Tm_type) -> GTot<(uu___17251 + 1)> Type u#(uu___17251)) -> #c#18255:(x#18258:a@1:(Tm_type) -> uu___#18259:(b@1:(Tm_delayed) x@0:(Tm_name: a#18253)) -> GTot<(uu___17250 + 1)> Type u#(uu___17250)) -> projectee#18256:(FStar.Pervasives.dtuple3<uu___17250, uu___17251, uu___17252> a@2:(Tm_type) b@1:(Tm_delayed) c@0:(Tm_delayed)) -> Tot<0> Prims.bool)


Checked: visible (Discriminator FStar.Pervasives.Mkdtuple3) let  FStar.Pervasives.uu___is_Mkdtuple3 <uu___17250, uu___17251, uu___17252> : (#a#18447:Type u#(@0) -> #b#18448:(uu___#18451:a@0:(Tm_type) -> GTot<(@3 + 1)> Type u#(@3)) -> #c#18449:(x#18452:a@1:(Tm_type) -> uu___#18453:(b@1:(Tm_delayed) x@0:(Tm_name: a#18447)) -> GTot<(@6 + 1)> Type u#(@6)) -> projectee#18450:(FStar.Pervasives.dtuple3<@5, @4, @3> a@2:(Tm_type) b@1:(Tm_delayed) c@0:(Tm_delayed)) -> Tot<0> Prims.bool) = (fun #a#18454:Type u#(@0) #b#18455:(uu___#18458:a@0:(Tm_type) -> GTot<(@3 + 1)> Type u#(@3)) #c#18456:(x#18459:a@1:(Tm_type) -> uu___#18460:(b@1:(Tm_delayed) x@0:(Tm_name: a#18454)) -> GTot<(@6 + 1)> Type u#(@6)) projectee#18457:(FStar.Pervasives.dtuple3<@5, @4, @3> a@2:(Tm_type) b@1:(Tm_delayed) c@0:(Tm_delayed)) -> (true $$ (residual) Prims.Tot Prims.bool))

Checked: [@FStar.Pervasives.Substitute]
(Projector FStar.Pervasives.Mkdtuple3 _1) val FStar.Pervasives.__proj__Mkdtuple3__item___1 <uu___17250, uu___17251, uu___17252> : (#a#18584:Type u#(uu___17252) -> #b#18585:(uu___#18588:a@0:(Tm_type) -> GTot<(uu___17251 + 1)> Type u#(uu___17251)) -> #c#18586:(x#18589:a@1:(Tm_type) -> uu___#18590:(b@1:(Tm_delayed) x@0:(Tm_name: a#18584)) -> GTot<(uu___17250 + 1)> Type u#(uu___17250)) -> projectee#18587:(FStar.Pervasives.dtuple3<uu___17250, uu___17251, uu___17252> a@2:(Tm_type) b@1:(Tm_delayed) c@0:(Tm_delayed)) -> Tot<uu___17252> a@3:(Tm_type))


Checked: [@FStar.Pervasives.Substitute]
visible (Projector FStar.Pervasives.Mkdtuple3 _1) let  FStar.Pervasives.__proj__Mkdtuple3__item___1 <uu___17250, uu___17251, uu___17252> : (#a#19543:Type u#(@0) -> #b#19544:(uu___#19547:a@0:(Tm_type) -> GTot<(@3 + 1)> Type u#(@3)) -> #c#19545:(x#19548:a@1:(Tm_type) -> uu___#19549:(b@1:(Tm_delayed) x@0:(Tm_name: a#19543)) -> GTot<(@6 + 1)> Type u#(@6)) -> projectee#19546:(FStar.Pervasives.dtuple3<@5, @4, @3> a@2:(Tm_type) b@1:(Tm_delayed) c@0:(Tm_delayed)) -> Tot<@4> a@3:(Tm_type)) = (fun #a#19550:Type u#(@0) #b#19551:(uu___#19563:a@0:(Tm_type) -> GTot<(@3 + 1)> Type u#(@3)) #c#19552:(x#19564:a@1:(Tm_type) -> uu___#19565:(b@1:(Tm_delayed) x@0:(Tm_name: a#19550)) -> GTot<(@6 + 1)> Type u#(@6)) projectee#19553:(FStar.Pervasives.dtuple3<@5, @4, @3> a@2:(Tm_type) b@1:(Tm_delayed) c@0:(Tm_delayed)) -> (((match projectee@0:(Tm_delayed) with
	| (FStar.Pervasives.Mkdtuple3 #.a#17280:Type u#(@4) #.b#17281:(uu___#19557:a@3:(Tm_type) -> GTot<(@6 + 1)> Type u#(@6)) #.c#17282:(x#19559:a@3:(Tm_type) -> uu___#19560:(b@3:(Tm_delayed) x@0:(Tm_name: a#19550)) -> GTot<(@8 + 1)> Type u#(@8)) _1#19554:a@3:(Tm_type) Pat_wild _2#19555 Pat_wild _3#19556)  -> _1@2:(Tm_name: a#19550)) <ascribed: [Prims.PURE] a@3:(Tm_type) ) $$ (residual) Prims.Tot a@3:(Tm_type)))

Checked: [@FStar.Pervasives.Substitute]
(Projector FStar.Pervasives.Mkdtuple3 _2) val FStar.Pervasives.__proj__Mkdtuple3__item___2 <uu___17250, uu___17251, uu___17252> : (#a#19806:Type u#(uu___17252) -> #b#19807:(uu___#19810:a@0:(Tm_type) -> GTot<(uu___17251 + 1)> Type u#(uu___17251)) -> #c#19808:(x#19811:a@1:(Tm_type) -> uu___#19812:(b@1:(Tm_delayed) x@0:(Tm_name: a#19806)) -> GTot<(uu___17250 + 1)> Type u#(uu___17250)) -> projectee#19809:(FStar.Pervasives.dtuple3<uu___17250, uu___17251, uu___17252> a@2:(Tm_type) b@1:(Tm_delayed) c@0:(Tm_delayed)) -> Tot<uu___17251> (b@2:(Tm_delayed) (FStar.Pervasives.__proj__Mkdtuple3__item___1<uu___17250, uu___17251, uu___17252> #a@3:(Tm_type) #b@2:(Tm_delayed) #c@1:(Tm_delayed) projectee@0:(Tm_delayed))))


Checked: [@FStar.Pervasives.Substitute]
visible (Projector FStar.Pervasives.Mkdtuple3 _2) let  FStar.Pervasives.__proj__Mkdtuple3__item___2 <uu___17250, uu___17251, uu___17252> : (#a#20787:Type u#(@0) -> #b#20788:(uu___#20791:a@0:(Tm_type) -> GTot<(@3 + 1)> Type u#(@3)) -> #c#20789:(x#20792:a@1:(Tm_type) -> uu___#20793:(b@1:(Tm_delayed) x@0:(Tm_name: a#20787)) -> GTot<(@6 + 1)> Type u#(@6)) -> projectee#20790:(FStar.Pervasives.dtuple3<@5, @4, @3> a@2:(Tm_type) b@1:(Tm_delayed) c@0:(Tm_delayed)) -> Tot<@5> (b@2:(Tm_delayed) (FStar.Pervasives.__proj__Mkdtuple3__item___1<@6, @5, @4> #a@3:(Tm_type) #b@2:(Tm_delayed) #c@1:(Tm_delayed) projectee@0:(Tm_delayed)))) = (fun #a#20794:Type u#(@0) #b#20795:(uu___#20807:a@0:(Tm_type) -> GTot<(@3 + 1)> Type u#(@3)) #c#20796:(x#20808:a@1:(Tm_type) -> uu___#20809:(b@1:(Tm_delayed) x@0:(Tm_name: a#20794)) -> GTot<(@6 + 1)> Type u#(@6)) projectee#20797:(FStar.Pervasives.dtuple3<@5, @4, @3> a@2:(Tm_type) b@1:(Tm_delayed) c@0:(Tm_delayed)) -> (((match projectee@0:(Tm_delayed) with
	| (FStar.Pervasives.Mkdtuple3 #.a#17286:Type u#(@4) #.b#17287:(uu___#20801:a@3:(Tm_type) -> GTot<(@6 + 1)> Type u#(@6)) #.c#17288:(x#20803:a@3:(Tm_type) -> uu___#20804:(b@3:(Tm_delayed) x@0:(Tm_name: a#20794)) -> GTot<(@8 + 1)> Type u#(@8)) Pat_wild _1#20798 _2#20799:(b@3:(Tm_delayed) _1@0:(Tm_name: a#20794)) Pat_wild _3#20800)  -> _2@1:(Tm_delayed)) <ascribed: [Prims.PURE] (b@2:(Tm_delayed) (FStar.Pervasives.__proj__Mkdtuple3__item___1<@6, @5, @4> #a@3:(Tm_type) #b@2:(Tm_delayed) #c@1:(Tm_delayed) projectee@0:(Tm_delayed))) ) $$ (residual) Prims.Tot (b@2:(Tm_delayed) (FStar.Pervasives.__proj__Mkdtuple3__item___1<@6, @5, @4> #a@3:(Tm_type) #b@2:(Tm_delayed) #c@1:(Tm_delayed) projectee@0:(Tm_delayed)))))

Checked: [@FStar.Pervasives.Substitute]
(Projector FStar.Pervasives.Mkdtuple3 _3) val FStar.Pervasives.__proj__Mkdtuple3__item___3 <uu___17250, uu___17251, uu___17252> : (#a#21172:Type u#(uu___17252) -> #b#21173:(uu___#21176:a@0:(Tm_type) -> GTot<(uu___17251 + 1)> Type u#(uu___17251)) -> #c#21174:(x#21177:a@1:(Tm_type) -> uu___#21178:(b@1:(Tm_delayed) x@0:(Tm_name: a#21172)) -> GTot<(uu___17250 + 1)> Type u#(uu___17250)) -> projectee#21175:(FStar.Pervasives.dtuple3<uu___17250, uu___17251, uu___17252> a@2:(Tm_type) b@1:(Tm_delayed) c@0:(Tm_delayed)) -> Tot<uu___17250> (c@1:(Tm_delayed) (FStar.Pervasives.__proj__Mkdtuple3__item___1<uu___17250, uu___17251, uu___17252> #a@3:(Tm_type) #b@2:(Tm_delayed) #c@1:(Tm_delayed) projectee@0:(Tm_delayed)) (FStar.Pervasives.__proj__Mkdtuple3__item___2<uu___17250, uu___17251, uu___17252> #a@3:(Tm_type) #b@2:(Tm_delayed) #c@1:(Tm_delayed) projectee@0:(Tm_delayed))))


Checked: [@FStar.Pervasives.Substitute]
visible (Projector FStar.Pervasives.Mkdtuple3 _3) let  FStar.Pervasives.__proj__Mkdtuple3__item___3 <uu___17250, uu___17251, uu___17252> : (#a#22175:Type u#(@0) -> #b#22176:(uu___#22179:a@0:(Tm_type) -> GTot<(@3 + 1)> Type u#(@3)) -> #c#22177:(x#22180:a@1:(Tm_type) -> uu___#22181:(b@1:(Tm_delayed) x@0:(Tm_name: a#22175)) -> GTot<(@6 + 1)> Type u#(@6)) -> projectee#22178:(FStar.Pervasives.dtuple3<@5, @4, @3> a@2:(Tm_type) b@1:(Tm_delayed) c@0:(Tm_delayed)) -> Tot<@6> (c@1:(Tm_delayed) (FStar.Pervasives.__proj__Mkdtuple3__item___1<@6, @5, @4> #a@3:(Tm_type) #b@2:(Tm_delayed) #c@1:(Tm_delayed) projectee@0:(Tm_delayed)) (FStar.Pervasives.__proj__Mkdtuple3__item___2<@6, @5, @4> #a@3:(Tm_type) #b@2:(Tm_delayed) #c@1:(Tm_delayed) projectee@0:(Tm_delayed)))) = (fun #a#22182:Type u#(@0) #b#22183:(uu___#22195:a@0:(Tm_type) -> GTot<(@3 + 1)> Type u#(@3)) #c#22184:(x#22196:a@1:(Tm_type) -> uu___#22197:(b@1:(Tm_delayed) x@0:(Tm_name: a#22182)) -> GTot<(@6 + 1)> Type u#(@6)) projectee#22185:(FStar.Pervasives.dtuple3<@5, @4, @3> a@2:(Tm_type) b@1:(Tm_delayed) c@0:(Tm_delayed)) -> (((match projectee@0:(Tm_delayed) with
	| (FStar.Pervasives.Mkdtuple3 #.a#17292:Type u#(@4) #.b#17293:(uu___#22189:a@3:(Tm_type) -> GTot<(@6 + 1)> Type u#(@6)) #.c#17294:(x#22191:a@3:(Tm_type) -> uu___#22192:(b@3:(Tm_delayed) x@0:(Tm_name: a#22182)) -> GTot<(@8 + 1)> Type u#(@8)) Pat_wild _1#22186 Pat_wild _2#22187 _3#22188:(c@3:(Tm_delayed) _1@1:(Tm_name: a#22182) _2@0:(Tm_delayed)))  -> _3@0:(Tm_delayed)) <ascribed: [Prims.PURE] (c@1:(Tm_delayed) (FStar.Pervasives.__proj__Mkdtuple3__item___1<@6, @5, @4> #a@3:(Tm_type) #b@2:(Tm_delayed) #c@1:(Tm_delayed) projectee@0:(Tm_delayed)) (FStar.Pervasives.__proj__Mkdtuple3__item___2<@6, @5, @4> #a@3:(Tm_type) #b@2:(Tm_delayed) #c@1:(Tm_delayed) projectee@0:(Tm_delayed))) ) $$ (residual) Prims.Tot (c@1:(Tm_delayed) (FStar.Pervasives.__proj__Mkdtuple3__item___1<@6, @5, @4> #a@3:(Tm_type) #b@2:(Tm_delayed) #c@1:(Tm_delayed) projectee@0:(Tm_delayed)) (FStar.Pervasives.__proj__Mkdtuple3__item___2<@6, @5, @4> #a@3:(Tm_type) #b@2:(Tm_delayed) #c@1:(Tm_delayed) projectee@0:(Tm_delayed)))))

Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: unopteq type FStar.Pervasives.dtuple4 a#23895:Type u#(@0) b#23896:(x#23899:a@0:(Tm_type) -> GTot<(@3 + 1)> Type u#(@3)) c#23897:(x#23900:a@1:(Tm_type) -> uu___#23901:(b@1:(Tm_delayed) x@0:(Tm_name: a#23895)) -> GTot<(@6 + 1)> Type u#(@6)) d#23898:(x#23902:a@2:(Tm_type) -> y#23903:(b@2:(Tm_delayed) x@0:(Tm_name: a#23895)) -> z#23904:(c@2:(Tm_delayed) x@1:(Tm_name: a#23895) y@0:(Tm_delayed)) -> GTot<(@9 + 1)> Type u#(@9)) : Type u#((max @7, @6, @5, @4))
datacon<uu___22596, uu___22597, uu___22598, uu___22599> FStar.Pervasives.Mkdtuple4 : (#.a#23905:Type u#(@0) -> #.b#23906:(x#23913:a@0:(Tm_type) -> GTot<(@3 + 1)> Type u#(@3)) -> #.c#23907:(x#23914:a@1:(Tm_type) -> uu___#23915:(b@1:(Tm_delayed) x@0:(Tm_name: a#23905)) -> GTot<(@6 + 1)> Type u#(@6)) -> #.d#23908:(x#23916:a@2:(Tm_type) -> y#23917:(b@2:(Tm_delayed) x@0:(Tm_name: a#23905)) -> z#23918:(c@2:(Tm_delayed) x@1:(Tm_name: a#23905) y@0:(Tm_delayed)) -> GTot<(@9 + 1)> Type u#(@9)) -> _1#23909:a@3:(Tm_type) -> _2#23910:(b@3:(Tm_delayed) _1@0:(Tm_name: a#23905)) -> _3#23911:(c@3:(Tm_delayed) _1@1:(Tm_name: a#23905) _2@0:(Tm_delayed)) -> _4#23912:(d@3:(Tm_delayed) _1@2:(Tm_name: a#23905) _2@1:(Tm_delayed) _3@0:(Tm_delayed)) -> Tot (FStar.Pervasives.dtuple4<@11, @10, @9, @8> a@7:(Tm_type) b@6:(Tm_delayed) c@5:(Tm_delayed) d@4:(Tm_delayed)))
val FStar.Pervasives.dtuple4_haseq : (Prims.l_and Prims.l_True (Prims.l_Forall<(uu___22599 + 1)> #Type u#(uu___22599) (fun a#23919:Type u#(uu___22599) -> ((Prims.l_Forall<(max (uu___22598 + 1), uu___22599)> #(x#23920:a@0:(Tm_type) -> GTot<(uu___22598 + 1)> Type u#(uu___22598)) (fun b#23921:(x#23938:a@0:(Tm_type) -> GTot<(uu___22598 + 1)> Type u#(uu___22598)) -> ((Prims.l_Forall<(max (uu___22597 + 1), uu___22598, uu___22599)> #(x#23922:a@1:(Tm_type) -> uu___#23923:(b@1:(Tm_delayed) x@0:(Tm_name: a#23919)) -> GTot<(uu___22597 + 1)> Type u#(uu___22597)) (fun c#23924:(x#23936:a@1:(Tm_type) -> uu___#23937:(b@1:(Tm_delayed) x@0:(Tm_name: a#23919)) -> GTot<(uu___22597 + 1)> Type u#(uu___22597)) -> ((Prims.l_Forall<(max (uu___22596 + 1), uu___22597, uu___22598, uu___22599)> #(x#23925:a@2:(Tm_type) -> y#23926:(b@2:(Tm_delayed) x@0:(Tm_name: a#23919)) -> z#23927:(c@2:(Tm_delayed) x@1:(Tm_name: a#23919) y@0:(Tm_delayed)) -> GTot<(uu___22596 + 1)> Type u#(uu___22596)) (fun d#23928:(x#23933:a@2:(Tm_type) -> y#23934:(b@2:(Tm_delayed) x@0:(Tm_name: a#23919)) -> z#23935:(c@2:(Tm_delayed) x@1:(Tm_name: a#23919) y@0:(Tm_delayed)) -> GTot<(uu___22596 + 1)> Type u#(uu___22596)) -> ({:pattern (Prims.hasEq<(max uu___22596, uu___22597, uu___22598, uu___22599)> (FStar.Pervasives.dtuple4<uu___22596, uu___22597, uu___22598, uu___22599> a@3:(Tm_type) b@2:(Tm_delayed) c@1:(Tm_delayed) d@0:(Tm_delayed)))} (Prims.l_imp (Prims.l_and Prims.l_True (Prims.l_Forall<uu___22599> #a@3:(Tm_type) (fun _1#23929:a@3:(Tm_type) -> ((Prims.l_Forall<uu___22598> #(b@3:(Tm_delayed) _1@0:(Tm_name: a#23919)) (fun _2#23930:(b@3:(Tm_delayed) _1@0:(Tm_name: a#23919)) -> ((Prims.l_Forall<uu___22597> #(c@3:(Tm_delayed) _1@1:(Tm_name: a#23919) _2@0:(Tm_delayed)) (fun _3#23931:(c@3:(Tm_delayed) _1@1:(Tm_name: a#23919) _2@0:(Tm_delayed)) -> ((Prims.l_Forall<uu___22596> #(d@3:(Tm_delayed) _1@2:(Tm_name: a#23919) _2@1:(Tm_delayed) _3@0:(Tm_delayed)) (fun _4#23932:(d@3:(Tm_delayed) _1@2:(Tm_name: a#23919) _2@1:(Tm_delayed) _3@0:(Tm_delayed)) -> ((Prims.l_and (Prims.l_and (Prims.l_and (Prims.l_and Prims.l_True (Prims.hasEq<uu___22599> a@7:(Tm_type))) (Prims.hasEq<uu___22598> (b@6:(Tm_delayed) _1@3:(Tm_name: a#23919)))) (Prims.hasEq<uu___22597> (c@5:(Tm_delayed) _1@3:(Tm_name: a#23919) _2@2:(Tm_delayed)))) (Prims.hasEq<uu___22596> (d@4:(Tm_delayed) _1@3:(Tm_name: a#23919) _2@2:(Tm_delayed) _3@1:(Tm_delayed)))) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.GTot Type u#(0))))) (Prims.hasEq<(max uu___22596, uu___22597, uu___22598, uu___22599)> (FStar.Pervasives.dtuple4<uu___22596, uu___22597, uu___22598, uu___22599> a@3:(Tm_type) b@2:(Tm_delayed) c@1:(Tm_delayed) d@0:(Tm_delayed)))) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.GTot Type u#(0)))) $$ (residual) Prims.GTot Type u#(0)))))

Checked: (Discriminator FStar.Pervasives.Mkdtuple4) val FStar.Pervasives.uu___is_Mkdtuple4 <uu___22596, uu___22597, uu___22598, uu___22599> : (#a#24486:Type u#(uu___22599) -> #b#24487:(x#24491:a@0:(Tm_type) -> GTot<(uu___22598 + 1)> Type u#(uu___22598)) -> #c#24488:(x#24492:a@1:(Tm_type) -> uu___#24493:(b@1:(Tm_delayed) x@0:(Tm_name: a#24486)) -> GTot<(uu___22597 + 1)> Type u#(uu___22597)) -> #d#24489:(x#24494:a@2:(Tm_type) -> y#24495:(b@2:(Tm_delayed) x@0:(Tm_name: a#24486)) -> z#24496:(c@2:(Tm_delayed) x@1:(Tm_name: a#24486) y@0:(Tm_delayed)) -> GTot<(uu___22596 + 1)> Type u#(uu___22596)) -> projectee#24490:(FStar.Pervasives.dtuple4<uu___22596, uu___22597, uu___22598, uu___22599> a@3:(Tm_type) b@2:(Tm_delayed) c@1:(Tm_delayed) d@0:(Tm_delayed)) -> Tot<0> Prims.bool)


Checked: visible (Discriminator FStar.Pervasives.Mkdtuple4) let  FStar.Pervasives.uu___is_Mkdtuple4 <uu___22596, uu___22597, uu___22598, uu___22599> : (#a#24871:Type u#(@0) -> #b#24872:(x#24876:a@0:(Tm_type) -> GTot<(@3 + 1)> Type u#(@3)) -> #c#24873:(x#24877:a@1:(Tm_type) -> uu___#24878:(b@1:(Tm_delayed) x@0:(Tm_name: a#24871)) -> GTot<(@6 + 1)> Type u#(@6)) -> #d#24874:(x#24879:a@2:(Tm_type) -> y#24880:(b@2:(Tm_delayed) x@0:(Tm_name: a#24871)) -> z#24881:(c@2:(Tm_delayed) x@1:(Tm_name: a#24871) y@0:(Tm_delayed)) -> GTot<(@9 + 1)> Type u#(@9)) -> projectee#24875:(FStar.Pervasives.dtuple4<@7, @6, @5, @4> a@3:(Tm_type) b@2:(Tm_delayed) c@1:(Tm_delayed) d@0:(Tm_delayed)) -> Tot<0> Prims.bool) = (fun #a#24882:Type u#(@0) #b#24883:(x#24887:a@0:(Tm_type) -> GTot<(@3 + 1)> Type u#(@3)) #c#24884:(x#24888:a@1:(Tm_type) -> uu___#24889:(b@1:(Tm_delayed) x@0:(Tm_name: a#24882)) -> GTot<(@6 + 1)> Type u#(@6)) #d#24885:(x#24890:a@2:(Tm_type) -> y#24891:(b@2:(Tm_delayed) x@0:(Tm_name: a#24882)) -> z#24892:(c@2:(Tm_delayed) x@1:(Tm_name: a#24882) y@0:(Tm_delayed)) -> GTot<(@9 + 1)> Type u#(@9)) projectee#24886:(FStar.Pervasives.dtuple4<@7, @6, @5, @4> a@3:(Tm_type) b@2:(Tm_delayed) c@1:(Tm_delayed) d@0:(Tm_delayed)) -> (true $$ (residual) Prims.Tot Prims.bool))

Checked: [@FStar.Pervasives.Substitute]
(Projector FStar.Pervasives.Mkdtuple4 _1) val FStar.Pervasives.__proj__Mkdtuple4__item___1 <uu___22596, uu___22597, uu___22598, uu___22599> : (#a#25142:Type u#(uu___22599) -> #b#25143:(x#25147:a@0:(Tm_type) -> GTot<(uu___22598 + 1)> Type u#(uu___22598)) -> #c#25144:(x#25148:a@1:(Tm_type) -> uu___#25149:(b@1:(Tm_delayed) x@0:(Tm_name: a#25142)) -> GTot<(uu___22597 + 1)> Type u#(uu___22597)) -> #d#25145:(x#25150:a@2:(Tm_type) -> y#25151:(b@2:(Tm_delayed) x@0:(Tm_name: a#25142)) -> z#25152:(c@2:(Tm_delayed) x@1:(Tm_name: a#25142) y@0:(Tm_delayed)) -> GTot<(uu___22596 + 1)> Type u#(uu___22596)) -> projectee#25146:(FStar.Pervasives.dtuple4<uu___22596, uu___22597, uu___22598, uu___22599> a@3:(Tm_type) b@2:(Tm_delayed) c@1:(Tm_delayed) d@0:(Tm_delayed)) -> Tot<uu___22599> a@4:(Tm_type))


Checked: [@FStar.Pervasives.Substitute]
visible (Projector FStar.Pervasives.Mkdtuple4 _1) let  FStar.Pervasives.__proj__Mkdtuple4__item___1 <uu___22596, uu___22597, uu___22598, uu___22599> : (#a#27247:Type u#(@0) -> #b#27248:(x#27252:a@0:(Tm_type) -> GTot<(@3 + 1)> Type u#(@3)) -> #c#27249:(x#27253:a@1:(Tm_type) -> uu___#27254:(b@1:(Tm_delayed) x@0:(Tm_name: a#27247)) -> GTot<(@6 + 1)> Type u#(@6)) -> #d#27250:(x#27255:a@2:(Tm_type) -> y#27256:(b@2:(Tm_delayed) x@0:(Tm_name: a#27247)) -> z#27257:(c@2:(Tm_delayed) x@1:(Tm_name: a#27247) y@0:(Tm_delayed)) -> GTot<(@9 + 1)> Type u#(@9)) -> projectee#27251:(FStar.Pervasives.dtuple4<@7, @6, @5, @4> a@3:(Tm_type) b@2:(Tm_delayed) c@1:(Tm_delayed) d@0:(Tm_delayed)) -> Tot<@5> a@4:(Tm_type)) = (fun #a#27258:Type u#(@0) #b#27259:(x#27279:a@0:(Tm_type) -> GTot<(@3 + 1)> Type u#(@3)) #c#27260:(x#27280:a@1:(Tm_type) -> uu___#27281:(b@1:(Tm_delayed) x@0:(Tm_name: a#27258)) -> GTot<(@6 + 1)> Type u#(@6)) #d#27261:(x#27282:a@2:(Tm_type) -> y#27283:(b@2:(Tm_delayed) x@0:(Tm_name: a#27258)) -> z#27284:(c@2:(Tm_delayed) x@1:(Tm_name: a#27258) y@0:(Tm_delayed)) -> GTot<(@9 + 1)> Type u#(@9)) projectee#27262:(FStar.Pervasives.dtuple4<@7, @6, @5, @4> a@3:(Tm_type) b@2:(Tm_delayed) c@1:(Tm_delayed) d@0:(Tm_delayed)) -> (((match projectee@0:(Tm_delayed) with
	| (FStar.Pervasives.Mkdtuple4 #.a#22638:Type u#(@5) #.b#22639:(x#27267:a@4:(Tm_type) -> GTot<(@7 + 1)> Type u#(@7)) #.c#22640:(x#27269:a@4:(Tm_type) -> uu___#27270:(b@4:(Tm_delayed) x@0:(Tm_name: a#27258)) -> GTot<(@9 + 1)> Type u#(@9)) #.d#22641:(x#27273:a@4:(Tm_type) -> y#27274:(b@4:(Tm_delayed) x@0:(Tm_name: a#27258)) -> z#27275:(c@4:(Tm_delayed) x@1:(Tm_name: a#27258) y@0:(Tm_delayed)) -> GTot<(@11 + 1)> Type u#(@11)) _1#27263:a@4:(Tm_type) Pat_wild _2#27264 Pat_wild _3#27265 Pat_wild _4#27266)  -> _1@3:(Tm_name: a#27258)) <ascribed: [Prims.PURE] a@4:(Tm_type) ) $$ (residual) Prims.Tot a@4:(Tm_type)))

Checked: [@FStar.Pervasives.Substitute]
(Projector FStar.Pervasives.Mkdtuple4 _2) val FStar.Pervasives.__proj__Mkdtuple4__item___2 <uu___22596, uu___22597, uu___22598, uu___22599> : (#a#27752:Type u#(uu___22599) -> #b#27753:(x#27757:a@0:(Tm_type) -> GTot<(uu___22598 + 1)> Type u#(uu___22598)) -> #c#27754:(x#27758:a@1:(Tm_type) -> uu___#27759:(b@1:(Tm_delayed) x@0:(Tm_name: a#27752)) -> GTot<(uu___22597 + 1)> Type u#(uu___22597)) -> #d#27755:(x#27760:a@2:(Tm_type) -> y#27761:(b@2:(Tm_delayed) x@0:(Tm_name: a#27752)) -> z#27762:(c@2:(Tm_delayed) x@1:(Tm_name: a#27752) y@0:(Tm_delayed)) -> GTot<(uu___22596 + 1)> Type u#(uu___22596)) -> projectee#27756:(FStar.Pervasives.dtuple4<uu___22596, uu___22597, uu___22598, uu___22599> a@3:(Tm_type) b@2:(Tm_delayed) c@1:(Tm_delayed) d@0:(Tm_delayed)) -> Tot<uu___22598> (b@3:(Tm_delayed) (FStar.Pervasives.__proj__Mkdtuple4__item___1<uu___22596, uu___22597, uu___22598, uu___22599> #a@4:(Tm_type) #b@3:(Tm_delayed) #c@2:(Tm_delayed) #d@1:(Tm_delayed) projectee@0:(Tm_delayed))))


Checked: [@FStar.Pervasives.Substitute]
visible (Projector FStar.Pervasives.Mkdtuple4 _2) let  FStar.Pervasives.__proj__Mkdtuple4__item___2 <uu___22596, uu___22597, uu___22598, uu___22599> : (#a#29883:Type u#(@0) -> #b#29884:(x#29888:a@0:(Tm_type) -> GTot<(@3 + 1)> Type u#(@3)) -> #c#29885:(x#29889:a@1:(Tm_type) -> uu___#29890:(b@1:(Tm_delayed) x@0:(Tm_name: a#29883)) -> GTot<(@6 + 1)> Type u#(@6)) -> #d#29886:(x#29891:a@2:(Tm_type) -> y#29892:(b@2:(Tm_delayed) x@0:(Tm_name: a#29883)) -> z#29893:(c@2:(Tm_delayed) x@1:(Tm_name: a#29883) y@0:(Tm_delayed)) -> GTot<(@9 + 1)> Type u#(@9)) -> projectee#29887:(FStar.Pervasives.dtuple4<@7, @6, @5, @4> a@3:(Tm_type) b@2:(Tm_delayed) c@1:(Tm_delayed) d@0:(Tm_delayed)) -> Tot<@6> (b@3:(Tm_delayed) (FStar.Pervasives.__proj__Mkdtuple4__item___1<@8, @7, @6, @5> #a@4:(Tm_type) #b@3:(Tm_delayed) #c@2:(Tm_delayed) #d@1:(Tm_delayed) projectee@0:(Tm_delayed)))) = (fun #a#29894:Type u#(@0) #b#29895:(x#29915:a@0:(Tm_type) -> GTot<(@3 + 1)> Type u#(@3)) #c#29896:(x#29916:a@1:(Tm_type) -> uu___#29917:(b@1:(Tm_delayed) x@0:(Tm_name: a#29894)) -> GTot<(@6 + 1)> Type u#(@6)) #d#29897:(x#29918:a@2:(Tm_type) -> y#29919:(b@2:(Tm_delayed) x@0:(Tm_name: a#29894)) -> z#29920:(c@2:(Tm_delayed) x@1:(Tm_name: a#29894) y@0:(Tm_delayed)) -> GTot<(@9 + 1)> Type u#(@9)) projectee#29898:(FStar.Pervasives.dtuple4<@7, @6, @5, @4> a@3:(Tm_type) b@2:(Tm_delayed) c@1:(Tm_delayed) d@0:(Tm_delayed)) -> (((match projectee@0:(Tm_delayed) with
	| (FStar.Pervasives.Mkdtuple4 #.a#22646:Type u#(@5) #.b#22647:(x#29903:a@4:(Tm_type) -> GTot<(@7 + 1)> Type u#(@7)) #.c#22648:(x#29905:a@4:(Tm_type) -> uu___#29906:(b@4:(Tm_delayed) x@0:(Tm_name: a#29894)) -> GTot<(@9 + 1)> Type u#(@9)) #.d#22649:(x#29909:a@4:(Tm_type) -> y#29910:(b@4:(Tm_delayed) x@0:(Tm_name: a#29894)) -> z#29911:(c@4:(Tm_delayed) x@1:(Tm_name: a#29894) y@0:(Tm_delayed)) -> GTot<(@11 + 1)> Type u#(@11)) Pat_wild _1#29899 _2#29900:(b@4:(Tm_delayed) _1@0:(Tm_name: a#29894)) Pat_wild _3#29901 Pat_wild _4#29902)  -> _2@2:(Tm_delayed)) <ascribed: [Prims.PURE] (b@3:(Tm_delayed) (FStar.Pervasives.__proj__Mkdtuple4__item___1<@8, @7, @6, @5> #a@4:(Tm_type) #b@3:(Tm_delayed) #c@2:(Tm_delayed) #d@1:(Tm_delayed) projectee@0:(Tm_delayed))) ) $$ (residual) Prims.Tot (b@3:(Tm_delayed) (FStar.Pervasives.__proj__Mkdtuple4__item___1<@8, @7, @6, @5> #a@4:(Tm_type) #b@3:(Tm_delayed) #c@2:(Tm_delayed) #d@1:(Tm_delayed) projectee@0:(Tm_delayed)))))

Checked: [@FStar.Pervasives.Substitute]
(Projector FStar.Pervasives.Mkdtuple4 _3) val FStar.Pervasives.__proj__Mkdtuple4__item___3 <uu___22596, uu___22597, uu___22598, uu___22599> : (#a#30612:Type u#(uu___22599) -> #b#30613:(x#30617:a@0:(Tm_type) -> GTot<(uu___22598 + 1)> Type u#(uu___22598)) -> #c#30614:(x#30618:a@1:(Tm_type) -> uu___#30619:(b@1:(Tm_delayed) x@0:(Tm_name: a#30612)) -> GTot<(uu___22597 + 1)> Type u#(uu___22597)) -> #d#30615:(x#30620:a@2:(Tm_type) -> y#30621:(b@2:(Tm_delayed) x@0:(Tm_name: a#30612)) -> z#30622:(c@2:(Tm_delayed) x@1:(Tm_name: a#30612) y@0:(Tm_delayed)) -> GTot<(uu___22596 + 1)> Type u#(uu___22596)) -> projectee#30616:(FStar.Pervasives.dtuple4<uu___22596, uu___22597, uu___22598, uu___22599> a@3:(Tm_type) b@2:(Tm_delayed) c@1:(Tm_delayed) d@0:(Tm_delayed)) -> Tot<uu___22597> (c@2:(Tm_delayed) (FStar.Pervasives.__proj__Mkdtuple4__item___1<uu___22596, uu___22597, uu___22598, uu___22599> #a@4:(Tm_type) #b@3:(Tm_delayed) #c@2:(Tm_delayed) #d@1:(Tm_delayed) projectee@0:(Tm_delayed)) (FStar.Pervasives.__proj__Mkdtuple4__item___2<uu___22596, uu___22597, uu___22598, uu___22599> #a@4:(Tm_type) #b@3:(Tm_delayed) #c@2:(Tm_delayed) #d@1:(Tm_delayed) projectee@0:(Tm_delayed))))


Checked: [@FStar.Pervasives.Substitute]
visible (Projector FStar.Pervasives.Mkdtuple4 _3) let  FStar.Pervasives.__proj__Mkdtuple4__item___3 <uu___22596, uu___22597, uu___22598, uu___22599> : (#a#32769:Type u#(@0) -> #b#32770:(x#32774:a@0:(Tm_type) -> GTot<(@3 + 1)> Type u#(@3)) -> #c#32771:(x#32775:a@1:(Tm_type) -> uu___#32776:(b@1:(Tm_delayed) x@0:(Tm_name: a#32769)) -> GTot<(@6 + 1)> Type u#(@6)) -> #d#32772:(x#32777:a@2:(Tm_type) -> y#32778:(b@2:(Tm_delayed) x@0:(Tm_name: a#32769)) -> z#32779:(c@2:(Tm_delayed) x@1:(Tm_name: a#32769) y@0:(Tm_delayed)) -> GTot<(@9 + 1)> Type u#(@9)) -> projectee#32773:(FStar.Pervasives.dtuple4<@7, @6, @5, @4> a@3:(Tm_type) b@2:(Tm_delayed) c@1:(Tm_delayed) d@0:(Tm_delayed)) -> Tot<@7> (c@2:(Tm_delayed) (FStar.Pervasives.__proj__Mkdtuple4__item___1<@8, @7, @6, @5> #a@4:(Tm_type) #b@3:(Tm_delayed) #c@2:(Tm_delayed) #d@1:(Tm_delayed) projectee@0:(Tm_delayed)) (FStar.Pervasives.__proj__Mkdtuple4__item___2<@8, @7, @6, @5> #a@4:(Tm_type) #b@3:(Tm_delayed) #c@2:(Tm_delayed) #d@1:(Tm_delayed) projectee@0:(Tm_delayed)))) = (fun #a#32780:Type u#(@0) #b#32781:(x#32801:a@0:(Tm_type) -> GTot<(@3 + 1)> Type u#(@3)) #c#32782:(x#32802:a@1:(Tm_type) -> uu___#32803:(b@1:(Tm_delayed) x@0:(Tm_name: a#32780)) -> GTot<(@6 + 1)> Type u#(@6)) #d#32783:(x#32804:a@2:(Tm_type) -> y#32805:(b@2:(Tm_delayed) x@0:(Tm_name: a#32780)) -> z#32806:(c@2:(Tm_delayed) x@1:(Tm_name: a#32780) y@0:(Tm_delayed)) -> GTot<(@9 + 1)> Type u#(@9)) projectee#32784:(FStar.Pervasives.dtuple4<@7, @6, @5, @4> a@3:(Tm_type) b@2:(Tm_delayed) c@1:(Tm_delayed) d@0:(Tm_delayed)) -> (((match projectee@0:(Tm_delayed) with
	| (FStar.Pervasives.Mkdtuple4 #.a#22654:Type u#(@5) #.b#22655:(x#32789:a@4:(Tm_type) -> GTot<(@7 + 1)> Type u#(@7)) #.c#22656:(x#32791:a@4:(Tm_type) -> uu___#32792:(b@4:(Tm_delayed) x@0:(Tm_name: a#32780)) -> GTot<(@9 + 1)> Type u#(@9)) #.d#22657:(x#32795:a@4:(Tm_type) -> y#32796:(b@4:(Tm_delayed) x@0:(Tm_name: a#32780)) -> z#32797:(c@4:(Tm_delayed) x@1:(Tm_name: a#32780) y@0:(Tm_delayed)) -> GTot<(@11 + 1)> Type u#(@11)) Pat_wild _1#32785 Pat_wild _2#32786 _3#32787:(c@4:(Tm_delayed) _1@1:(Tm_name: a#32780) _2@0:(Tm_delayed)) Pat_wild _4#32788)  -> _3@1:(Tm_delayed)) <ascribed: [Prims.PURE] (c@2:(Tm_delayed) (FStar.Pervasives.__proj__Mkdtuple4__item___1<@8, @7, @6, @5> #a@4:(Tm_type) #b@3:(Tm_delayed) #c@2:(Tm_delayed) #d@1:(Tm_delayed) projectee@0:(Tm_delayed)) (FStar.Pervasives.__proj__Mkdtuple4__item___2<@8, @7, @6, @5> #a@4:(Tm_type) #b@3:(Tm_delayed) #c@2:(Tm_delayed) #d@1:(Tm_delayed) projectee@0:(Tm_delayed))) ) $$ (residual) Prims.Tot (c@2:(Tm_delayed) (FStar.Pervasives.__proj__Mkdtuple4__item___1<@8, @7, @6, @5> #a@4:(Tm_type) #b@3:(Tm_delayed) #c@2:(Tm_delayed) #d@1:(Tm_delayed) projectee@0:(Tm_delayed)) (FStar.Pervasives.__proj__Mkdtuple4__item___2<@8, @7, @6, @5> #a@4:(Tm_type) #b@3:(Tm_delayed) #c@2:(Tm_delayed) #d@1:(Tm_delayed) projectee@0:(Tm_delayed)))))

Checked: [@FStar.Pervasives.Substitute]
(Projector FStar.Pervasives.Mkdtuple4 _4) val FStar.Pervasives.__proj__Mkdtuple4__item___4 <uu___22596, uu___22597, uu___22598, uu___22599> : (#a#33728:Type u#(uu___22599) -> #b#33729:(x#33733:a@0:(Tm_type) -> GTot<(uu___22598 + 1)> Type u#(uu___22598)) -> #c#33730:(x#33734:a@1:(Tm_type) -> uu___#33735:(b@1:(Tm_delayed) x@0:(Tm_name: a#33728)) -> GTot<(uu___22597 + 1)> Type u#(uu___22597)) -> #d#33731:(x#33736:a@2:(Tm_type) -> y#33737:(b@2:(Tm_delayed) x@0:(Tm_name: a#33728)) -> z#33738:(c@2:(Tm_delayed) x@1:(Tm_name: a#33728) y@0:(Tm_delayed)) -> GTot<(uu___22596 + 1)> Type u#(uu___22596)) -> projectee#33732:(FStar.Pervasives.dtuple4<uu___22596, uu___22597, uu___22598, uu___22599> a@3:(Tm_type) b@2:(Tm_delayed) c@1:(Tm_delayed) d@0:(Tm_delayed)) -> Tot<uu___22596> (d@1:(Tm_delayed) (FStar.Pervasives.__proj__Mkdtuple4__item___1<uu___22596, uu___22597, uu___22598, uu___22599> #a@4:(Tm_type) #b@3:(Tm_delayed) #c@2:(Tm_delayed) #d@1:(Tm_delayed) projectee@0:(Tm_delayed)) (FStar.Pervasives.__proj__Mkdtuple4__item___2<uu___22596, uu___22597, uu___22598, uu___22599> #a@4:(Tm_type) #b@3:(Tm_delayed) #c@2:(Tm_delayed) #d@1:(Tm_delayed) projectee@0:(Tm_delayed)) (FStar.Pervasives.__proj__Mkdtuple4__item___3<uu___22596, uu___22597, uu___22598, uu___22599> #a@4:(Tm_type) #b@3:(Tm_delayed) #c@2:(Tm_delayed) #d@1:(Tm_delayed) projectee@0:(Tm_delayed))))


Checked: [@FStar.Pervasives.Substitute]
visible (Projector FStar.Pervasives.Mkdtuple4 _4) let  FStar.Pervasives.__proj__Mkdtuple4__item___4 <uu___22596, uu___22597, uu___22598, uu___22599> : (#a#35911:Type u#(@0) -> #b#35912:(x#35916:a@0:(Tm_type) -> GTot<(@3 + 1)> Type u#(@3)) -> #c#35913:(x#35917:a@1:(Tm_type) -> uu___#35918:(b@1:(Tm_delayed) x@0:(Tm_name: a#35911)) -> GTot<(@6 + 1)> Type u#(@6)) -> #d#35914:(x#35919:a@2:(Tm_type) -> y#35920:(b@2:(Tm_delayed) x@0:(Tm_name: a#35911)) -> z#35921:(c@2:(Tm_delayed) x@1:(Tm_name: a#35911) y@0:(Tm_delayed)) -> GTot<(@9 + 1)> Type u#(@9)) -> projectee#35915:(FStar.Pervasives.dtuple4<@7, @6, @5, @4> a@3:(Tm_type) b@2:(Tm_delayed) c@1:(Tm_delayed) d@0:(Tm_delayed)) -> Tot<@8> (d@1:(Tm_delayed) (FStar.Pervasives.__proj__Mkdtuple4__item___1<@8, @7, @6, @5> #a@4:(Tm_type) #b@3:(Tm_delayed) #c@2:(Tm_delayed) #d@1:(Tm_delayed) projectee@0:(Tm_delayed)) (FStar.Pervasives.__proj__Mkdtuple4__item___2<@8, @7, @6, @5> #a@4:(Tm_type) #b@3:(Tm_delayed) #c@2:(Tm_delayed) #d@1:(Tm_delayed) projectee@0:(Tm_delayed)) (FStar.Pervasives.__proj__Mkdtuple4__item___3<@8, @7, @6, @5> #a@4:(Tm_type) #b@3:(Tm_delayed) #c@2:(Tm_delayed) #d@1:(Tm_delayed) projectee@0:(Tm_delayed)))) = (fun #a#35922:Type u#(@0) #b#35923:(x#35943:a@0:(Tm_type) -> GTot<(@3 + 1)> Type u#(@3)) #c#35924:(x#35944:a@1:(Tm_type) -> uu___#35945:(b@1:(Tm_delayed) x@0:(Tm_name: a#35922)) -> GTot<(@6 + 1)> Type u#(@6)) #d#35925:(x#35946:a@2:(Tm_type) -> y#35947:(b@2:(Tm_delayed) x@0:(Tm_name: a#35922)) -> z#35948:(c@2:(Tm_delayed) x@1:(Tm_name: a#35922) y@0:(Tm_delayed)) -> GTot<(@9 + 1)> Type u#(@9)) projectee#35926:(FStar.Pervasives.dtuple4<@7, @6, @5, @4> a@3:(Tm_type) b@2:(Tm_delayed) c@1:(Tm_delayed) d@0:(Tm_delayed)) -> (((match projectee@0:(Tm_delayed) with
	| (FStar.Pervasives.Mkdtuple4 #.a#22662:Type u#(@5) #.b#22663:(x#35931:a@4:(Tm_type) -> GTot<(@7 + 1)> Type u#(@7)) #.c#22664:(x#35933:a@4:(Tm_type) -> uu___#35934:(b@4:(Tm_delayed) x@0:(Tm_name: a#35922)) -> GTot<(@9 + 1)> Type u#(@9)) #.d#22665:(x#35937:a@4:(Tm_type) -> y#35938:(b@4:(Tm_delayed) x@0:(Tm_name: a#35922)) -> z#35939:(c@4:(Tm_delayed) x@1:(Tm_name: a#35922) y@0:(Tm_delayed)) -> GTot<(@11 + 1)> Type u#(@11)) Pat_wild _1#35927 Pat_wild _2#35928 Pat_wild _3#35929 _4#35930:(d@4:(Tm_delayed) _1@2:(Tm_name: a#35922) _2@1:(Tm_delayed) _3@0:(Tm_delayed)))  -> _4@0:(Tm_delayed)) <ascribed: [Prims.PURE] (d@1:(Tm_delayed) (FStar.Pervasives.__proj__Mkdtuple4__item___1<@8, @7, @6, @5> #a@4:(Tm_type) #b@3:(Tm_delayed) #c@2:(Tm_delayed) #d@1:(Tm_delayed) projectee@0:(Tm_delayed)) (FStar.Pervasives.__proj__Mkdtuple4__item___2<@8, @7, @6, @5> #a@4:(Tm_type) #b@3:(Tm_delayed) #c@2:(Tm_delayed) #d@1:(Tm_delayed) projectee@0:(Tm_delayed)) (FStar.Pervasives.__proj__Mkdtuple4__item___3<@8, @7, @6, @5> #a@4:(Tm_type) #b@3:(Tm_delayed) #c@2:(Tm_delayed) #d@1:(Tm_delayed) projectee@0:(Tm_delayed))) ) $$ (residual) Prims.Tot (d@1:(Tm_delayed) (FStar.Pervasives.__proj__Mkdtuple4__item___1<@8, @7, @6, @5> #a@4:(Tm_type) #b@3:(Tm_delayed) #c@2:(Tm_delayed) #d@1:(Tm_delayed) projectee@0:(Tm_delayed)) (FStar.Pervasives.__proj__Mkdtuple4__item___2<@8, @7, @6, @5> #a@4:(Tm_type) #b@3:(Tm_delayed) #c@2:(Tm_delayed) #d@1:(Tm_delayed) projectee@0:(Tm_delayed)) (FStar.Pervasives.__proj__Mkdtuple4__item___3<@8, @7, @6, @5> #a@4:(Tm_type) #b@3:(Tm_delayed) #c@2:(Tm_delayed) #d@1:(Tm_delayed) projectee@0:(Tm_delayed)))))

Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: [@(FStar.Pervasives.Comment "")]
val FStar.Pervasives.ignore <uu___35964> : (#a#35967:Type u#(uu___35964) -> uu___#35968:a@0:(Tm_type) -> Tot<0> Prims.unit)


Checked: [@(FStar.Pervasives.Comment "") (FStar.Pervasives.Comment "")]
visible let  FStar.Pervasives.ignore <uu___35964> : (#a#35985:Type u#(@0) -> x#35986:a@0:(Tm_type) -> Tot<0> Prims.unit) = (fun #a#35987:Type u#(@0) x#35988:a@0:(Tm_type) -> (() $$ (residual) Prims.Tot Prims.unit))

let FStar.Pervasives.false_elim : (#a#36188:Type u#(@0) -> u#36189:(u#36001:Prims.unit{(Prims.b2t false)}) -> Tot<@2> a@1:(Tm_type))
Checked: [@(FStar.Pervasives.Comment "")]
irreducible let rec FStar.Pervasives.false_elim <uu___36181> : (#a#36192:Type u#(@0) -> u#36193:(u#36001:Prims.unit{(Prims.b2t false)}) -> Tot<@2> a@1:(Tm_type)) = (fun #a#36195:Type u#(@0) u#36196:(u#36031:Prims.unit{(Prims.b2t false)}) -> (((FStar.Pervasives.false_elim<@2> #a@1:(Tm_type) ()) <ascribed: Tot<@2> a@1:(Tm_type) ) $$ (residual) Prims.Tot a@1:(Tm_type)))

Checked: type FStar.Pervasives.__internal_ocaml_attributes  : Type u#(0)
datacon<> FStar.Pervasives.PpxDerivingShow : FStar.Pervasives.__internal_ocaml_attributes
datacon<> FStar.Pervasives.PpxDerivingShowConstant : (_0#36412:Prims.string -> Tot FStar.Pervasives.__internal_ocaml_attributes)
datacon<> FStar.Pervasives.CInline : FStar.Pervasives.__internal_ocaml_attributes
datacon<> FStar.Pervasives.Substitute : FStar.Pervasives.__internal_ocaml_attributes
datacon<> FStar.Pervasives.Gc : FStar.Pervasives.__internal_ocaml_attributes
datacon<> FStar.Pervasives.Comment : (_0#36413:Prims.string -> Tot FStar.Pervasives.__internal_ocaml_attributes)
val FStar.Pervasives.__internal_ocaml_attributes_haseq : {:pattern (Prims.hasEq<0> FStar.Pervasives.__internal_ocaml_attributes)} (Prims.l_imp Prims.l_True (Prims.hasEq<0> FStar.Pervasives.__internal_ocaml_attributes))

Checked: (Discriminator FStar.Pervasives.PpxDerivingShow) val FStar.Pervasives.uu___is_PpxDerivingShow <> : (projectee#36461:FStar.Pervasives.__internal_ocaml_attributes -> Tot<0> Prims.bool)


Checked: visible (Discriminator FStar.Pervasives.PpxDerivingShow) let  FStar.Pervasives.uu___is_PpxDerivingShow <> : (projectee#36501:FStar.Pervasives.__internal_ocaml_attributes -> Tot<0> Prims.bool) = (fun projectee#36502:FStar.Pervasives.__internal_ocaml_attributes -> (((match projectee@0:(Tm_fvar: FStar.Pervasives.__internal_ocaml_attributes) with
	| (FStar.Pervasives.PpxDerivingShow )  -> true
	|Pat_wild uu___#36503  -> false) <ascribed: [Prims.PURE] Prims.bool ) $$ (residual) Prims.Tot Prims.bool))

Checked: (Discriminator FStar.Pervasives.PpxDerivingShowConstant) val FStar.Pervasives.uu___is_PpxDerivingShowConstant <> : (projectee#36514:FStar.Pervasives.__internal_ocaml_attributes -> Tot<0> Prims.bool)


Checked: visible (Discriminator FStar.Pervasives.PpxDerivingShowConstant) let  FStar.Pervasives.uu___is_PpxDerivingShowConstant <> : (projectee#36565:FStar.Pervasives.__internal_ocaml_attributes -> Tot<0> Prims.bool) = (fun projectee#36566:FStar.Pervasives.__internal_ocaml_attributes -> (((match projectee@0:(Tm_fvar: FStar.Pervasives.__internal_ocaml_attributes) with
	| (FStar.Pervasives.PpxDerivingShowConstant Pat_wild _0#36567)  -> true
	|Pat_wild uu___#36568  -> false) <ascribed: [Prims.PURE] Prims.bool ) $$ (residual) Prims.Tot Prims.bool))

Checked: [@FStar.Pervasives.Substitute]
(Projector FStar.Pervasives.PpxDerivingShowConstant _0) val FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0 <> : (projectee#36595:(uu___#36570:FStar.Pervasives.__internal_ocaml_attributes{(Prims.b2t (FStar.Pervasives.uu___is_PpxDerivingShowConstant uu___@0:(Tm_fvar: FStar.Pervasives.__internal_ocaml_attributes)))}) -> Tot<0> Prims.string)


Checked: [@FStar.Pervasives.Substitute]
visible (Projector FStar.Pervasives.PpxDerivingShowConstant _0) let  FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0 <> : (projectee#36660:(uu___#36570:FStar.Pervasives.__internal_ocaml_attributes{(Prims.b2t (FStar.Pervasives.uu___is_PpxDerivingShowConstant uu___@0:(Tm_fvar: FStar.Pervasives.__internal_ocaml_attributes)))}) -> Tot<0> Prims.string) = (fun projectee#36662:(uu___#36611:FStar.Pervasives.__internal_ocaml_attributes{(Prims.b2t (FStar.Pervasives.uu___is_PpxDerivingShowConstant uu___@0:(Tm_fvar: FStar.Pervasives.__internal_ocaml_attributes)))}) -> (((match projectee@0:(Tm_refine) with
	| (FStar.Pervasives.PpxDerivingShowConstant _0#36663:Prims.string)  -> _0@0:(Tm_fvar: Prims.string)) <ascribed: [Prims.PURE] Prims.string ) $$ (residual) Prims.Tot Prims.string))

Checked: (Discriminator FStar.Pervasives.CInline) val FStar.Pervasives.uu___is_CInline <> : (projectee#36675:FStar.Pervasives.__internal_ocaml_attributes -> Tot<0> Prims.bool)


Checked: visible (Discriminator FStar.Pervasives.CInline) let  FStar.Pervasives.uu___is_CInline <> : (projectee#36715:FStar.Pervasives.__internal_ocaml_attributes -> Tot<0> Prims.bool) = (fun projectee#36716:FStar.Pervasives.__internal_ocaml_attributes -> (((match projectee@0:(Tm_fvar: FStar.Pervasives.__internal_ocaml_attributes) with
	| (FStar.Pervasives.CInline )  -> true
	|Pat_wild uu___#36717  -> false) <ascribed: [Prims.PURE] Prims.bool ) $$ (residual) Prims.Tot Prims.bool))

Checked: (Discriminator FStar.Pervasives.Substitute) val FStar.Pervasives.uu___is_Substitute <> : (projectee#36728:FStar.Pervasives.__internal_ocaml_attributes -> Tot<0> Prims.bool)


Checked: visible (Discriminator FStar.Pervasives.Substitute) let  FStar.Pervasives.uu___is_Substitute <> : (projectee#36768:FStar.Pervasives.__internal_ocaml_attributes -> Tot<0> Prims.bool) = (fun projectee#36769:FStar.Pervasives.__internal_ocaml_attributes -> (((match projectee@0:(Tm_fvar: FStar.Pervasives.__internal_ocaml_attributes) with
	| (FStar.Pervasives.Substitute )  -> true
	|Pat_wild uu___#36770  -> false) <ascribed: [Prims.PURE] Prims.bool ) $$ (residual) Prims.Tot Prims.bool))

Checked: (Discriminator FStar.Pervasives.Gc) val FStar.Pervasives.uu___is_Gc <> : (projectee#36781:FStar.Pervasives.__internal_ocaml_attributes -> Tot<0> Prims.bool)


Checked: visible (Discriminator FStar.Pervasives.Gc) let  FStar.Pervasives.uu___is_Gc <> : (projectee#36821:FStar.Pervasives.__internal_ocaml_attributes -> Tot<0> Prims.bool) = (fun projectee#36822:FStar.Pervasives.__internal_ocaml_attributes -> (((match projectee@0:(Tm_fvar: FStar.Pervasives.__internal_ocaml_attributes) with
	| (FStar.Pervasives.Gc )  -> true
	|Pat_wild uu___#36823  -> false) <ascribed: [Prims.PURE] Prims.bool ) $$ (residual) Prims.Tot Prims.bool))

Checked: (Discriminator FStar.Pervasives.Comment) val FStar.Pervasives.uu___is_Comment <> : (projectee#36834:FStar.Pervasives.__internal_ocaml_attributes -> Tot<0> Prims.bool)


Checked: visible (Discriminator FStar.Pervasives.Comment) let  FStar.Pervasives.uu___is_Comment <> : (projectee#36885:FStar.Pervasives.__internal_ocaml_attributes -> Tot<0> Prims.bool) = (fun projectee#36886:FStar.Pervasives.__internal_ocaml_attributes -> (((match projectee@0:(Tm_fvar: FStar.Pervasives.__internal_ocaml_attributes) with
	| (FStar.Pervasives.Comment Pat_wild _0#36887)  -> true
	|Pat_wild uu___#36888  -> false) <ascribed: [Prims.PURE] Prims.bool ) $$ (residual) Prims.Tot Prims.bool))

Checked: [@FStar.Pervasives.Substitute]
(Projector FStar.Pervasives.Comment _0) val FStar.Pervasives.__proj__Comment__item___0 <> : (projectee#36915:(uu___#36890:FStar.Pervasives.__internal_ocaml_attributes{(Prims.b2t (FStar.Pervasives.uu___is_Comment uu___@0:(Tm_fvar: FStar.Pervasives.__internal_ocaml_attributes)))}) -> Tot<0> Prims.string)


Checked: [@FStar.Pervasives.Substitute]
visible (Projector FStar.Pervasives.Comment _0) let  FStar.Pervasives.__proj__Comment__item___0 <> : (projectee#36980:(uu___#36890:FStar.Pervasives.__internal_ocaml_attributes{(Prims.b2t (FStar.Pervasives.uu___is_Comment uu___@0:(Tm_fvar: FStar.Pervasives.__internal_ocaml_attributes)))}) -> Tot<0> Prims.string) = (fun projectee#36982:(uu___#36931:FStar.Pervasives.__internal_ocaml_attributes{(Prims.b2t (FStar.Pervasives.uu___is_Comment uu___@0:(Tm_fvar: FStar.Pervasives.__internal_ocaml_attributes)))}) -> (((match projectee@0:(Tm_refine) with
	| (FStar.Pervasives.Comment _0#36983:Prims.string)  -> _0@0:(Tm_fvar: Prims.string)) <ascribed: [Prims.PURE] Prims.string ) $$ (residual) Prims.Tot Prims.string))

Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: 
Checked: [@(FStar.Pervasives.Comment "")]
assume val Test.make_opaque <uu___18> : (#a#21:Type u#(uu___18) -> uu___#22:a@0:(Tm_type) -> Tot<uu___18> a@1:(Tm_type))

let Test.double : (x#47:Prims.int -> Tot<0> Prims.int)
Checked: [@(FStar.Pervasives.Comment "") (FStar.Pervasives.Comment "")]
visible let  Test.double <> : (x#49:Prims.int -> Tot<0> Prims.int) = (fun x#50:Prims.int -> (((Prims.op_Addition x@0:(Tm_fvar: Prims.int) x@0:(Tm_fvar: Prims.int)) <ascribed: Tot<0> Prims.int ) $$ (residual) Prims.Tot Prims.int))

let Test.opaque_double : (x#71:Prims.int -> Tot<0> Prims.int)
Checked: [@(FStar.Pervasives.Comment "")]
visible let  Test.opaque_double <> : (x#73:Prims.int -> Tot<0> Prims.int) = (Test.make_opaque<0> #(x#74:Prims.int -> Tot<0> Prims.int) Test.double)

Verified module: Test (28 milliseconds)
All verification conditions discharged successfully
