#
# Main file for building the ImportFStarTypes tool
#

# Python imports
import os, os.path
import sys
import collections
# Scons imports
import SCons.Util

# Imported identifiers defined in the SConstruct file
Import('env')

BUILD = '#tools/FsLexYacc/FsLexYacc.6.1.0/build'    # the '#' character makes this relative to the SConstruct file in the root of the repo
FSLEX = BUILD+'/fslex.exe'
FSYACC = BUILD+'/fsyacc.exe'
BIN = '#bin'

def fsyaccEmitter(target, source, env):
  # assume the initial target is a .fs file.  Add the .fsi target
  targetBase, targetExt = os.path.splitext(SCons.Util.to_String(target[0]))
  target.append(targetBase+'.fsi')
  return (target, source)

def add_fslexyacc(env):
  # probe for fslexyacc to ensure it is installed ahead of trying to use it to build
  fslexfile = File(FSLEX)
  if not os.path.isfile(str(fslexfile)) and not GetOption('clean'):
    raise EnvironmentError('FsLexYacc missing.  Please install to: "%s"'%str(fslexfile))
    
  env['FSLEX'] = fslexfile
  fslex = Builder(action='$MONO $FSLEX $SOURCE -o $TARGET',
                           suffix = '.fs',
                           src_suffix = '.fsl')
  env.Append(BUILDERS = {'FSLex' : fslex})
 
  env['FSYACC'] = File(FSYACC)
  fsyacc = Builder(action='$MONO $FSYACC --module "Parse" $SOURCE -o $TARGET',
                           suffix = '.fs',
                           src_suffix = '.fsy',
                           emitter = fsyaccEmitter)
  env.Append(BUILDERS = {'FSYacc' : fsyacc})

def build_tool(sources, refs):
  senv = env.Clone()
  # Wrap all paths in File() so they are appropriately adjusted to be relative to the SConstruct file
  senv['REFS']=[]
  for r in refs:
    senv.Append(REFS = '-r')
    senv.Append(REFS = File(r))
  if sys.platform != 'win32':
    senv['FSC']='fsharpc'
  else:
    # probe for the F# compiler on the PATH
    fsc = FindFile('fsc.exe', os.environ['PATH'].split(';'))
    if fsc == None:
      installdir = os.environ.get('FSHARPINSTALLDIR')
      if installdir == None:
        raise EnvironmentError('fsc.exe missing from path and FSHARPINSTALLDIR.')
      senv['FSC']=File(os.path.join(installdir, 'fsc.exe'))
    else:
      senv['FSC']=fsc
  tool = senv.Command(BIN+'/importFStarTypes.exe', sources,
    '$FSC -g --platform:anycpu --standalone --mlcompatibility -O $SOURCES -o $TARGET $REFS')
  for r in refs:
    Depends(tool, r)

add_fslexyacc(env)

SRC = [
  'src/ast.fs',
  'src/parse_util.fs',
  '../../obj/ImportFStarTypes/parse.fs',
  '../../obj/ImportFStarTypes/lex.fs',
  'src/main.fs'
  ]

REFS = [
  '../../tools/FsLexYacc/FsLexYacc.Runtime.6.1.0/lib/net40/FsLexYacc.Runtime.dll'
  ]

env.FSLex(target='../../obj/ImportFStarTypes/lex.fs', source='src/lex.fsl')
env.FSYacc(target='../../obj/ImportFStarTypes/parse.fs', source='src/parse.fsy')
build_tool(SRC, REFS)

