#
# Main file for building the Vale tool
#

# Python imports
import os, os.path
import sys
import collections
# Scons imports
import SCons.Util

# Imported identifiers defined in the SConstruct file
Import('env')
Import('win32')
Import('do_build')
Import('mono')
Import('dafny_path')

####################################################################
#
#   Code to drive F#, fslex_exe, and fsyacc_exe tools
#
####################################################################

bin_dir = Dir('#bin')
build_dir = Dir('#tools/FsLexYacc/FsLexYacc.6.1.0/build')    # the '#' character makes this relative to the SConstruct file in the root of the repo
fslex_exe = File(f'{build_dir}/fslex.exe')
fsyacc_exe = File(f'{build_dir}/fsyacc.exe')

def abspaths(files):
  return ' '.join([x.abspath for x in files])

def fsyaccEmitter(target, source, env):
  # assume the initial target is a .fs file.  Add the .fsi target
  targetBase, targetExt = os.path.splitext(SCons.Util.to_String(target[0]))
  target.append(targetBase + '.fsi')
  return (target, source)

def add_fslexyacc(env):
  # probe for fslexyacc to ensure it is installed ahead of trying to use it to build
  if not os.path.isfile(str(fslex_exe)):
    packages_config = File('#tools/Vale/src/packages.config')
    packages_dir = Dir('#tools/FsLexYacc')
    nuget_env = Environment(ENV = {'PATH' : os.environ['PATH']})
    if nuget_env.Execute(f'nuget restore {packages_config} -PackagesDirectory {packages_dir}'):
      print("Unable to run nuget in order to restore FsLexYacc.  See INSTALL.md for more details.")
      Exit(1)

def build_tool(sources, refs):
  senv = env.Clone()
  r_refs = " ".join([f'-r {x}' for x in refs])
  if win32:
    # probe for the F# compiler on the PATH
    fsc_exe = FindFile('fsc.exe', os.environ['PATH'].split(';'))
    if fsc_exe == None:
      installdir = os.environ.get('FSHARPINSTALLDIR')
      if installdir == None:
        raise EnvironmentError('fsc.exe missing from path and FSHARPINSTALLDIR.')
      fsc_exe = File(os.path.join(installdir, 'fsc.exe'))
    fsc_exe = f'"{fsc_exe}"'
  else:
    fsc_exe = 'fsharpc'
  tool_exe = File(f'{bin_dir}/vale.exe')
  tool_exe = senv.Command(tool_exe, sources,
    f'{fsc_exe} -g --platform:anycpu --standalone --mlcompatibility -O {abspaths(sources)} -o {tool_exe} {r_refs}')
  for r in refs:
    Depends(tool_exe, r)
  return tool_exe

####################################################################
#
#   Describe the files needed to build Vale
#
####################################################################

DAFNY_BIN = [
    'BoogieAbsInt.dll',
    'BoogieBasetypes.dll',
    'BoogieCodeContractsExtender.dll',
    'BoogieConcurrency.dll',
    'BoogieCore.dll',
    'BoogieDoomed.dll',
    'BoogieExecutionEngine.dll',
    'BoogieGraph.dll',
    'BoogieHoudini.dll',
    'BoogieModel.dll',
    'BoogieParserHelper.dll',
    'BoogieVCExpr.dll',
    'BoogieVCGeneration.dll',
    'DafnyPipeline.dll',
    'Dafny.exe'
  ]

TOOL_SOURCES = [
  'src/ast.fs',
  'src/ast_util.fs',
  'src/parse_util.fs',
  '../../obj/Vale/parse.fs',
  '../../obj/Vale/lex.fs',
  'src/emit_vale_text.fs',
  'src/typechecker.fs',
  'src/transform.fs',
  'src/emit_common_base.fs',
  'src/emit_common_quick_code.fs',
  'src/emit_common_lemmas.fs',
  'src/emit_common_quick_export.fs',
  'src/emit_common_top.fs',
  'src/emit_dafny_text.fs',
  'src/emit_dafny_direct.fs',
  'src/emit_fstar_text.fs',
  'src/main.fs'
  ]

# Dafny and Boogie binaries.  Z3 is handled separately.
VALE_BIN = DAFNY_BIN + [
  'DafnyPrelude.bpl',
  'DafnyRuntime.cs',
  'Provers.SMTLib.dll',
  ]

# build DafnyInterface.dll
DafnyInterface_dir = Dir('DafnyInterface/Source/DafnyInterface')
DafnyInterface_src = [DafnyInterface_dir.File(f)
                      for f in ['DafnyDriver.cs', 'Properties/AssemblyInfo.cs']]
DafnyInterface_refs = [Dir(dafny_path).File(f).abspath for f in [
    'BoogieAbsInt.dll',
    'BoogieConcurrency.dll',
    'BoogieCore.dll',
    'BoogieExecutionEngine.dll',
    'BoogieParserHelper.dll',
    'BoogieVCGeneration.dll',
    'Dafny.exe',
    'DafnyPipeline.dll',
    'Provers.SMTLib.dll',
]]

if win32:
  # The default search path for env.Detect() is just windows\system32.
  # Search along the OS PATH, then quote the name to avoid spaces-in-path issues.
  csc = env.WhereIs('csc.exe', path=os.environ['PATH'])
  if csc == None:
    raise EnvironmentError('csc.exe missing from path.')
  csc_exe = '\"' + csc + '\"'
else: # mono
  csc_exe = env.Detect('dmcs')

DafnyInterface_dll = File('#bin/DafnyInterface.dll')
env.Command(
  DafnyInterface_dll,
  DafnyInterface_src,
  f'{csc_exe} -t:library -out:{DafnyInterface_dll} {abspaths(DafnyInterface_src)} '
    + ' '.join(['-r:' + r for r in DafnyInterface_refs]))
Depends(DafnyInterface_dll, DafnyInterface_refs)

DAFNY_REFS = [Dir(dafny_path).File(f).abspath for f in DAFNY_BIN] + [
  str(DafnyInterface_dll),
  '../Dafny/Newtonsoft.Json.dll',
  '../../tools/FsLexYacc/FsLexYacc.Runtime.6.1.0/lib/net40/FsLexYacc.Runtime.dll'
  ]

# build vale.exe
lex_fsl = File('src/lex.fsl')
parse_fsy = File('src/parse.fsy')
lex_fs = File('#obj/Vale/lex.fs')
parse_fs = File('#obj/Vale/parse.fs')
env.Command(lex_fs, lex_fsl, f'{mono} {fslex_exe} {lex_fsl.abspath} -o {lex_fs}')
env.Command(parse_fs, parse_fsy, f'{mono} {fsyacc_exe} --module "Parse" {parse_fsy.abspath} -o {parse_fs}')
tool_exe = build_tool([File(x) for x in TOOL_SOURCES], [File(x) for x in DAFNY_REFS])

# copy the dependencies to the bin_dir directory, too
for s in VALE_BIN:
  b = env.CopyAs(Dir(bin_dir).File(s), Dir(dafny_path).File(s))
  Depends(tool_exe, b)
if win32:
  # we can use our win32 z3 binary, either natively or via WSL interop
  z3 = env.CopyAs(Dir(bin_dir).File('z3.exe'), Dir(dafny_path).File('z3.exe'))
  Depends(tool_exe, z3)
