include "common.vad"
include{:verbatim} "docs_helper.dfy"

#verbatim
function method va_code_IncrEax():va_code

lemma va_lemma_IncrEax(va_b0:va_codes, va_s0:va_state, va_sN:va_state)
    returns (va_bM:va_codes, va_sM:va_state)
    requires va_require(va_b0, va_code_IncrEax(), va_s0, va_sN)
    ensures  va_ensure(va_b0, va_bM, va_s0, va_sM, va_sN)
    requires va_get_ok(va_s0)
    ensures  va_get_ok(va_sM)
    requires 0 <= va_get_reg(EAX, va_s0) < 100
    ensures  va_get_reg(EAX, va_sM) == va_get_reg(EAX, va_s0) + 1
    ensures  va_state_eq(va_sM, va_update_reg(EAX, va_sM,
        va_update_ok(va_sM, va_s0)))
#endverbatim

var ok:bool {:state ok()};
var eax:int {:state reg(EAX)};
var ebx:int {:state reg(EBX)};

procedure IncrEax()
    modifies
        eax;
    requires
        0 <= eax < 100;
    ensures
        eax == old(eax) + 1;
    extern;

procedure Test()
    modifies
        eax; ebx;
    requires
        0 <= eax < 99;
    ensures
        eax == old(eax) + 2;
        ebx == old(ebx);
{
    IncrEax();
    IncrEax();
}

procedure TestControl()
    modifies
        eax;
    requires
        0 <= eax < 100;
    ensures
        eax == 100;
{
    if (eax < 50)
    {
        IncrEax();
        IncrEax();
    }

    while (eax < 100)
        invariant
            0 <= eax <= 100;
        decreases
            100 - eax;
    {
        IncrEax();
    }
}

procedure Add(inout x:reg, in y:opr)
    {:instruction Ins(InsAdd(x, y))}
    ensures
        x == old(x + y);
{
}

procedure TestAdd()
    modifies
        eax; ebx;
    requires
        0 <= eax < 99;
    ensures
        eax == old(eax) + 30;
        ebx == old(ebx) - 30;
{
    Add(eax, 10);
    Add(eax, 20);
    Add(ebx, (-30));
}

procedure TestAddAlias()
    lets
        a @= eax; b @= ebx;
    modifies
        a; b;
    requires
        0 <= a < 99;
    ensures
        a == old(a) + 30;
        b == old(b) - 30;
{
    Add(a, 10);
    Add(a, 20);
    Add(b, (-30));
}

procedure AddThree(inout x:reg)
    ensures
        x == old(x + 3);
{
    Add(x, 1);
    Add(x, 2);
}

procedure TestThree()
    modifies
        eax; ebx;
    requires
        0 <= eax < 99;
    ensures
        eax == old(eax) + 6;
        ebx == old(ebx) + 3;
{
    AddThree(eax);
    AddThree(eax);
    AddThree(ebx);
}

procedure AddMaybeThree(inline b:bool, inout x:reg)
    ensures
        x == old(x) + (if b then 3 else 1);
{
    Add(x, 1);
    inline if (b)
    {
        Add(x, 2);
    }
}

procedure TestMaybeThree()
    modifies
        eax; ebx;
    requires
        0 <= eax < 99;
    ensures
        eax == old(eax) + 3;
        ebx == old(ebx) + 1;
{
    AddMaybeThree(true, eax);
    AddMaybeThree(false, ebx);
}

procedure Add2N(inline n:int, inout x:reg)
    {:recursive}
    requires
        n >= 0;
    ensures
        x == old(x + 3 * n);
{
    inline if (n > 0)
    {
        Add(x, 1);
        Add(x, 2);
        Add2N(n - 1, x);
    }
}

procedure TestAdd2N()
    modifies
        eax;
    requires
        0 <= eax < 99;
    ensures
        eax == old(eax) + 9;
{
    Add2N(3, eax);
}

procedure Ghosts1()
    requires
        eax == 0;
    modifies
        eax; ebx;
    ensures
        ebx == old(ebx) + 100;
{
    let lo := ebx;
    let hi := lo + 100;
    while (eax < 100)
        invariant
            lo <= ebx <= hi;
            ebx == lo + eax;
        decreases
            100 - eax;
    {
        Add(eax, 1);
        Add(ebx, 1);
    }
}

procedure Ghosts2()
    lets
        lo := ebx;
        hi := lo + 100;
    requires
        eax == 0;
    modifies
        eax; ebx;
    ensures
        ebx == hi;
{
    while (eax < 100)
        invariant
            lo <= ebx <= hi;
            ebx == lo + eax;
        decreases
            100 - eax;
    {
        Add(eax, 1);
        Add(ebx, 1);
    }
}

procedure Ghosts3()
    requires
        eax == 0;
    modifies
        eax; ebx;
    ensures
        ebx == old(ebx) + 100;
{
    let lo := ebx;
    let hi := lo + 100;
    ghost var countdown:int := 100;

    while (eax < 100)
        invariant
            lo <= ebx <= hi;
            ebx == lo + eax;
            countdown == 100 - eax;
        decreases
            countdown;
    {
        Add(eax, 1);
        Add(ebx, 1);
        countdown := countdown - 1;
    }
}

ghost procedure ghost_example(ghost x:int) returns(ghost y:int)
    requires
        10 <= x;
    ensures
        20 <= y;
{
    y := x;
    y := y + x;
    ghost if (x > 100)
    {
        y := y + 1;
    }
    assert 20 <= y; // not necessary; for illustration purposes only
}

/* TODO:
ghost procedure lemma_cube_positive(ghost x:int)
    requires
        0 <= x;
    ensures
        0 <= x * x * x;
{
}

ghost procedure test_cube_positive()
    reads
        eax;
    ensures
        0 <= eax ==> 0 <= eax * eax * eax;
{
    assert 0 <= eax implies 0 <= eax * eax * eax by
    {
        lemma_cube_positive(eax);
    }
}
*/

ghost procedure lemma_commute_mul(ghost x:int, ghost y:int)
    ensures
        x * y == y * x;
{
}

ghost procedure lemma_square_plus_minus_half(ghost x:int)
    ensures
        x * (x + 1) / 2 == x * (x - 1) / 2 + x;
    extern;

procedure ArithmeticSum(ghost n:int)
    modifies
        eax; ebx;
    requires
        0 <= n;
        ebx == 0;
        eax == n;
    ensures
        ebx == n * (n + 1) / 2;
{
    while (0 < eax)
        invariant
            0 <= eax;
            ebx + eax * (eax + 1) / 2 == n * (n + 1) / 2;
        decreases
            eax;
    {
        lemma_square_plus_minus_half(eax);
        lemma_commute_mul(eax, eax - 1);
        Add(ebx, eax);
        Add(eax, (-1));
    }
}

procedure ArithmeticSum2(ghost n:int)
    modifies
        eax; ebx;
    requires
        0 <= n;
        ebx == 0;
        eax == n;
    ensures
        ebx == n * (n + 1) / 2;
{
    while (0 < eax)
        invariant
            0 <= eax;
            ebx + eax * (eax + 1) / 2 == n * (n + 1) / 2;
        decreases
            eax;
    {
        let b' := ebx + eax;
        let a' := eax - 1;
        assert b' + a' * (a' + 1) / 2 == n * (n + 1) / 2 by
        {
            lemma_square_plus_minus_half(eax);
            lemma_commute_mul(eax, eax - 1);
        }

        Add(ebx, eax);
        Add(eax, (-1));
    }
}

procedure ArithmeticSum3(ghost n:int)
    modifies
        eax; ebx;
    requires
        0 <= n;
        ebx == 0;
        eax == n;
    ensures
        ebx == n * (n + 1) / 2;
{
    while (0 < eax)
        invariant
            0 <= eax;
            ebx + eax * (eax + 1) / 2 == n * (n + 1) / 2;
        decreases
            eax;
    {
        let a := eax;
        let b := ebx;
        let b' := b + a;
        let a' := a - 1;
        calc ==
        {
            b' + a' * (a' + 1) / 2;
            ==
            b + a' * (a' + 1) / 2 + a;
            ==
            b + (a - 1) * a / 2 + a;
            == {lemma_commute_mul(a - 1, a);}
            b + a * (a - 1) / 2 + a;
            == {lemma_square_plus_minus_half(a);}
            b + a * (a + 1) / 2;
            ==
            n * (n + 1) / 2;
        }

        Add(ebx, eax);
        Add(eax, (-1));
    }
}

procedure Increment(inout x:reg)
    {:instruction Ins(InsAdd(x, OConst(1)))}
    ensures
        x == old(x) + 1;
{
}

procedure P()
    modifies
        eax;
    requires
        eax >= 0;
    ensures
        eax >= 2;
{
    Increment(eax);
    Increment(eax);
}

type my_bool:Type(0) := bool;
type nat:Type(0) := int_range(0, _);
type pos:Type(0) := int_range(1, _);
type int_map(a:Type(0)):Type(0) := map(int, a);

#verbatim
ghost method g1<a, b>(x:a, y:b)
{
}
#endverbatim

ghost procedure g1#[a:Type(0), b:Type(0)](ghost x:a, ghost y:b)
//    returns(ghost r:a, ghost s:b)
    extern;

ghost procedure g2()
{
//    let (r, s) := g1(10, true); // TODO
    g1(10, true);
    g1#[int, bool](10, true);
}

ghost procedure cast_test(ghost i:int)
    requires
        i >= 0;
{
    let n:nat := #nat(i);
}

procedure IncrTwo(inout dst1:reg, inout dst2:reg)
    requires
        dst1 < 100;
        dst2 < 100;
        @dst1 != @dst2;
    ensures
        dst1 == old(dst1) + 1;
        dst2 == old(dst2) + 1;
{
    Add(dst1, 1);
    Add(dst2, 1);
}

/* TODO
procedure Aliases()
    modifies
        eax; ebx;
    ensures
        ebx == old(eax) + 2;
{
    let x @= eax;
    Add(x, 1); // add 1 to eax
    Mov(ebx, x); // move eax into ebx
    let x @= ebx;
    Add(x, 1); // add 1 to ebx
}
*/

#verbatim
const seven:int := 7

function sum3(x:int, y:int, z:int):int {x + y + z}

function sqr(x:int):(z:int)
    ensures
        z >= 0;
{
    lemma_square(x);
    x * x
}

function id<a>(x:a):a {x}
#endverbatim

const seven:int extern;

function sum3(x:int, y:int, z:int):int extern;

function sqr(x:int):(z:int)
    ensures
        z >= 0;
    extern;

function id#[a:Type(0)](x:a):a extern;

ghost procedure test_functions()
{
    assert seven == 7;

    assert sum3(10, 20, 30) == 60;
    assert sqr(10) == 100;
    assert id(10) == 10;
    assert id#[int](10) == 10;

    let f:fun(int, int, int) -> int := sum3;
    assert f(10, 20, 30) == 60;

    let g:fun(int) -> int := id;
    assert g(10) == 10;
}

#verbatim
function{:opaque} opaque_sum(x:int, y:int):int {x + y}
#endverbatim

function opaque_sum(x:int, y:int):int extern;

ghost procedure test_opaque()
{
    reveal opaque_sum;
    assert opaque_sum(10, 20) == 30;
}

#token #+# precedence +
function operator(#+#) (a:int, b:int):int := opaque_sum;

ghost procedure test_opaque2()
{
    reveal opaque_sum;
    assert 10 #+# 20 == 30;
}

#verbatim
datatype int_pair = Mkint_pair(fst:int, snd:int)
#endverbatim

type int_pair:Type(0) extern;
function Mkint_pair(fst:int, snd:int):int_pair extern;
function operator(.fst) (p:int_pair):int extern;
function operator(.snd) (p:int_pair):int extern;
function operator(.fst :=) (p:int_pair, v:int):int_pair extern;
function operator(.snd :=) (p:int_pair, v:int):int_pair extern;

ghost procedure test_overload()
{
    let x := Mkint_pair(10, 20);
    assert x.fst == 10;
    assert x.snd == 20;
    let x2 := x.(fst := 11);
    assert x2.fst == 11;
    assert x2.snd == 20;
}

#verbatim
function{:opaque} f1(x:int, y:int):bool {x < y}
function{:opaque} f2(x:int, y:int):bool {x <= y}
lemma lemma_f1_f2(x:int, y:int)
    requires f1(x, y)
    ensures  f2(x, y)
{
    reveal_f1();
    reveal_f2();
}
#endverbatim

function f1(x:int, y:int):bool extern;
function f2(x:int, y:int):bool extern;

ghost procedure lemma_f1_f2(ghost x:int, ghost y:int)
    requires
        f1(x, y);
    ensures
        f2(x, y);
    extern;

ghost procedure test_forall()
    ensures
        forall(x:int, y:int){f1(x, y)}{f2(x, y)} f1(x, y) ==> f2(x, y);
{
    forall (x:int, y:int){f2(x, y)}
        f1(x, y) implies f2(x, y) by
    {
        lemma_f1_f2(x, y);
    }
}

/* TODO:
ghost procedure test_exists()
    requires
        exists(x:int, y:int){f1(x, y)} f1(x, y);
{
    let exists (x:int, y:int){f1(x, y)} f1(x, y);
    lemma_f1_f2(x, y);
}
*/
