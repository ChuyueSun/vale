include "common.vaf"
include{:fstar}{:open} "Types_s"

module Forall

#verbatim
open Common
#endverbatim

procedure Calls0()
{
    assert 1 + 2 == 3 by { assert 1 + 2 == 2 + 1; }
}

procedure Calls1()
{
    forall (x:int) {x + x} x >= 0 implies x + x >= x by
    {
        assert x + x >= 0;
    }
}

procedure Calls2()
{
    forall (x:int, y:int) {x + y} {y + x} x >= 0 && y >= 0 implies x + y == y + x by
    {
        assert x + y >= 0;
    }
}

procedure Calls3()
{
    forall (x:int, y:int, z:int) {x + y + z, y + x + z}
        x >= 0 && y >= 0 && z >= 0 implies
        x + y + z == y + x + z by
    {
        assert x + y + z >= x;
    }
}

procedure Calls4()
{
    forall (a:int, x:int, y:int, z:int) {a + x + y + z} {y + x + z + a}
        a >= 0 && x >= 0 && y >= 0 && z >= 0 implies
        a + x + y + z == y + x + z + a by
    {
        assert a + x + y + z >= a;
    }
}

procedure Calls5()
{
    forall (a:int, b:int, x:int, y:int, z:int) {a + b + x + y + z, y + x + z + a + b}
        a >= 0 && x >= 0 && y >= 0 && z >= 0 implies
        a + b + x + y + z == y + x + z + a + b by
    {
        assert a + x + y + z >= a;
    }
}

procedure Calls6()
{
    forall (a:int, b:int, c:int, x:int, y:int, z:int)
        a >= 0 && x >= 0 && y >= 0 && z >= 0 implies
        a + b + c + x + y + z == y + x + z + a + b + c by
    {
        assert a + x + y + z >= a;
    }
}

/* TODO
procedure p()
{
   assert forall (x, y) {x + y} {y + x} x > 0 && y > 0 ==> x + y > x && y + x > y;
   assert forall (x, y) {x + y, y + x} x > 0 && y > 0 ==> x + y == y + x;
}
*/

procedure Double(ghost g:int)
{
/*TODO: generate correct F* code for this:
    assert g >= 0 implies opaque_double(g) >= g by
    {
        assume opaque_double(g) == g + g;
    }
*/

    forall (x:int) x >= 0 implies opaque_double(x) >= x by
    {
        assume opaque_double(x) == x + x;
    }

    assert opaque_double(3) >= 3;
}
