include{:fstar}{:open} "FTypeFStar"

module FTypeVale

type fake_list (a:Type(0)):Type(0) extern;
type list_list (a:Type(0)):Type(0) := list(list(a));

function byte_test(x:byte, y:byte):byte extern;

var{:state ok()} ok:bool;
var{:state reg(EAX)} eax:int;
var{:state reg(EBX)} ebx:int;
var{:state reg(ESP)} esp:int;

operand_type reg32:nat32 :=
| inout eax
| inout ebx
;

operand_type mem32:nat32;
operand_type opr32:nat32 := reg32 | mem32 | in esp | const;

/*
type buf_typ:Type(0) extern;
const bt32:buf_typ extern;
const bt64:buf_typ extern;
type buf(bt:Dependent(buf_typ)):Type(0) extern;
type buf32:Type(0) := buf(dependent(bt32));
type buf64:Type(0) := buf(dependent(bt64));
function buf_len #[bt:Dependent(buf_typ)](b:buf(bt)):int extern;
*/

procedure{:typecheck} Expressions1(ghost x:int_range(10, 20)) returns(ghost y:int_range(15, 25))
{
    let a:bool := !true;
    let b:prop := !a;
    let c:prop := !b;
    let d:int := 5;
    let e:tuple(int, byte) := tuple(5, 5);
    let f:tuple(int, byte) := let z := tuple(5, 5) in z;
    let g:int_range((-20), (-10)) := (-x);
    let h:int_range((-20), (-10)) := let z := x in (-z);
    let i:int_range(13, 23) := x + 3;
    let j:int_range(7, 17) := x - 3;
    let k:int_range(30, 60) := x * 3;
    let l:int_range(30, 60) := x + 2 * x;
    let m:int_range(3, 6) := x / 3;
    let n:int_range(0, 2) := x % 3;
    let o:bool := a && a;
    let p:prop := a && b;
    let q:prop := b && a;
    let r:prop := b && b;
    let s:byte := if a then 10 else 20;
    let t := if a then 10 else 20;
    let u:byte := byte_test(x, byte_test(x, x));
    let v:byte := id(u);
    let w:tuple(byte, bool) := id(tuple(id(10), id(true)));
    let x := id#[byte](10);
    y := 20;
}

function ff(x1:byte, x2:byte, x3:byte, x4:byte):byte extern;

procedure{:typecheck} Expressions2(ghost x:int_range(10, 20)) returns(ghost y:int_range(15, 25))
    requires x >= 15;
{
    let a:list(byte) := Nil();
    let aa:list_list(byte) := nil();
    let b := nil#[byte]();
    let c := cons(100, Cons(200, b));
    let d := Mkmyrec(100, true);
    let e:int := d.r1;
    let f:bool := d.r2;
    let k:nat32 := id(5);
    let j:nat32 := (let m:byte := id#[byte](5) in m);
    let l:nat32 := id#[byte](5);
    y := #int_range(15, 20)(x);
    assert 7 < 8;
    if (3 < 3) {}
}

procedure{:typecheck} Dependents(ghost b:buf32, ghost bt:buf_typ)
{
    let c:buf(dependent(bt32)) := b;
    let d:int := buf_len(c);
}

procedure{:typecheck}{:testShouldFail} Fail(ghost b:buf32, ghost bt:buf_typ)
{
    ghost var x:buf(dependent(bt)); // bt is not a global constant
}

procedure{:typecheck}{:testShouldFail} Fail()
{
    let a:list(byte) := nil();
    let aa:list_list(byte) := a;
}

procedure{:typecheck}{:testShouldFail} Fail()
{
    let a:int := 0;
    a := 1; // not mutable
}

procedure{:typecheck}{:testShouldFail} Fail()
{
    let d := nil(); // needs type annotation on d or type argument to nil
}

procedure{:typecheck}{:testShouldFail} Fail()
{
    let b:list(int) := nil#[bool]();
}

procedure{:typecheck}{:testShouldFail} Fail(ghost x:int_range(10, 20)) returns(ghost y:int_range(15, 25))
{
    let t := 10;
    y := t;
}

// TODO: check that return values are assigned

procedure{:typecheck} Ghosts(ghost x:byte, ghost y:bool, inline z:byte)
{
}

procedure{:typecheck} Add(inout dst:opr32, src:opr32)
{
}

procedure{:typecheck} Statements(ghost x:byte, inline z:byte, o:reg32)
    reads esp;
    modifies eax; ebx;
{
    Ghosts(100, true, z);
    Add(eax, esp);
    Add(eax, id(id(5)));
    Add(eax, id(id(z)));
    Add(eax, id#[byte](id#[byte](5)) + 1);
    Add(eax, id(id(5)) + 1);
    Add(eax, 10);
    Add(eax, ebx);
    Add(eax, o);
}

procedure{:typecheck}{:testShouldFail} Fail(ghost x:byte, inline z:byte, o:reg32)
    reads esp;
    modifies eax; ebx;
{
    Add(o, eax);
}

procedure{:typecheck}{:testShouldFail} Fail(ghost x:byte)
    modifies eax; ebx; esp;
{
    Add(eax, id(id(x)));
}

procedure{:typecheck}{:testShouldFail} Fail()
    modifies eax; ebx; esp;
{
    Add(esp, eax);
}

procedure{:typecheck}{:testShouldFail} Fail(ghost x:byte, inline z:byte)
    modifies eax; ebx;
{
    Ghosts(100, true, x);
}

procedure{:typecheck}{:testShouldFail} Fail()
{
    let a:byte := byte_test(5);
}

procedure{:typecheck}{:testShouldFail} Fail()
{
    let a:byte := byte_test(200, 500);
}

procedure{:typecheck}{:testShouldFail} Fail(ghost x:int_range(10, 20)) returns(ghost y:int_range(15, 25))
{
    y := x;
}

procedure{:typecheck}{:testShouldFail} Fail()
{
    let a:bool := !5;
}

procedure{:typecheck}{:testShouldFail} Fail()
{
    let a:prop := !true;
    let b:bool := !a;
}

procedure{:typecheck}{:testShouldFail} Fail()
{
    let a:prop := !true;
    let b:bool := a && true;
}

procedure{:typecheck}{:testShouldFail} Fail(p:prop)
{
    let a:int := if p then 10 else 10;
}

procedure{:typecheck}{:testShouldFail} Fail()
{
    let e:tuple(int, byte) := tuple(5, 555);
}

procedure{:typecheck}{:testShouldFail} Fail()
{
    let y:bool := id(100);
}
