#verbatim
module Decls

open FStar.UInt
open Vale
open Semantics

let cf (n:int) = n % 2 = 1

#endverbatim

var{:state ok()} ok:bool;
var{:state reg(Rax)} rax:int;
var{:state reg(Rbx)} rbx:int;
var{:state reg(Rcx)} rcx:int;
var{:state reg(Rdx)} rdx:int;
var{:state flags()} efl:int;
var{:state mem()} mem:int;

procedure{:instruction Ins(Mov64(dst,src))} Mov64(inout dst_operand dst:uint64, operand src:uint64)
    ensures
        dst == old(src);
{
}

procedure{:instruction Ins(Add64(dst,src))} Add64Wrap(inout dst_operand dst:uint64, operand src:uint64)
    modifies
        efl;
    ensures
        dst == old(dst + src) % nat64_max;
        //Cf(efl) == old(dst + src >= 0x1_0000_0000_0000_0000);
{
}

procedure{:instruction Ins(AddLea64(dst, src1, src2))} AddLea64(out dst_operand dst:uint64, operand src1:uint64, operand src2:uint64)
    requires
        src1 + src2 < nat64_max;
    ensures
        dst == old(src1) + old(src2);
{
}

procedure{:instruction Ins(AddCarry64(dst, src))} Adc64Wrap(inout dst_operand dst:uint64, operand src:uint64)
    modifies
        efl;
    ensures
        dst == old(dst + src + (if cf(efl) then 1 else 0)) % nat64_max;
        cf(efl) == old(dst + src + (if cf(efl) then 1 else 0)) >= 0x1_0000_0000_0000_0000;
{
}

procedure{:instruction Ins(Sub64(dst, src))} Sub64(inout dst_operand dst:uint64, operand src:uint64)
    requires
        0 <= dst - src;
    modifies 
        efl;
    ensures
        dst == old(dst) - old(src);
{
}

procedure{:instruction Ins(Sub64(dst, src))} Sub64Wrap(inout dst_operand dst:uint64, operand src:uint64)
    modifies
        efl;
    ensures
        dst == old(dst - src) % nat64_max;
{
}

procedure{:instruction Ins(Mul64(src))} Mul64Wrap(operand src:uint64)
    modifies
        efl;
        rax;
        rdx;
    ensures
        rax + nat64_max * rdx == old(rax * src);
{
}

procedure{:instruction Ins(IMul64(dst, src))} IMul64Wrap(inout dst_operand dst:uint64, operand src:uint64)
    modifies
        efl;
    ensures
        dst == old(dst * src) % nat64_max;
{
}

#verbatim
let logxor x y = Semantics.logxor x y
let logand x y = Semantics.logand x y
let shift_left x y = Semantics.shift_left x y
let shift_right x y = Semantics.shift_right x y
#endverbatim

procedure{:instruction Ins(Xor64(dst, src))} Xor64(inout dst_operand dst:uint64, operand src:uint64)
    modifies 
        efl;
    ensures
        dst == old(logxor(dst,src));
{
}

procedure{:instruction Ins(And64(dst, src))} And64(inout dst_operand dst:uint64, operand src:uint64)
    modifies 
        efl;
    ensures
        dst == old(logand(dst,src));
{
}

procedure{:instruction Ins(Shl64(dst, amt))} Shl64(inout dst_operand dst:uint64, shift_amt amt:uint64)
    modifies
        efl;
//    requires
//        0 <= src < 64;
    ensures
        dst == old(shift_left(dst, amt));
{
}

procedure{:instruction Ins(Shr64(dst, amt))} Shr64(inout dst_operand dst:uint64, shift_amt amt:uint64)
    modifies
        efl;
    ensures
        dst == old(shift_right(dst, amt));
{
}

