include "../../../src/arch/x64/X64.Vale.Decls.vaf"

#verbatim interface implementation
module Quick
open X64.Machine_s
open X64.Vale
open X64.Vale.State_i
open X64.Vale.Decls
open X64.Vale.Quick_i
#endverbatim

#verbatim

unfold let normal_steps2 : list string =
  "X64.Vale.Decls.va_wp_Add64"::"X64.Vale.Decls.va_quick_Add64"::
  "Quick.codes_bench"::"Quick.wpCodes_bench"::
  "Quick.va_code_Bump3"::"Quick.va_qcode_Bump3"::
  "Quick.va_code_1_Incr3"::"Quick.va_qcode_1_Incr3"::
  normal_steps

unfold let normal (x:Type0) : Type0 = norm [iota; zeta; simplify; primops; delta_only normal_steps2] x

val wp_sound_norm (#a:Type0) (cs:codes) (qcs:quickCodes a cs) (s0:state) (k:state -> state -> a -> Type0) :
  Ghost (state * fuel * a)
    (normal (wp_sound_pre qcs s0 k))
    (wp_sound_post qcs s0 k)
let wp_sound_norm = wp_sound_wrap

val wp_sound_code_norm (#a:Type0) (c:code) (qc:quickCode a c) (s0:state) (k:state -> state -> a -> Type0) :
  Ghost (state * fuel * a)
    (normal (wp_sound_code_pre qc s0 k))
    (wp_sound_code_post qc s0 k)
let wp_sound_code_norm = wp_sound_code_wrap

val wp_run_norm (#a:Type0) (cs:codes) (qcs:quickCodes a cs) (s0:state) (update:state -> state -> state) (post:state -> state -> Type0) :
  GHOST (state * fuel * a) (wp_GHOST (Block cs) s0 update (fun k -> normal (wp_wrap cs qcs update post k s0)))
let wp_run_norm =
  wp_run

[@"opaque_to_smt"]
let codes_bench : codes = [
  va_code_Add64 (OReg Rax) (OConst 1);
  va_code_Add64 (OReg Rax) (OConst 1);
  va_code_Add64 (OReg Rax) (OConst 1);
  va_code_Add64 (OReg Rax) (OConst 1);
  va_code_Add64 (OReg Rax) (OConst 1);

  va_code_Add64 (OReg Rax) (OConst 1);
  va_code_Add64 (OReg Rax) (OConst 1);
  va_code_Add64 (OReg Rax) (OConst 1);
  va_code_Add64 (OReg Rax) (OConst 1);
  va_code_Add64 (OReg Rax) (OConst 1);

  va_code_Add64 (OReg Rax) (OConst 1);
  va_code_Add64 (OReg Rax) (OConst 1);
  va_code_Add64 (OReg Rax) (OConst 1);
  va_code_Add64 (OReg Rax) (OConst 1);
  va_code_Add64 (OReg Rax) (OConst 1);

  va_code_Add64 (OReg Rax) (OConst 1);
  va_code_Add64 (OReg Rax) (OConst 1);
  va_code_Add64 (OReg Rax) (OConst 1);
  va_code_Add64 (OReg Rax) (OConst 1);
  va_code_Add64 (OReg Rax) (OConst 1);
  ]

[@"opaque_to_smt"]
let wpCodes_bench : quickCodes unit codes_bench =
  QSeq (va_quick_Add64 (OReg Rax) (OConst 1)) (
  QSeq (va_quick_Add64 (OReg Rax) (OConst 1)) (
  QSeq (va_quick_Add64 (OReg Rax) (OConst 1)) (
  QSeq (va_quick_Add64 (OReg Rax) (OConst 1)) (
  QSeq (va_quick_Add64 (OReg Rax) (OConst 1)) (

  QSeq (va_quick_Add64 (OReg Rax) (OConst 1)) (
  QSeq (va_quick_Add64 (OReg Rax) (OConst 1)) (
  QSeq (va_quick_Add64 (OReg Rax) (OConst 1)) (
  QSeq (va_quick_Add64 (OReg Rax) (OConst 1)) (
  QSeq (va_quick_Add64 (OReg Rax) (OConst 1)) (

  QSeq (va_quick_Add64 (OReg Rax) (OConst 1)) (
  QSeq (va_quick_Add64 (OReg Rax) (OConst 1)) (
  QSeq (va_quick_Add64 (OReg Rax) (OConst 1)) (
  QSeq (va_quick_Add64 (OReg Rax) (OConst 1)) (
  QSeq (va_quick_Add64 (OReg Rax) (OConst 1)) (

  QSeq (va_quick_Add64 (OReg Rax) (OConst 1)) (
  QSeq (va_quick_Add64 (OReg Rax) (OConst 1)) (
  QSeq (va_quick_Add64 (OReg Rax) (OConst 1)) (
  QSeq (va_quick_Add64 (OReg Rax) (OConst 1)) (
  QSeq (va_quick_Add64 (OReg Rax) (OConst 1)) (

  QEmpty ()
  )))))
  )))))
  )))))
  )))))

//#reset-options "--debug Quick --debug_level SMTQuery"

let lemma_bench1 (s0:state) : Ghost (state * fuel)
  (requires
    s0.ok /\
    s0.regs Rax < 100
  )
  (ensures fun (sN, f0) ->
    eval (Block codes_bench) s0 f0 sN /\
    sN.ok /\
    sN.regs Rax == s0.regs Rax + 20 /\
    va_state_eq sN (va_update_reg Rax sN (va_update_flags sN s0))
  )
  =
(*
  let (sN, f0, ()) = wp_sound_norm codes_bench wpCodes_bench s0
    (fun s0 sN () ->
      sN.ok /\
      sN.regs Rax == s0.regs Rax + 20 /\
      va_state_match sN (va_update_reg Rax sN (va_update_flags sN s0))
    )
    in
*)
  let (sN, f0, ()) = wp_run_norm codes_bench wpCodes_bench s0
    (fun (s0:state) (sN:state) -> va_update_reg Rax sN (va_update_flags sN s0))
    (fun (sN:state) (sN':state) -> eval_reg Rax sN == eval_reg Rax sN' /\ sN.flags == sN'.flags)
    in
//  let (sN, f0, ()) = wp_run_norm codes_bench wpCodes_bench s0 in
  (sN, f0)
//#reset-options ""
#endverbatim

#verbatim interface
let rec self_int (i:int) : int = if i <= 0 then i else 1 + self_int (i - 1)
#endverbatim

#verbatim
let rec lemma_self_int (i:int) : Lemma
  (requires 0 <= i)
  (ensures self_int i == i)
  =
  if 0 < i then lemma_self_int (i - 1)

let va_assert (p:Type0) : Lemma (requires p) (ensures p) = ()
let va_assume (p:Type0) : Lemma (requires True) (ensures p) = assume p
#endverbatim

procedure{:quick exportOnly} Add64Ghosts(
        inout dst:dst_opr64,
        src:opr64,
        inline i:int,
        ghost b:buffer64,
        ghost g1:int,
        ghost g2:int)
    returns(
        ghost h1:int,
        ghost h2:int)
    modifies
        efl;
    requires
        i > 2;
        g1 == src;
        g2 > 3;
        src + dst < nat64_max;
    ensures
        h1 == g1;
        h2 > 4;
        dst == old(dst + src);
{
    h1 := g1;
    h2 := g2 + 1;
    Add64(dst, src);
}

procedure{:quick} Bump3(ghost g1:int) returns(ghost g2:int)
    modifies
        efl;
        rax;
    requires
        rax < 100;
        g1 == rax;
    ensures
        rax == old(rax) + self_int(3);
        g2 == old(rax);
{
    Add64(rax, 1);
    Add64(rax, 1);
    lemma_self_int(3);
    lemma_self_int(3);
    lemma_self_int(g1 + 1);
    lemma_self_int(old(rax));
    assert rax == old(rax) + 2;
    ghost var gtmp := g1 + rax;
    g2 := gtmp - rax;
    Add64(rax, 1);
}

procedure Incr3()
    modifies
        efl;
        rax;
    requires
        rax < 100;
    ensures
        rax == old(rax) + 3;
{
    assert{:quick_start} true;
    Add64(rax, 1);
    Add64(rax, 1);
    Add64(rax, 1);
}

