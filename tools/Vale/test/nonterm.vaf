include "common.vaf"
include{:fstar}{:open} "Types_s"

module Nonterm

#verbatim
open Common

let va_require (b0:va_codes) (c:va_code) (s0:va_state) (sN:va_state) : Type =
     Cons? b0
  /\ Cons?.hd b0 = c

let va_ensure (b0:va_codes) (b1:va_codes) (s0:va_state) (s1:va_state) (sN:va_state) : Type =
    Cons? b0
 /\ Cons?.tl b0 = b1

assume val va_lemma_block : b0:va_codes -> s0:va_state -> sN:va_state -> Ghost ((s1:va_state) * (c1:va_code) * (b1:va_codes))
  (requires True)
  (ensures (fun (s1, c1, b1) -> b0 = c1::b1))

assume val va_lemma_empty : s0:va_state -> sN:va_state -> Ghost (sM:va_state)
  (requires True)
  (ensures (fun sM -> s0 == sM /\ sM == sN))

assume val va_lemma_ifElse : ifb:ocmp -> ct:va_code -> cf:va_code -> s0:va_state -> sN:va_state -> Ghost (bool * va_state)
  (requires True)
  (ensures  (fun (cond, sM) -> cond == eval_ocmp s0 ifb /\ sM == s0))

let va_whileInv (b:ocmp) (c:va_code) (n:int) (s0:va_state) (sN:va_state) : Type0 =
  n >= 0

unfold let va_evalCond (b:ocmp) (s:va_state) : bool = eval_ocmp s b

assume val va_lemma_while : b:ocmp -> c:va_code -> s0:va_state -> sN:va_state -> Ghost ((n:nat) * (s1:va_state))
  (requires True)
  (ensures fun (n, s1) -> s1 == s0)

assume val va_lemma_whileTrue : b:ocmp -> c:va_code -> n:nat -> s0:va_state -> sN:va_state -> Ghost ((s0':va_state) * (s1:va_state))
  (requires n > 0)
  (ensures fun (s0', s1) ->
    s0' == s0 /\
    eval_ocmp s0 b
  )

assume val va_lemma_whileFalse : b:ocmp -> c:va_code -> s0:va_state -> sN:va_state -> Ghost (s1:va_state)
  (requires True)
  (ensures fun s1 ->
    s1 == s0 /\
    s0 == sN /\
    not (eval_ocmp s0 b)
  )
#endverbatim

procedure Imm(out x:reg, inline y:int)
    {:terminates false}
    ensures
        x == y;
{
    assume false;
}

procedure Increment(inout x:reg)
    {:terminates false}
    ensures
        x == old(x) + 1;
{
    assume false;
}

procedure Add(inout x:reg, in y:reg)
    {:terminates false}
    ensures
        x == old(x + y);
{
    assume false;
}

procedure AddReg(inout x:reg, in y:reg)
    {:terminates false}
    ensures
        x == old(x + y);
{
    Add(x, y); // coerces y from register to operand
}

procedure p()
    {:terminates false}
    modifies
        eax;
    requires
        eax >= 0;
    ensures
        eax >= 2;
{
    Increment(eax);
    Increment(eax);
}

procedure Calls()
    {:terminates false}
    modifies
        eax; ebx;
    ensures
        eax == old(eax) + 3;
{
    Increment(eax);
    Imm(ebx, double(1));
    assert ebx == 2;
    ghost if (ebx <= ebx)
    {
        assert 2 == 2;
    }
    if (ebx <= ebx)
    {
        Add(eax, ebx);
    }
    assert 1 + 2 == 3 by { assert 1 + 2 == 2 + 1; }
//    forall x:int, y:int {x + y} :| x >= 0 && y >= 0 :: x + y == y + x
//    {
//        assert x + y >= 0;
//        ghost if (x < y)
//        {
//            assert x <= y;
//        }
//    }
}

procedure WhileTest()
    {:terminates false}
    modifies
        eax; ebx;
    requires
        0 <= eax <= ebx;
    ensures
        0 <= eax <= ebx + 1;
        2 * ebx - eax == old(2 * ebx - eax);
        eax > ebx;
{
    while (eax <= ebx)
        invariant
            0 <= eax <= ebx + 1;
            2 * ebx - eax == old(2 * ebx - eax);
        decreases 1 + ebx - eax;
    {
        Increment(eax);
        Increment(eax);
        Increment(ebx);
    }
}

procedure Ghosts(ghost g1:int) returns(ghost g2:int)
   {:terminates false}
    ensures
        g2 == g1 + 1;
{
    assert opaque_double(3) == 6 by { reveal opaque_double; }
    assert opaque_double(3) == 6;
    //assert opaque_double(4) == 8;
    g2 := g1 + 1;
}

