include{:from BASE} "arch/x64/decls.vad"
include{:from BASE} "arch/x64/decls64.vad"

#verbatim
import opened x64def_s_temp = x64_def_s
import opened x64vale_temp = x64_vale_i
import opened x64decls_temp = x64_decls_i
import opened x64decls64_temp = x64_decls64_i
#endverbatim

procedure{:refined}{:timeLimitMultiplier 2} Copy64(inline taint:taint, ghost src_id:heaplet_id, ghost dst_id:heaplet_id)
    requires/ensures
        ValidSrcAddrs(mem, src_id, rsi, 64, taint, 32);
        ValidDstAddrs(mem, dst_id, rdi, 64, 32);
        src_id != dst_id;
    ensures
        forall i :: 0 <= i < 32 && i % 8 == 0 ==> mem[dst_id].mem64[rdi + i] == mem[src_id].mem64[rsi + i];
    reads
        rsi; rdi;
    modifies
        rax; rbx; rcx; rdx;
        mem;
{
    Load64(rax, rsi, 0, taint, src_id);
    Load64(rbx, rsi, 8, taint, src_id);
    Load64(rcx, rsi, 16, taint, src_id);
    Load64(rdx, rsi, 24, taint, src_id);
    Store64(rdi, rax, 0, taint, dst_id);
    Store64(rdi, rbx, 8, taint, dst_id);
    Store64(rdi, rcx, 16, taint, dst_id);
    Store64(rdi, rdx, 24, taint, dst_id);
}
