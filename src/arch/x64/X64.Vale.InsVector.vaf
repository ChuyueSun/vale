include "X64.Vale.InsBasic.vaf"
include "X64.Vale.InsMem.vaf"

module X64.Vale.InsVector

#verbatim{:interface}
open Words_s
open Words.Two_s
open Words.Four_s
open Types_s
open Types_i
open X64.Machine_s
open X64.Vale.State_i
open X64.Vale.Decls_i
open X64.Vale.QuickCode_i
open X64.Vale.QuickCodes_i
open X64.Vale.InsBasic
open X64.Vale.InsMem

// Annoying type problem workaround
let nat64_to_nat32 (n:nat64 { n < pow2_32 }) : nat32 = let m:nat = n in m
#endverbatim

#verbatim
open Types_s
open X64.Machine_s
open X64.Vale
open X64.Vale.State_i
open X64.Vale.StateLemmas_i
open X64.Vale.Decls_i
friend X64.Vale.Decls_i
module S = X64.Semantics_s
module P = X64.Print_s
#reset-options "--initial_fuel 2 --max_fuel 2 --z3rlimit 20"
#endverbatim

var{:state xmm(0)} xmm0:quad32;
var{:state xmm(1)} xmm1:quad32;
var{:state xmm(2)} xmm2:quad32;
var{:state xmm(3)} xmm3:quad32;
var{:state xmm(4)} xmm4:quad32;
var{:state xmm(5)} xmm5:quad32;
var{:state xmm(6)} xmm6:quad32;
var{:state xmm(7)} xmm7:quad32;
var{:state xmm(8)} xmm8:quad32;
var{:state xmm(9)} xmm9:quad32;
var{:state xmm(10)} xmm10:quad32;
var{:state xmm(11)} xmm11:quad32;
var{:state xmm(12)} xmm12:quad32;
var{:state xmm(13)} xmm13:quad32;
var{:state xmm(14)} xmm14:quad32;
var{:state xmm(15)} xmm15:quad32;

procedure{:instruction Ins(S.Paddd(dst, src))}{:quick exportOnly}
          Paddd(inout dst:xmm, src:xmm)
    modifies efl;
    ensures
        dst == old(Mkfour(
            add_wrap(dst.lo0, src.lo0),
            add_wrap(dst.lo1, src.lo1),
            add_wrap(dst.hi2, src.hi2),
            add_wrap(dst.hi3, src.hi3)));
{
}

procedure{:instruction Ins(S.Pxor(dst, src))}{:quick exportOnly} Pxor(inout dst:xmm, src:xmm)
  ensures
    dst == old(quad32_xor(dst, src));
{
}

procedure{:instruction Ins(S.Pslld(dst, amt))}{:quick exportOnly} Pslld(inout dst:xmm, inline amt:int)
    requires
        0 <= amt < 32;
    ensures
        dst == four_map((lambda i:nat32 :: ishl(i, amt)), old(dst));
{
}

procedure{:instruction Ins(S.Psrld(dst, amt))}{:quick exportOnly} Psrld(inout dst:xmm, inline amt:int)
    requires
        0 <= amt < 32;
    ensures
        dst == four_map((lambda i:nat32 :: ishr(i, amt)), old(dst));
{
}

procedure{:instruction Ins(S.Pshufd(dst, src, permutation))}{:quick exportOnly}
          Pshufd(inout dst:xmm, src:xmm, inline permutation:imm8)
    ensures
        dst == old(Mkfour(
            select_word(src, byte_to_twobits(permutation).lo0),
            select_word(src, byte_to_twobits(permutation).lo1),
            select_word(src, byte_to_twobits(permutation).hi2),
            select_word(src, byte_to_twobits(permutation).hi3)));
{
}

procedure{:instruction Ins(S.Pcmpeqd(dst, src))}{:quick exportOnly}
          Pcmpeqd(inout dst:xmm, src:xmm)
    ensures
        dst == old(Mkfour(
            if src.lo0 = dst.lo0 then 0xFFFFFFFF else 0,
            if src.lo1 = dst.lo1 then 0xFFFFFFFF else 0,
            if src.hi2 = dst.hi2 then 0xFFFFFFFF else 0,
            if src.hi3 = dst.hi3 then 0xFFFFFFFF else 0));
{
}

procedure{:instruction Ins(S.Pextrq(dst, src, index))}{:quick exportOnly}
          Pextrq(out dst:dst_opr64, src:xmm, inline index:imm8)
    requires
        index < 2;
    ensures
        dst == (if index = 0 then lo64(src) else hi64(src));
{
}

procedure{:instruction Ins(S.Pinsrd(dst, src, index))}{:quick exportOnly}
          Pinsrd(inout dst:xmm, src:opr64, inline index:imm8)
    requires
        src < pow2_32;
        index < 4;
    ensures
        dst == insert_nat32(old(dst), nat64_to_nat32(old(src)), index);
{
}

procedure {:quick exportOnly}
          PinsrdImm(inout dst:xmm, inline immediate:nat32, inline index:imm8, out tmp:reg_opr64)
    requires
        index < 4;
    ensures
        dst == insert_nat32(old(dst), immediate, index);
{
    Mov64(tmp, immediate);
    Pinsrd(dst, tmp, index);
}

procedure{:instruction Ins(S.Pinsrq(dst, src, index))}{:quick exportOnly}
          Pinsrq(inout dst:xmm, src:opr64, inline index:imm8)
    requires
        index < 2;
    ensures
        dst == insert_nat64(old(dst), src, index);
{
}

procedure {:quick exportOnly}
          PinsrqImm(inout dst:xmm, inline immediate:nat64, inline index:imm8, out tmp:reg_opr64)
    requires
        index < 2;
    ensures
        dst == insert_nat64(old(dst), immediate, index);
{
    Mov64(tmp, immediate);
    Pinsrq(dst, tmp, index);
}

procedure{:instruction Ins(S.VPSLLDQ(dst, src, 4))}{:quick exportOnly} VPSLLDQ4(inout dst:xmm, src:xmm)
    ensures
        dst == old(Mkfour(0, src.lo0, src.lo1, src.hi2));
{
}
