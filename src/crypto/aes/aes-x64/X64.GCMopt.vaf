include "../../../arch/x64/X64.Vale.InsBasic.vaf"
include "../../../arch/x64/X64.Vale.InsMem.vaf"
include "../../../arch/x64/X64.Vale.InsVector.vaf"
include "X64.AES.vaf"
include "X64.GF128_Mul.vaf"
include "X64.GCTR.vaf"
include "X64.GHash.vaf"

module X64.GCMopt

#verbatim{:interface}{:implementation}
open FStar.Seq
open Words_s
open Types_s
open Types_i
open AES_s
open GCTR_s
open GCTR_i
open GHash_s
open GHash_i
open GCM_s
open X64.AES
open GF128_s
open GF128_i
open X64.Poly1305.Math_i
open GCM_helpers_i
open X64.GHash
open X64.GCTR
open X64.Machine_s
open X64.Vale.State_i
open X64.Vale.Decls_i
open X64.Vale.InsBasic
open X64.Vale.InsMem
open X64.Vale.InsVector
open X64.Vale.InsAes
open X64.Vale.QuickCode_i
open X64.Vale.QuickCodes_i
open X64.GF128_Mul
#endverbatim

#verbatim{:interface}

let slice_workaround (s:seq quad32) (start_pos end_pos:int)  =
  if 0 <= start_pos && start_pos < end_pos && end_pos <= length s then
    slice s start_pos end_pos
  else
    create 1 (Mkfour 0 0 0 0)

#endverbatim


#reset-options "--z3rlimit 200 --z3refresh"

///////////////////////////
// GCM
///////////////////////////
procedure {:quick} gcm_one_pass_blocks(
    ghost in_b:buffer128,
    ghost out_b:buffer128,
    ghost key:aes_key_LE(AES_128),
    ghost round_keys:seq(quad32),
    ghost keys_b:buffer128
    )
    lets in_ptr @= rax; out_ptr @= rbx; len @= rcx; icb @= xmm7; mask @= xmm8; hash @= xmm1; one @= xmm10; h @= xmm11;

    reads
        r8; in_ptr; out_ptr; len; mask; h;

    modifies
        rdx; r9; r10; r12; xmm0; xmm1; xmm2; xmm3; xmm4; xmm5; xmm6; icb; one; mem; efl;

    requires
        // GCTR reqs
        buffers_disjoint128(in_b, out_b);
        buffers_disjoint128(keys_b, out_b);
        validSrcAddrs128(mem, in_ptr, in_b, len);
        validDstAddrs128(mem, out_ptr, out_b, len);
        in_ptr  + 16 * len < pow2_64;
        out_ptr + 16 * len < pow2_64;
        buffer_length(in_b) == buffer_length(out_b) /\ 256 * buffer_length(in_b) < pow2_32;
        mask == Mkfour(0x0C0D0E0F, 0x08090A0B, 0x04050607, 0x00010203);

        // AES reqs
        length(round_keys) == 11;
        round_keys == key_to_round_keys_LE(AES_128, key);
        r8 == buffer_addr(keys_b);
        validSrcAddrs128(mem, r8, keys_b, 11);
        buffer128_as_seq(mem, keys_b) == round_keys;
    ensures
        modifies_buffer128(out_b, old(mem), mem);
        validSrcAddrs128(mem, out_ptr, out_b, len);

        r9  ==  in_ptr + 16 * len;
        r10 == out_ptr + 16 * len;

        // GCTR
        //buffer128_as_seq(mem, out_b) == gctr_encrypt_LE(old(icb), buffer128_as_seq(old(mem), in_b), AES_128, key);
        gctr_partial(len, buffer128_as_seq(mem, in_b), buffer128_as_seq(mem, out_b), key, old(icb));
        icb == inc32(old(icb), old(len));

        // GHash
        len == 0 ==> hash == old(hash); 
        len > 0 ==> length(buffer128_as_seq(mem, out_b)) > 0 /\ hash == ghash_incremental(h, old(hash), slice_workaround(buffer128_as_seq(mem, out_b), 0, len));
{
    Mov64(rdx, 0);
    Mov64(r9, in_ptr);
    Mov64(r10, out_ptr);

    // Initialize counter
    ZeroXmm(one);
    PinsrdImm(one, 1, 0, r12);

    while (rdx != len)
        invariant
            //////////////////// Basic indexing //////////////////////
            0 <= rdx <= len;
            r9 == in_ptr + 16 * rdx;
            r10 == out_ptr + 16 * rdx;
            icb == inc32(old(icb), rdx);
            
            //////////////////// From requires //////////////////////
            // GCTR reqs
            buffers_disjoint128(in_b, out_b);
            buffers_disjoint128(keys_b, out_b);
            validSrcAddrs128(mem, in_ptr, in_b, len);
            validDstAddrs128(mem, out_ptr, out_b, len);
            in_ptr  + 16 * len < pow2_64;
            out_ptr + 16 * len < pow2_64;
            buffer_length(in_b) == buffer_length(out_b); 

            // AES reqs
            length(round_keys) == 11;
            round_keys == key_to_round_keys_LE(AES_128, key);
            r8 == buffer_addr(keys_b);
            validSrcAddrs128(mem, r8, keys_b, 11);
            buffer128_as_seq(mem, keys_b) == round_keys;

            //////////////////// GCTR invariants //////////////////////
            mask == Mkfour(0x0C0D0E0F, 0x08090A0B, 0x04050607, 0x00010203);
            one == Mkfour(1, 0, 0, 0);

            //////////////////// Postcondition goals //////////////////////
            modifies_buffer128(out_b, old(mem), mem);
            validSrcAddrs128(mem, out_ptr, out_b, len);
            gctr_partial(rdx, buffer128_as_seq(mem, in_b), buffer128_as_seq(mem, out_b), key, old(icb));

            rdx == 0 ==> hash == old(hash);
            rdx > 0 ==> hash == ghash_incremental(h, old(hash), slice_workaround(buffer128_as_seq(mem, out_b), 0, rdx));

//            forall j :: 0 <= j < rdx ==> 
//                        buffer128_read(out_b, j, mem) == 
//                        quad32_xor(index_workaround(buffer128_as_seq(mem, in_b), j), aes_encrypt_LE(AES_128, key, inc32(old(icb), j)));

        decreases
            len - rdx;
    {
        Mov128(xmm0, icb);
        Pshufb(xmm0, mask);
        AES128EncryptBlock(reverse_bytes_quad32(icb), key, round_keys, keys_b);

        Load128_buffer(xmm2, r9, 0, in_b, rdx);
        Pxor(xmm2, xmm0);
        Store128_buffer(r10, xmm2, 0, out_b, rdx);

        // Update our hash
        compute_ghash_incremental_register();

        Add64(rdx, 1);
        Add64(r9, 16);
        Add64(r10, 16);
        inc32(icb, one);
    }

//    assert length(buffer128_as_seq(mem, in_b)) == length(buffer128_as_seq(mem, out_b));
//    assert 256 * length(buffer128_as_seq(mem, in_b)) < pow2_32;
//    assert gctr_partial(length(buffer128_as_seq(mem, out_b)), buffer128_as_seq(mem, in_b), buffer128_as_seq(mem, out_b), key, old(icb));
//    

//// Call a helpful lemma
//    gctr_partial_completed(buffer128_as_seq(mem, in_b), buffer128_as_seq(mem, out_b), key, old(icb));
}

#reset-options "--z3rlimit 20"
procedure {:quick} {:verify true} gcm_one_pass(
    ghost in_b:buffer128,
    ghost out_b:buffer128,
    ghost key:aes_key_LE(AES_128),
    ghost round_keys:seq(quad32),
    ghost keys_b:buffer128
    )
    lets in_ptr @= rax; out_ptr @= rbx; num_bytes @= rcx; icb @= xmm7; mask @= xmm8; hash @= xmm1; one @= xmm10; h @= xmm11;

    reads
        r8; out_ptr; mask; h;

    modifies
        in_ptr; num_bytes; rdx; rsi; r9; r10; r12; xmm0; xmm1; xmm2; xmm3; xmm4; xmm5; xmm6; icb; one; mem; efl;

    requires
        // GCTR reqs
        buffers_disjoint128(in_b, out_b);
        buffers_disjoint128(keys_b, out_b);
        validSrcAddrs128(mem, in_ptr,  in_b,  bytes_to_quad_size(num_bytes));
        validDstAddrs128(mem, out_ptr, out_b, bytes_to_quad_size(num_bytes));
        in_ptr  + 16 * bytes_to_quad_size(num_bytes) < pow2_64;
        out_ptr + 16 * bytes_to_quad_size(num_bytes) < pow2_64;
        buffer_length(in_b)  == buffer_length(out_b) /\ 
        buffer_length(out_b) == bytes_to_quad_size(num_bytes) /\ 
        256 * buffer_length(in_b) < pow2_32;
        mask == Mkfour(0x0C0D0E0F, 0x08090A0B, 0x04050607, 0x00010203);

        // AES reqs
        length(round_keys) == 11;
        round_keys == key_to_round_keys_LE(AES_128, key);
        r8 == buffer_addr(keys_b);
        validSrcAddrs128(mem, r8, keys_b, 11);
        buffer128_as_seq(mem, keys_b) == round_keys;
    ensures
        modifies_buffer128(out_b, old(mem), mem);
        validSrcAddrs128(mem, out_ptr, out_b, bytes_to_quad_size(num_bytes));

        // GCTR
        let plain  := slice_work_around(le_seq_quad32_to_bytes(buffer128_as_seq(old(mem),  in_b)), old(num_bytes));
        let cipher := slice_work_around(le_seq_quad32_to_bytes(buffer128_as_seq(mem,      out_b)), old(num_bytes));
        cipher == gctr_encrypt_LE(old(icb), make_gctr_plain_LE(plain), AES_128, key);

        //gctr_partial(bytes_to_quad_size(num_bytes), buffer128_as_seq(mem, in_b), buffer128_as_seq(mem, out_b), key, old(icb));
        icb == inc32(old(icb), bytes_to_quad_size(old(num_bytes)));

        // GHash
        num_bytes == 0 ==> hash == old(hash); 

        let cipher_padded_bytes := pad_to_128_bits(cipher);
        let cipher_padded_quads := le_bytes_to_seq_quad32(cipher_padded_bytes);
        num_bytes > 0 ==> length(cipher_padded_quads) > 0 /\ 
            hash == ghash_incremental(h, old(hash), cipher_padded_quads);
{
    if (num_bytes > 0) {
//        lemma_poly_bits64();
//        Mov64(rsi, num_bytes);
//        And64(rsi, 15);
//        assert rsi == num_bytes % 16;
//        Shr64(num_bytes, 4);
//        ghost var num_blocks := old(num_bytes) / 16;
//        assert rcx == num_blocks;
//
//        gcm_one_pass_blocks(in_b, out_b, key, round_keys, keys_b);
//        assert icb == inc32(old(icb), num_blocks);
//
//        if (rsi == 0) {
//            gctr_bytes_no_extra(old(icb), in_b, out_b, key, round_keys, keys_b, old(in_ptr), old(out_ptr), old(num_bytes), icb);
//            ghash_incremental_bytes_no_extra(out_b, old(hash), old(out_ptr), old(num_bytes), hash, h);
//        } else {
//            assume false;
////            Mov128(xmm3, hash); // Save hash b/c gctr_bytes_extra will clobber it
////            gctr_bytes_extra(old(icb), in_b, out_b, key, round_keys, keys_b, old(in_ptr), old(out_ptr), old(num_bytes));
////            Mov64(rcx, rsi);    // ghash_incremental_bytes_extra expects num_bytes % 16 in rcx
////            Mov64(r9, r10);     // ghash_incremental_bytes_extra expects old(out_ptr) + 16 * num_blocks in r9
////            Mov128(hash, xmm3);
////            // TODO: Can optimize here by skipping the memory load in ghash_incremental_bytes_extra
////            //       and reading from xmm1 directly.  It's probably still in cache though
////            ghash_incremental_bytes_extra(out_b, old(out_ptr), old(hash), old(num_bytes)); 
//        }
        assume false;
    } 

    // Handle the else case:
    ghost var plain  := buffer128_as_seq(old(mem),  in_b);
    ghost var cipher := buffer128_as_seq(mem,      out_b);
    gctr_encrypt_empty(old(icb), plain, cipher, AES_128, key);

}

/*
procedure {:quick} gcm_core(
    ghost iv_BE:quad32,
    ghost plain_b:buffer128,
    ghost auth_b:buffer128,
    ghost out_b:buffer128,
    ghost key:aes_key_LE(AES_128),
    ghost round_keys:seq(quad32),
    ghost keys_b:buffer128
    )

    lets plain_ptr @= r14; out_ptr @= rbx; keys_ptr @= r8; auth_ptr @= rax;
    plain_num_bytes @= r13; auth_num_bytes @= r11; mask @= xmm8;
    iv @= xmm7;

    reads
        out_ptr; plain_ptr; keys_ptr; plain_num_bytes; auth_num_bytes; 

    modifies
        rax; rcx; rdx; rsi; r9; r10; r12; xmm0; xmm1; xmm2; xmm3; xmm4; xmm5; xmm10; xmm11; iv; mask;
        xmm6; 
        mem; efl; 


    requires
        // GCM reqs
        iv == reverse_bytes_quad32(iv_BE);
        buffers_disjoint128(plain_b, out_b);
        buffers_disjoint128(auth_b, out_b);
        buffers_disjoint128(keys_b, out_b);
        validSrcAddrs128(mem, plain_ptr, plain_b, bytes_to_quad_size(plain_num_bytes));
        validSrcAddrs128(mem, auth_ptr,  auth_b,  bytes_to_quad_size(auth_num_bytes));
        validDstAddrs128(mem, out_ptr,   out_b,   bytes_to_quad_size(plain_num_bytes));
        plain_ptr + 16 * bytes_to_quad_size(plain_num_bytes) < pow2_64;
        auth_ptr  + 16 * bytes_to_quad_size(auth_num_bytes)  < pow2_64;
        out_ptr   + 16 * bytes_to_quad_size(plain_num_bytes) < pow2_64;
        buffer_length(plain_b) == buffer_length(out_b) /\ buffer_length(out_b) == bytes_to_quad_size(plain_num_bytes) /\ 256 * buffer_length(plain_b) < pow2_32;
        buffer_length(auth_b) == bytes_to_quad_size(auth_num_bytes);

        // To simplify length calculations, restrict auth and plain length further
        256 * bytes_to_quad_size(auth_num_bytes)  < pow2_32;
        256 * bytes_to_quad_size(plain_num_bytes) < pow2_32;

        // AES reqs
        length(round_keys) == 11;
        round_keys == key_to_round_keys_LE(AES_128, key);
        validSrcAddrs128(mem, keys_ptr, keys_b, 11);
        buffer128_as_seq(mem, keys_b) == round_keys;
    ensures
        modifies_buffer128(out_b, old(mem), mem);
        validSrcAddrs128(mem, out_ptr, out_b, bytes_to_quad_size(plain_num_bytes));
        256 * buffer_length(plain_b) < pow2_32;
        256 * buffer_length(auth_b) < pow2_32;
        buffer128_as_seq(mem, out_b) == fst(gcm_encrypt_LE(AES_128, key, iv_BE, buffer128_as_seq(old(mem), plain_b), buffer128_as_seq(old(mem), auth_b)));
        create(1, xmm1) == snd(gcm_encrypt_LE(AES_128, key, iv_BE, buffer128_as_seq(old(mem), plain_b), buffer128_as_seq(old(mem), auth_b)));
{
    // let h = aes_encrypt_LE alg key (Mkfour 0 0 0 0) in
    ZeroXmm(xmm0);
    AES128EncryptBlock(xmm0, key, round_keys, keys_b); // h = xmm0 = aes_encrypt_LE alg key (Mkfour 0 0 0 0) in
    ghost var h := xmm0;
    Mov128(xmm11, xmm0);     // Save a copy of h

    // let j0_BE = Mkfour 1 iv_BE.lo1 iv_BE.hi2 iv_BE.hi3 in
    // (inc32 j0 1)
    InitPshufbMask(xmm8, r12);
    Pshufb(iv, xmm8); // to big endian
    PinsrdImm(iv, 2, 0, r12);
    // assert iv == inc32(Mkfour(1, iv_BE.lo1, iv_BE.hi2, iv_BE.hi3), 1);

    // Compute the hashes incrementally, starting with auth data
    //Mov64(rax, auth_ptr);
    //Mov64(rcx, auth_num_bytes);
    ZeroXmm(xmm1);
    ghost var y_0 := Mkfour(0, 0, 0, 0);
    // assert xmm1 == y_0;
    ghash_incremental_bytes(auth_b);
    ghost var y_auth := xmm1;

    // let c = gctr_encrypt_LE (inc32 j0 1) p alg key in
    Mov64(rax, plain_ptr);
    //Mov64(rbx, out_ptr);
    Mov64(rcx, plain_num_bytes);
    gcm_one_pass(plain_b, out_b, key, round_keys, keys_b);
    ghost var y_cipher := xmm1;

    // Prepare length fields
    ZeroXmm(xmm2);
    Mov64(rax, plain_num_bytes);
    IMul64(rax, 8);
    Pinsrd(xmm2, rax, 0);
    Mov64(rax, auth_num_bytes);
    IMul64(rax, 8);
    Pinsrd(xmm2, rax, 2);
    //InitPshufbMask(xmm0, r12);
    Pshufb(xmm2, xmm8);

    ghost var length_quad32 := xmm2;

    compute_ghash_incremental_register();
    ghost var y_final := xmm1;

    // Invoke lemma showing that incremental hashing works
    lemma_hash_append3(h, y_0, y_auth, y_cipher, y_final,
                       buffer128_as_seq(mem, auth_b),
                       buffer128_as_seq(mem, out_b),
                       create(1, length_quad32)); 
    // assert xmm1 == ghash_LE(h, append(buffer128_as_seq(mem, auth_b), append(buffer128_as_seq(mem, out_b), create(1, length_quad32)))); 
    ghost var hash := xmm1;

    PinsrdImm(iv, 1, 0, r12);   // Reconstruct j0 (this is all we need, since gctr_core says it only changes iv.lo0)
    // assert iv == iv_BE.(lo0 := 1);

    // Encrypt the hash value with gctr_register 
    gctr_register(key, round_keys, keys_b); // Encrypt using j0 and xmm0 = hash_value 
    // assert create(1, xmm1) == gctr_encrypt_LE(iv_BE.(lo0 := 1), create(1, hash), AES_128, key);
}

procedure {:quick} callee_save_registers(inline win:bool, ghost stack_b:buffer64)
    requires 
        valid_stack_slots(mem, rsp, stack_b, if win then 18 else 8);
    reads rbx; rbp; rdi; rsi; r12; r13; r14; r15; xmm6; xmm7; xmm8; xmm10; xmm11; 
    modifies mem; rsp; rax;
    ensures
        modifies_buffer(stack_b, old(mem), mem);
        valid_stack_slots(mem, rsp + (if win then 144 else 64), stack_b, if win then 18 else 8);

        rbx == buffer64_read(stack_b, 0, mem);
        rbp == buffer64_read(stack_b, 1, mem);
        rdi == buffer64_read(stack_b, 2, mem);
        rsi == buffer64_read(stack_b, 3, mem);
        r12 == buffer64_read(stack_b, 4, mem);
        r13 == buffer64_read(stack_b, 5, mem);
        r14 == buffer64_read(stack_b, 6, mem);
        r15 == buffer64_read(stack_b, 7, mem);

        win ==> lo64(xmm11) == buffer64_read(stack_b, 17, mem);
        win ==> hi64(xmm11) == buffer64_read(stack_b, 16, mem);
        win ==> lo64(xmm10) == buffer64_read(stack_b, 15, mem);
        win ==> hi64(xmm10) == buffer64_read(stack_b, 14, mem);
        win ==> lo64(xmm8)  == buffer64_read(stack_b, 13, mem);
        win ==> hi64(xmm8)  == buffer64_read(stack_b, 12, mem);
        win ==> lo64(xmm7)  == buffer64_read(stack_b, 11, mem);
        win ==> hi64(xmm7)  == buffer64_read(stack_b, 10, mem);
        win ==> lo64(xmm6)  == buffer64_read(stack_b, 9, mem);
        win ==> hi64(xmm6)  == buffer64_read(stack_b, 8, mem);
{
    inline if (win) {
        PushXmm(xmm11, rax, stack_b, 17);
        PushXmm(xmm10, rax, stack_b, 15);
        PushXmm(xmm8,  rax, stack_b, 13);
        PushXmm(xmm7,  rax, stack_b, 11);
        PushXmm(xmm6,  rax, stack_b,  9);
    }
    Push(r15, stack_b, 7);
    Push(r14, stack_b, 6);
    Push(r13, stack_b, 5);
    Push(r12, stack_b, 4);
    Push(rsi, stack_b, 3);
    Push(rdi, stack_b, 2);
    Push(rbp, stack_b, 1);
    Push(rbx, stack_b, 0);
}

procedure {:quick} callee_restore_registers(
        inline win:bool,
        ghost stack_b:buffer64,
        ghost old_xmm6:quad32,
        ghost old_xmm7:quad32,
        ghost old_xmm8:quad32,
        ghost old_xmm10:quad32,
        ghost old_xmm11:quad32
        )
    requires 
        valid_stack_slots(mem, rsp + (if win then 144 else 64), stack_b, if win then 18 else 8);

        win ==> lo64(old_xmm11) == buffer64_read(stack_b, 17, mem);
        win ==> hi64(old_xmm11) == buffer64_read(stack_b, 16, mem);
        win ==> lo64(old_xmm10) == buffer64_read(stack_b, 15, mem);
        win ==> hi64(old_xmm10) == buffer64_read(stack_b, 14, mem);
        win ==> lo64(old_xmm8)  == buffer64_read(stack_b, 13, mem);
        win ==> hi64(old_xmm8)  == buffer64_read(stack_b, 12, mem);
        win ==> lo64(old_xmm7)  == buffer64_read(stack_b, 11, mem);
        win ==> hi64(old_xmm7)  == buffer64_read(stack_b, 10, mem);
        win ==> lo64(old_xmm6)  == buffer64_read(stack_b, 9, mem);
        win ==> hi64(old_xmm6)  == buffer64_read(stack_b, 8, mem);
    reads mem; 
    modifies 
        rax; rbx; rbp; rdi; rsi; r12; r13; r14; r15; 
        xmm6; xmm7; xmm8; xmm10; xmm11;
        rsp;
    ensures
        rbx == buffer64_read(stack_b, 0, mem);
        rbp == buffer64_read(stack_b, 1, mem);
        rdi == buffer64_read(stack_b, 2, mem);
        rsi == buffer64_read(stack_b, 3, mem);
        r12 == buffer64_read(stack_b, 4, mem);
        r13 == buffer64_read(stack_b, 5, mem);
        r14 == buffer64_read(stack_b, 6, mem);
        r15 == buffer64_read(stack_b, 7, mem);

        win ==> xmm6  == old_xmm6;
        win ==> xmm7  == old_xmm7;
        win ==> xmm8  == old_xmm8;
        win ==> xmm10 == old_xmm10;
        win ==> xmm11 == old_xmm11;
        
        valid_stack_slots(mem, rsp, stack_b, if win then 18 else 8);
{
    Pop(rbx, stack_b, 0);
    Pop(rbp, stack_b, 1);
    Pop(rdi, stack_b, 2);
    Pop(rsi, stack_b, 3);
    Pop(r12, stack_b, 4);
    Pop(r13, stack_b, 5);
    Pop(r14, stack_b, 6);
    Pop(r15, stack_b, 7);

    inline if (win) {
        PopXmm(xmm6,  rax, stack_b,  8, old_xmm6);
        PopXmm(xmm7,  rax, stack_b, 10, old_xmm7);
        PopXmm(xmm8,  rax, stack_b, 12, old_xmm8);
        PopXmm(xmm10, rax, stack_b, 14, old_xmm10);
        PopXmm(xmm11, rax, stack_b, 16, old_xmm11);
    }
}

//#verbatim{:interface}
//let mk_gctr_plain (p:seq quad32) : gctr_plain_LE =
//  let open FStar.Mul in
//  if 256 * length p < pow2_32 then p else createEmpty
//#endverbatim


procedure {:quick} gcm_stdcall_inner(
    ghost args_b:buffer64,
    ghost iv_BE:quad32,

    ghost plain_b:buffer128,
    ghost auth_b:buffer128,
    ghost iv_b:buffer128,
    ghost out_b:buffer128,
    ghost tag_b:buffer128,

    ghost key:aes_key_LE(AES_128),
    ghost round_keys:seq(quad32),
    ghost keys_b:buffer128
    )
    modifies
        rax; rbx; rcx; rdx; rsi; r8; r9; r10; r11; r12; r13; r14; r15; xmm0; xmm1; xmm2; xmm3; xmm4; xmm5; xmm6; xmm7; xmm8; xmm10; xmm11; 
        mem; efl; 
    lets
        args_ptr := r9;

        plain_ptr         := buffer64_read(args_b, 0, mem);
        plain_len         := buffer64_read(args_b, 1, mem);
        auth_ptr          := buffer64_read(args_b, 2, mem);
        auth_len          := buffer64_read(args_b, 3, mem);
        iv_ptr            := buffer64_read(args_b, 4, mem);
        expanded_key_ptr  := buffer64_read(args_b, 5, mem);
        out_ptr           := buffer64_read(args_b, 6, mem);
        tag_ptr           := buffer64_read(args_b, 7, mem);

    requires
        validSrcAddrs64(mem, args_ptr, args_b, 8);

        buffers_disjoint128(plain_b, out_b);
        buffers_disjoint128(auth_b, out_b);
        buffers_disjoint128(keys_b, out_b);
        buffers_disjoint128(out_b, tag_b);
        
        validSrcAddrs128(mem, plain_ptr, plain_b, plain_len);
        validSrcAddrs128(mem, auth_ptr, auth_b, auth_len);
        validSrcAddrs128(mem, iv_ptr, iv_b, 1);
        validDstAddrs128(mem, out_ptr, out_b, plain_len);
        validDstAddrs128(mem, tag_ptr, tag_b, 1);

        plain_ptr + 16 * plain_len < pow2_64;
        auth_ptr + 16 * auth_len < pow2_64;
        out_ptr + 16 * plain_len < pow2_64;
        buffer_length(plain_b) == buffer_length(out_b) /\ buffer_length(out_b) == plain_len /\ 256 * buffer_length(plain_b) < pow2_32;
        buffer_length(auth_b) == auth_len;

        iv_BE == reverse_bytes_quad32(buffer128_read(iv_b, 0, mem));

        // To simplify length calculations, restrict auth and plain length further
        256 * auth_len < pow2_32;
        256 * plain_len < pow2_32;

        // AES reqs
        length(round_keys) == 11;
        round_keys == key_to_round_keys_LE(AES_128, key);
        validSrcAddrs128(mem, expanded_key_ptr, keys_b, 11);
        buffer128_as_seq(mem, keys_b) == round_keys;

    ensures
        modifies_buffer128_2(out_b, tag_b, old(mem), mem);

        validSrcAddrs128(mem, old(out_ptr), out_b, plain_len);
        validSrcAddrs128(mem, old(tag_ptr), tag_b, 1);

        256 * buffer_length(plain_b) < pow2_32;
        256 * buffer_length(auth_b) < pow2_32;
        buffer128_as_seq(mem, out_b) == fst(gcm_encrypt_LE(AES_128, key, iv_BE, buffer128_as_seq(old(mem), plain_b), buffer128_as_seq(old(mem), auth_b)));
        //create(1, buffer128_read(tag_b, 0, mem)) == snd(gcm_encrypt_LE(AES_128, key, iv_BE, mk_gctr_plain(buffer128_as_seq(old(mem), plain_b)), mk_gctr_plain(buffer128_as_seq(old(mem), auth_b))));
{
    Load64_buffer(r14, r9,  0, args_b, 0);
    Load64_buffer(r13, r9,  8, args_b, 1);
    Load64_buffer(rax, r9, 16, args_b, 2);
    Load64_buffer(r11, r9, 24, args_b, 3);
    Load64_buffer(r10, r9, 32, args_b, 4);
    Load64_buffer(r8,  r9, 40, args_b, 5);
    Load64_buffer(rbx, r9, 48, args_b, 6);
    Load64_buffer(r15, r9, 56, args_b, 7);

    // Load the IV into its XMM register
    Load128_buffer(xmm7, r10, 0, iv_b, 0);

    gcm_core(iv_BE, plain_b, auth_b, out_b, key, round_keys, keys_b);

    // Auth tag is still in xmm1, so save it to memory
    Store128_buffer(r15, xmm1, 0, tag_b, 0);
}

procedure {:quick} gcm_stdcall(
    inline win:bool,
    ghost args_b:buffer64,
    ghost iv_BE:quad32,

    ghost plain_b:buffer128,
    ghost auth_b:buffer128,
    ghost iv_b:buffer128,
    ghost out_b:buffer128,
    ghost tag_b:buffer128,
    ghost stack_b:buffer64,

    ghost key:aes_key_LE(AES_128),
    ghost round_keys:seq(quad32),
    ghost keys_b:buffer128
    )
    modifies
        rax; rbx; rcx; rdx; r8; r9; r10; r11; r12; r13; r14; r15; xmm0; xmm1; xmm2; xmm3; xmm4; xmm5; xmm6; xmm7; xmm8; xmm10; xmm11; 
        rbp; rdi; rsi; 
        mem; efl; rsp;
    lets
        args_ptr := if win then rcx else rdi;

        plain_ptr         := buffer64_read(args_b, 0, mem);
        plain_len         := buffer64_read(args_b, 1, mem);
        auth_ptr          := buffer64_read(args_b, 2, mem);
        auth_len          := buffer64_read(args_b, 3, mem);
        iv_ptr            := buffer64_read(args_b, 4, mem);
        expanded_key_ptr  := buffer64_read(args_b, 5, mem);
        out_ptr           := buffer64_read(args_b, 6, mem);
        tag_ptr           := buffer64_read(args_b, 7, mem);

    requires
        validSrcAddrs64(mem, args_ptr, args_b, 8);

        buffers_disjoint128(plain_b, out_b);
        buffers_disjoint128(auth_b, out_b);
        buffers_disjoint128(keys_b, out_b);
        buffers_disjoint128(out_b, tag_b);
        
        buffers_disjoint(args_b, stack_b);

        locs_disjoint(list(loc_buffer(stack_b), loc_buffer(plain_b)));
        locs_disjoint(list(loc_buffer(stack_b), loc_buffer(auth_b)));
        locs_disjoint(list(loc_buffer(stack_b), loc_buffer(iv_b)));
        locs_disjoint(list(loc_buffer(stack_b), loc_buffer(out_b)));
        locs_disjoint(list(loc_buffer(stack_b), loc_buffer(tag_b)));
        locs_disjoint(list(loc_buffer(stack_b), loc_buffer(keys_b)));

        validSrcAddrs128(mem, plain_ptr, plain_b, plain_len);
        validSrcAddrs128(mem, auth_ptr, auth_b, auth_len);
        validSrcAddrs128(mem, iv_ptr, iv_b, 1);
        validDstAddrs128(mem, out_ptr, out_b, plain_len);
        validDstAddrs128(mem, tag_ptr, tag_b, 1);

        valid_stack_slots(mem, rsp, stack_b, if win then 18 else 8);

        plain_ptr + 16 * plain_len < pow2_64;
        auth_ptr + 16 * auth_len < pow2_64;
        out_ptr + 16 * plain_len < pow2_64;
        buffer_length(plain_b) == buffer_length(out_b) /\ buffer_length(out_b) == plain_len /\ 256 * buffer_length(plain_b) < pow2_32;
        buffer_length(auth_b) == auth_len;

        iv_BE == reverse_bytes_quad32(buffer128_read(iv_b, 0, mem));

        // To simplify length calculations, restrict auth and plain length further
        256 * auth_len < pow2_32;
        256 * plain_len < pow2_32;

        // AES reqs
        length(round_keys) == 11;
        round_keys == key_to_round_keys_LE(AES_128, key);
        validSrcAddrs128(mem, expanded_key_ptr, keys_b, 11);
        buffer128_as_seq(mem, keys_b) == round_keys;

    ensures
        modifies_mem(loc_union(loc_union(loc_buffer(stack_b), loc_buffer(out_b)), loc_buffer(tag_b)), old(mem), mem);

        validSrcAddrs128(mem, old(out_ptr), out_b, plain_len);
        validSrcAddrs128(mem, old(tag_ptr), tag_b, 1);

        256 * buffer_length(plain_b) < pow2_32;
        256 * buffer_length(auth_b) < pow2_32;
        buffer128_as_seq(mem, out_b) == fst(gcm_encrypt_LE(AES_128, key, iv_BE, buffer128_as_seq(old(mem), plain_b), buffer128_as_seq(old(mem), auth_b)));
//        create(1, buffer128_read(tag_b, 0, mem)) == snd(gcm_encrypt_LE(AES_128, key, iv_BE, mk_gctr_plain(buffer128_as_seq(old(mem), plain_b)), mk_gctr_plain(buffer128_as_seq(old(mem), auth_b))));

        // Calling convention for caller/callee saved registers
        rsp == old(rsp);

        // Windows:
        win ==> rbx == old(rbx);
        win ==> rbp == old(rbp);
        win ==> rdi == old(rdi);
        win ==> rsi == old(rsi);
        win ==> r12 == old(r12);
        win ==> r13 == old(r13);
        win ==> r14 == old(r14);
        win ==> r15 == old(r15);

        win ==> xmm6  == old(xmm6);
        win ==> xmm7  == old(xmm7);
        win ==> xmm8  == old(xmm8);
        win ==> xmm10 == old(xmm10);
        win ==> xmm11 == old(xmm11);

        // Linux:
        !win ==> rbx == old(rbx);
        !win ==> rbp == old(rbp);
        !win ==> r12 == old(r12);
        !win ==> r13 == old(r13);
        !win ==> r14 == old(r14);
        !win ==> r15 == old(r15);
{
    // Shuffle the incoming pointer around
    inline if (win) {
        Mov64(r9, rcx);
    } else {
        Mov64(r9, rdi);
    }

    callee_save_registers(win, stack_b);
    gcm_stdcall_inner(args_b, iv_BE, plain_b, auth_b, iv_b, out_b, tag_b, key, round_keys, keys_b);
    callee_restore_registers(win, stack_b, old(xmm6), old(xmm7), old(xmm8), old(xmm10), old(xmm11));
}
*/
