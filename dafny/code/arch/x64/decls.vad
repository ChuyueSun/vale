include{:verbatim} "vale.dfy"
include{:verbatim}{:from BASE} "code/lib/util/dafny_wrappers.dfy"
include{:verbatim}{:from BASE} "code/lib/util/operations.dfy"

#verbatim
module x64_decls {

import opened x64_vale
import opened dafny_wrappers
import opened operations
#endverbatim

type{:primitive} state:Type(0) extern;
type nat:Type(0) := int_range(0, _);
type uint32:Type(0) := int_range(0, 0xffff_ffff);
type uint64:Type(0) := int_range(0, 0xffff_ffff_ffff_ffff);
type{:primitive} seq(a:Type(0)):Type(0) extern;
type map(a:Type(0), b:Type(0)):Type(0) extern;
type Quadword:Type(0) extern;
type memEntry:Type(0) extern;
type heap:Type(0) := map(int, memEntry);
type Frame:Type(0) := map(int, uint32);
type Stack:Type(0) := seq(Frame);
function operator([]) #[a:Type(0)](s:seq(a), i:int):a extern; // TODO: requires clause
function operator([ := ]) #[a:Type(0)](s:seq(a), i:int, v:a):seq(a) extern; // TODO: requires clause
function operator([]) #[a:Type(0), b:Type(0)](m:map(a, b), key:a):b extern; // TODO: requires clause
function operator([ := ]) #[a:Type(0), b:Type(0)](m:map(a, b), key:a, v:b):map(a, b) extern;
function Mem32(v32:uint32):memEntry extern;
function Mem64(v64:uint64):memEntry extern;
function operator(.v32) (m:memEntry):uint32 extern;
function operator(.v64) (m:memEntry):uint64 extern;
function operator(.ok) (s:state):bool extern;
function operator(.ok :=) (s:state, b:bool):state extern;
function ValidDstAddr(h:heap, addr:int, size:int):bool extern;
function ValidSrcAddr(h:heap, addr:int, size:int):bool extern;
function HasStackSlot(s:Stack, slot:int):bool extern;
function SeqTail #[a:Type(0)](s:seq(a), tail:nat):seq(a) extern; // TODO: requires clause
function IsUInt32(i:int):bool extern;
function lower64(i:uint64):uint32 extern;
function upper64(i:uint64):uint32 extern;
function lowerUpper64(l:uint32, u:uint32):uint64 extern;
function BitwiseAnd(x:uint32, y:uint32):uint32 extern;
function BitwiseXor(x:uint32, y:uint32):uint32 extern;
function BitwiseAdd32(x:uint32, y:uint32):uint32 extern;
function BitwiseAdd64(x:uint64, y:uint64):uint64 extern;
function BitwiseSub64(x:uint64, y:uint64):uint64 extern;
function BitwiseMul64(x:uint64, y:uint64):uint64 extern;
function BitwiseMul64hi(x:uint64, y:uint64):uint64 extern;
function BitwiseAnd64(x:uint64, y:uint64):uint64 extern;
function BitwiseShl64(x:uint64, y:uint64):uint64 extern; // TODO: requires clause
function BitwiseShr64(x:uint64, y:uint64):uint64 extern; // TODO: requires clause
function xor32(x:uint32, y:uint32):uint32 extern;
function xor64(x:uint64, y:uint64):uint64 extern;
function and32(x:uint32, y:uint32):uint32 extern;
function not32(x:uint32):uint32 extern;
function rol32(x:uint32, amount:uint32):uint32 extern; // TODO: requires clause
function ror32(x:uint32, amount:uint32):uint32 extern; // TODO: requires clause
function shl32(x:uint32, amount:uint32):uint32 extern; // TODO: requires clause
function shr32(x:uint32, amount:uint32):uint32 extern; // TODO: requires clause
function QuadwordXor(a:Quadword, b:Quadword):Quadword extern;
function Cf(flags:uint32):bool extern;

var{:state ok()} ok:bool;

var{:state reg32(X86Eax)} eax:uint32;
var{:state reg32(X86Ebx)} ebx:uint32;
var{:state reg32(X86Ecx)} ecx:uint32;
var{:state reg32(X86Edx)} edx:uint32;
var{:state reg32(X86Esi)} esi:uint32;
var{:state reg32(X86Edi)} edi:uint32;
var{:state reg32(X86Ebp)} ebp:uint32;
var{:state reg32(X86R8)}  r8d:uint32;
var{:state reg32(X86R9)}  r9d:uint32;
var{:state reg32(X86R10)} r10d:uint32;
var{:state reg32(X86R11)} r11d:uint32;
var{:state reg32(X86R12)} r12d:uint32;
var{:state reg32(X86R13)} r13d:uint32;
var{:state reg32(X86R14)} r14d:uint32;
var{:state reg32(X86R15)} r15d:uint32;

var{:state reg64(X86Eax)} rax:uint64;
var{:state reg64(X86Ebx)} rbx:uint64;
var{:state reg64(X86Ecx)} rcx:uint64;
var{:state reg64(X86Edx)} rdx:uint64;
var{:state reg64(X86Esi)} rsi:uint64;
var{:state reg64(X86Edi)} rdi:uint64;
var{:state reg64(X86Ebp)} rbp:uint64;
var{:state reg64(X86R8)}  r8:uint64;
var{:state reg64(X86R9)}  r9:uint64;
var{:state reg64(X86R10)} r10:uint64;
var{:state reg64(X86R11)} r11:uint64;
var{:state reg64(X86R12)} r12:uint64;
var{:state reg64(X86R13)} r13:uint64;
var{:state reg64(X86R14)} r14:uint64;
var{:state reg64(X86R15)} r15:uint64;

var{:state Quadword(0)} xmm0:Quadword;
var{:state Quadword(1)} xmm1:Quadword;
var{:state Quadword(2)} xmm2:Quadword;
var{:state Quadword(3)} xmm3:Quadword;
var{:state Quadword(4)} xmm4:Quadword;
var{:state Quadword(5)} xmm5:Quadword;

var{:state flags()} efl:uint32;
var{:state mem()}   mem:heap;
var{:state stack()} stack:Stack;

operand_type reg32:uint32 :=
| inout eax | inout ebx | inout ecx | inout edx
| inout esi | inout edi | inout ebp | inout r8d
| inout r9d | inout r10d | inout r11d | inout r12d
| inout r13d | inout r14d | inout r15d
;
operand_type reg64:uint64 :=
| inout rax | inout rbx | inout rcx | inout rdx
| inout rsi | inout rdi | inout rbp | inout r8
| inout r9 | inout r10 | inout r11 | inout r12
| inout r13 | inout r14 | inout r15
;
operand_type opr_quad:Quadword :=
| inout xmm0 | inout xmm1 | inout xmm2 | inout xmm3
| inout xmm4 | inout xmm5
;
operand_type mem32:uint32;
operand_type mem64:uint64;
operand_type shift32:uint32 := in ecx | const;
operand_type opr32:uint32 := reg32 | const;
operand_type shift64:uint64 := in rcx | const;
operand_type opr64:uint64 := reg64 | const;

#verbatim
lemma lemma_lowerUpper64(i:uint64)
    ensures lowerUpper64(lower64(i), upper64(i)) == i
{
    reveal_lower64();
    reveal_upper64();
    reveal_lowerUpper64();
}
#endverbatim

ghost procedure lemma_lowerUpper64(ghost i:uint64) extern;
ghost procedure lemma_BitwiseAdd32EquivalentToAddMod2To32(ghost x:uint32, ghost y:uint32) extern;
ghost procedure lemma_BitwiseAdd64EquivalentToAddMod2To64(ghost x:uint64, ghost y:uint64) extern;

procedure{:instruction Ins(Mov32(dst, MakeHeapOp(src, offset))) }
          Load(out dst:opr32, src:opr64, inline offset:int)
    requires
        ValidSrcAddr(mem, src + offset, 32);
    reads
        mem;
    ensures
        ValidSrcAddr(mem, old(src) + offset, 32);
        dst == mem[old(src) + offset].v32;
{
    reveal evalCodeOpaque;
    reveal x86_ValidState;
}

procedure{:instruction Ins(Mov32(MakeHeapOp(dst, offset), src)) }
          Store(dst:opr64, src:opr32, inline offset:int)
    requires/ensures
        ValidDstAddr(mem, dst + offset, 32);
    modifies
        mem;
    ensures
        mem == old(mem)[dst + offset := Mem32(src)];
{
    reveal evalCodeOpaque;
    reveal x86_ValidState;
}

procedure{:instruction Ins(Mov32(dst, stack(slot))) }
          LoadStack(out dst:opr32, inline slot:int)
    requires/ensures
        HasStackSlot(stack, slot);
    reads
        stack;
    ensures
        dst == stack[0][slot];
{
    reveal evalCodeOpaque;
    reveal x86_ValidState;
}

procedure{:instruction Ins(Mov32(stack(slot), src)) }
          StoreStack(inline slot:int, src:opr32)
    requires/ensures
        HasStackSlot(stack, slot);
    modifies
        stack;
    ensures
        stack[0] == old(stack[0][slot := src]);
        SeqTail(stack, 1) == old(SeqTail(stack, 1));
{
    reveal evalCodeOpaque;
    reveal x86_ValidState;
}

procedure{:instruction Ins(Mov64(dst, stack(slot))) }
          LoadStack64(out dst:opr64, inline slot:int)
    requires/ensures
        HasStackSlot(stack, slot);
        HasStackSlot(stack, slot + 1);
    reads
        stack;
    ensures
        dst == lowerUpper64(stack[0][slot], stack[0][slot + 1]);
{
    reveal evalCodeOpaque;
    reveal x86_ValidState;
}

procedure{:instruction Ins(Mov64(stack(slot), src)) }
          StoreStack64(inline slot:int, src:opr64)
    requires/ensures
        HasStackSlot(stack, slot);
        HasStackSlot(stack, slot + 1);
    modifies
        stack;
    ensures
        stack[0] == old(stack[0][slot := lower64(src)][slot + 1 := upper64(src)]);
        src == lowerUpper64(lower64(src), upper64(src));
        SeqTail(stack, 1) == old(SeqTail(stack, 1));
{
    reveal evalCodeOpaque;
    reveal x86_ValidState;
    lemma_lowerUpper64(src);
}

procedure{:instruction Ins(Add32(dst, OConst(1)))} incr(inout dst:opr32)
    requires
        0 <= dst <= 1000;
    modifies
        efl;
    ensures
        dst == old(dst) + 1;
{
    reveal evalCodeOpaque;
    reveal x86_ValidState;
}

procedure{:instruction Ins(Add32(dst, src))} Add32(inout dst:opr32, src:opr32)
    requires
        src + dst < 0x1_0000_0000;
    modifies
        efl;
    ensures
        dst == old(dst) + old(src);
{
    reveal evalCodeOpaque;
    reveal x86_ValidState;
    lemma_BitwiseAdd32EquivalentToAddMod2To32(old(dst), old(src));
}

procedure{:instruction Ins(Add32(dst, src))} Add32Wrap(inout dst:opr32, src:opr32)
    modifies
        efl;
    ensures
        dst == (old(dst) + old(src)) % 0x1_0000_0000;
        dst == old(BitwiseAdd32(dst, src));
{
    reveal evalCodeOpaque;
    reveal x86_ValidState;
    lemma_BitwiseAdd32EquivalentToAddMod2To32(old(dst), old(src));
}

procedure{:instruction Ins(Add64(dst, src))} Add64(inout dst:opr64, src:opr64)
    requires
        src + dst < 0x1_0000_0000_0000_0000;
    modifies
        efl;
    ensures
        dst == old(dst) + old(src);
{
    reveal evalCodeOpaque;
    reveal x86_ValidState;
    lemma_BitwiseAdd64EquivalentToAddMod2To64(old(dst), old(src));
}

procedure{:instruction Ins(Mov32(dst, src))} Mov32(out dst:opr32, src:opr32)
    ensures
        dst == old(src);
{
    reveal evalCodeOpaque;
    reveal x86_ValidState;
}

procedure{:instruction Ins(Mov64(dst, src))} Mov64(out dst:opr64, src:opr64)
    ensures
        dst == old(src);
{
    reveal evalCodeOpaque;
    reveal x86_ValidState;
}

procedure{:instruction Ins(Xor32(dst, src))} Xor32(inout dst:opr32, src:opr32)
    modifies efl;
    ensures
        dst == xor32(old(dst), old(src));
{
    reveal evalCodeOpaque;
    reveal x86_ValidState;
}

procedure{:instruction Ins(Xor64(dst, src))} Xor64(inout dst:opr64, src:opr64)
    modifies efl;
    ensures
        dst == xor64(old(dst), old(src));
{
    reveal evalCodeOpaque;
    reveal x86_ValidState;
}

procedure{:instruction Ins(And32(dst, src))} And32(inout dst:opr32, src:opr32)
    modifies efl;
    ensures
        dst == and32(old(dst), old(src));
{
    reveal evalCodeOpaque;
    reveal x86_ValidState;
}

procedure{:instruction Ins(Not32(dst))} Not32(inout dst:opr32)
    modifies efl;
    ensures
        dst == not32(old(dst));
{
    reveal evalCodeOpaque;
    reveal x86_ValidState;
}

procedure{:instruction Ins(Rol32(dst, OConst(amount)))} Rol32(inout dst:opr32, inline amount:uint32)
    requires
        0 <= amount < 32;
    modifies efl;
    ensures
        dst == rol32(old(dst), old(amount));
{
    reveal evalCodeOpaque;
    reveal x86_ValidState;
}

procedure{:instruction Ins(Ror32(dst, OConst(amount)))} Ror32(inout dst:opr32, inline amount:uint32)
    requires
        0 <= amount < 32;
    modifies efl;
    ensures
        dst == ror32(old(dst), old(amount));
{
    reveal evalCodeOpaque;
    reveal x86_ValidState;
}

procedure{:instruction Ins(Shl32(dst, OConst(amount)))} Shl32(inout dst:opr32, inline amount:uint32)
    requires
        0 <= amount < 32;
    modifies efl;
    ensures
        dst == shl32(old(dst), old(amount));
{
    reveal evalCodeOpaque;
    reveal x86_ValidState;
}

procedure{:instruction Ins(Shr32(dst, OConst(amount)))} Shr32(inout dst:opr32, inline amount:uint32)
    requires
        0 <= amount < 32;
    modifies efl;
    ensures
        dst == shr32(old(dst), old(amount));
{
    reveal evalCodeOpaque;
    reveal x86_ValidState;
}

procedure{:instruction Ins(Pxor(dst, src))} Pxor(inout dst:opr_quad, src:opr_quad)
    modifies efl;
    ensures
        dst == old(QuadwordXor(dst, src));
{
    reveal evalCodeOpaque;
    reveal x86_ValidState;
}

#verbatim
} // end module x86decls
#endverbatim
